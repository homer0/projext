[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/abstracts/cliCommand.js",
    "content": "/**\n * A helper class for creating commands for the CLI interface.\n * @abstract\n */\nclass CLICommand {\n  /**\n   * Class constructor.\n   * @throws {TypeError} If instantiated directly.\n   * @abstract\n   */\n  constructor() {\n    if (new.target === CLICommand) {\n      throw new TypeError(\n        'CLICommand is an abstract class, it can\\'t be instantiated directly'\n      );\n    }\n    /**\n     * The CLI command instruction. For example `my-command [target]`.\n     * @type {string}\n     */\n    this.command = '';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = '';\n    /**\n     * A list with the name of the options the command supports. New options can be added using\n     * the `addOption` method.\n     * @type {Array}\n     */\n    this.options = [];\n    /**\n     * A dictionary of command options settings by their option name. New options can be added\n     * using the `addOption` method.\n     * @type {Object}\n     */\n    this.optionsByName = {};\n    /**\n     * This is a useful flag for when the command is ran as a result of another command. It lets\n     * the interface know that it can search for option values on a parent command, if there's one.\n     * @type {boolean}\n     */\n    this.checkOptionsOnParent = true;\n    /**\n     * Whether the command and its description should be shown on the CLI interface list of\n     * commands.\n     * @type {boolean}\n     */\n    this.hidden = false;\n    /**\n     * Whether or not a sub program should be executed for this command. Take for example the case\n     * of `git`, where `git checkout [branch]` executes `git` as main program, and `checkout` as a\n     * sub program. If this is `true`, then a binary with the name of the command should be\n     * exported on the `package.json`.\n     * @type {boolean}\n     */\n    this.subProgram = false;\n    /**\n     * This is the name of the program that runs the command. It will be added when the command\n     * is registered on the program.\n     * @type {string}\n     */\n    this.cliName = '';\n  }\n  /**\n   * Add a new option for the command.\n   * @example\n   * // To capture an option\n   * this.addOption(\n   *   'type',\n   *   '-t, --type [type]',\n   *   'The type of thingy you want to use?',\n   * );\n   *\n   * // As a simple flag\n   * this.addOption(\n   *   'ready',\n   *   '-r, --ready',\n   *   'Is it read?',\n   *   false\n   * );\n   *\n   * @param {string} name              The option name.\n   * @param {string} instruction       The option instruction, for example: `-t, --type [type]`.\n   * @param {string} [description='']  The option description.\n   * @param {string} [defaultValue=''] The option default value, in case is not used on execution.\n   */\n  addOption(name, instruction, description = '', defaultValue = '') {\n    this.optionsByName[name] = {\n      name,\n      instruction,\n      description,\n      defaultValue,\n    };\n\n    this.options.push(name);\n  }\n  /**\n   * Register this command on a CLI program.\n   * @param {Command} program  A Commander instance.\n   * @param {Object}  cli      The main CLI interface, just for the name.\n   * @param {string}  cli.name The CLI interface name.\n   * @see https://yarnpkg.com/en/package/commander\n   */\n  register(program, cli) {\n    // Get the name of the program\n    this.cliName = cli.name;\n    const options = {};\n    // If the command should be hidden...\n    if (this.hidden) {\n      // ...remove it from the help interface.\n      options.noHelp = true;\n    }\n\n    let command;\n    // If the command is a sub program...\n    if (this.subProgram) {\n      /**\n       * ...it gets added without the `.description` property. That's how Commander differentiates\n       * a main program command and a sub program command.\n       */\n      command = program.command(this.command, this.description, options);\n    } else {\n      // ...otherwise, it gets added as a sub command of the main program.\n      command = program\n      .command(this.command, '', options)\n      .description(this.description);\n    }\n    // Register all the command options.\n    this.options.forEach((name) => {\n      const option = this.optionsByName[name];\n      command = command.option(\n        option.instruction,\n        option.description\n      );\n    });\n    // Add the handler for when the command gets executed.\n    command.action(this._handle.bind(this));\n  }\n  /**\n   * Generate an instruction for this command.\n   * @example\n   * // Let's say this command is `destroy [target] [--once]`\n   *\n   * this.generate({ target: 'pluto' });\n   * // Will return `destroy pluto`\n   *\n   * this.generate({ target: 'moon', once: true });\n   * // Will return `destroy moon --once`\n   * @param  {Object} [args={}] A dictionary with the arguments and options for the command. If the\n   *                            command includes an argument on its `command` property, that\n   *                            argument is required.\n   * @return {string} The command instruction to run on the CLI interface.\n   */\n  generate(args = {}) {\n    let cmd = this.command;\n    const cmdOptions = [];\n    // Loop all the `args`...\n    Object.keys(args).forEach((name) => {\n      const value = args[name];\n      const asPlaceholder = `[${name}]`;\n      // Check if the current argument should be used on the command instruction...\n      if (cmd.includes(asPlaceholder)) {\n        // ...if so, replace it on the main command.\n        cmd = cmd.replace(asPlaceholder, value);\n      } else if (this.optionsByName[name]) {\n        // ...otherwise, check if there's an option with the same name as the argument.\n        const option = this.optionsByName[name];\n        /**\n         * Remove the shorthand version of the option instruction, if there's one. For example:\n         * `-t, --type [type]` -> `--type [type]`.\n         */\n        let instruction = option.instruction.split(',').pop().trim();\n        // If the option instruction includes the argument as a value (`[argument-name]`)...\n        if (instruction.includes(asPlaceholder)) {\n          // ...replace it on the option instruction.\n          instruction = instruction.replace(asPlaceholder, value);\n        } else if (value === false) {\n          /**\n           * ...but if the value is `false`, then we clear the instruction as it won't be included\n           * on the generated string.\n           */\n          instruction = '';\n        }\n\n        // If there's an option instruction...\n        if (instruction) {\n          // ...add it to the list.\n          cmdOptions.push(instruction);\n        }\n      }\n    });\n\n    let options = '';\n    // If after the loop, there are option instructions to add...\n    if (cmdOptions.length) {\n      // ...put them all together on a single string, separated by a space\n      options = ['', ...cmdOptions].join(' ');\n    }\n\n    // Return the complete command instruction\n    return `${this.cliName} ${cmd}${options}`;\n  }\n  /**\n   * Handle the command execution.\n   * This method will receive first the captured arguments, then the executed command information\n   * from Commander and finally, a dictionary with the options and their values.\n   * @example\n   * // Let's say the command is `run [target] [--production]`.\n   * // And now, it was executed with `run my-target`\n   * handle(target, command, options) {\n   *   console.log(target);\n   *   // Will output `my-target`\n   *   console.log(options.production)\n   *   // Will output `false`\n   * }\n   * @throws {Error} if not overwritten.\n   * @abstract\n   */\n  handle() {\n    throw new Error('This method must to be overwritten');\n  }\n  /**\n   * A simple wrapper for a `console.log`. Outputs a variable to the CLI interface.\n   * @param {string} text The text to output.\n   */\n  output(text) {\n    // eslint-disable-next-line no-console\n    console.log(text);\n  }\n  /**\n   * This is the real method that receives the execution of the command and parses it in order to\n   * create the options dictionary that the `handle` method receives.\n   * @param {Array} args The list of arguments sent by Commander.\n   * @ignore\n   * @access protected\n   */\n  _handle(...args) {\n    // The actual command is always the last argument.\n    const command = args[args.length - 1];\n    const options = {};\n    // Loop all the known options the command can receive\n    Object.keys(this.optionsByName).forEach((name) => {\n      const option = this.optionsByName[name];\n      let value = '';\n      // If the option is on the command...\n      if (command[name]) {\n        // ...then that's the value that will be used.\n        value = command[name];\n      }\n\n      /**\n       * If no value was found yet, the flag to check on the parent is `true`, there's a parent\n       * command and it has an option with that name...\n       */\n      if (\n        !value &&\n        this.checkOptionsOnParent &&\n        command.parent &&\n        command.parent[name]\n      ) {\n        // ...then that's the value that will be used.\n        value = command.parent[name];\n      }\n      // If no value was found and there's a default value registered for the option...\n      if (!value && typeof option.defaultValue !== 'undefined') {\n        // ...then that's the value that will be used.\n        value = option.defaultValue;\n      }\n\n      // Set the option on the dictionary with the value found.\n      options[name] = value;\n    });\n\n    // Copy the arguments list.\n    const newArgs = args.slice();\n    // Add the new options dictionary at the end.\n    newArgs.push(options);\n    // Call the abstract method that handles the execution.\n    this.handle(...newArgs);\n  }\n}\n\nmodule.exports = CLICommand;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/abstracts/cliCommand.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "CLICommand",
    "memberof": "src/abstracts/cliCommand.js",
    "static": true,
    "longname": "src/abstracts/cliCommand.js~CLICommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/abstracts/cliCommand.js",
    "importStyle": "CLICommand",
    "description": "A helper class for creating commands for the CLI interface.",
    "lineNumber": 5,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 11,
    "abstract": true,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If instantiated directly."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "command",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#command",
    "access": "public",
    "description": "The CLI command instruction. For example `my-command [target]`.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "description",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "options",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#options",
    "access": "public",
    "description": "A list with the name of the options the command supports. New options can be added using\nthe `addOption` method.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "optionsByName",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#optionsByName",
    "access": "public",
    "description": "A dictionary of command options settings by their option name. New options can be added\nusing the `addOption` method.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "checkOptionsOnParent",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#checkOptionsOnParent",
    "access": "public",
    "description": "This is a useful flag for when the command is ran as a result of another command. It lets\nthe interface know that it can search for option values on a parent command, if there's one.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 56,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#hidden",
    "access": "public",
    "description": "Whether the command and its description should be shown on the CLI interface list of\ncommands.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 57,
    "kind": "member",
    "name": "subProgram",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#subProgram",
    "access": "public",
    "description": "Whether or not a sub program should be executed for this command. Take for example the case\nof `git`, where `git checkout [branch]` executes `git` as main program, and `checkout` as a\nsub program. If this is `true`, then a binary with the name of the command should be\nexported on the `package.json`.",
    "lineNumber": 58,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 58,
    "kind": "member",
    "name": "cliName",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#cliName",
    "access": "public",
    "description": "This is the name of the program that runs the command. It will be added when the command\nis registered on the program.",
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "addOption",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#addOption",
    "access": "public",
    "description": "Add a new option for the command.",
    "examples": [
      "// To capture an option\nthis.addOption(\n  'type',\n  '-t, --type [type]',\n  'The type of thingy you want to use?',\n);\n\n// As a simple flag\nthis.addOption(\n  'ready',\n  '-r, --ready',\n  'Is it read?',\n  false\n);"
    ],
    "lineNumber": 89,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The option name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "instruction",
        "description": "The option instruction, for example: `-t, --type [type]`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "description",
        "description": "The option description."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "defaultValue",
        "description": "The option default value, in case is not used on execution."
      }
    ],
    "return": null
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "register",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#register",
    "access": "public",
    "description": "Register this command on a CLI program.",
    "see": [
      "https://yarnpkg.com/en/package/commander"
    ],
    "lineNumber": 106,
    "params": [
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "program",
        "description": "A Commander instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "cli",
        "description": "The main CLI interface, just for the name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "cli.name",
        "description": "The CLI interface name."
      }
    ],
    "return": null
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "generate",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#generate",
    "access": "public",
    "description": "Generate an instruction for this command.",
    "examples": [
      "// Let's say this command is `destroy [target] [--once]`\n\nthis.generate({ target: 'pluto' });\n// Will return `destroy pluto`\n\nthis.generate({ target: 'moon', once: true });\n// Will return `destroy moon --once`"
    ],
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "args",
        "description": "A dictionary with the arguments and options for the command. If the\n                           command includes an argument on its `command` property, that\n                           argument is required."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command instruction to run on the CLI interface."
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "handle",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#handle",
    "access": "public",
    "description": "Handle the command execution.\nThis method will receive first the captured arguments, then the executed command information\nfrom Commander and finally, a dictionary with the options and their values.",
    "examples": [
      "// Let's say the command is `run [target] [--production]`.\n// And now, it was executed with `run my-target`\nhandle(target, command, options) {\n  console.log(target);\n  // Will output `my-target`\n  console.log(options.production)\n  // Will output `false`\n}"
    ],
    "lineNumber": 221,
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if not overwritten."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "output",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#output",
    "access": "public",
    "description": "A simple wrapper for a `console.log`. Outputs a variable to the CLI interface.",
    "lineNumber": 228,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "text",
        "description": "The text to output."
      }
    ],
    "return": null
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "_handle",
    "memberof": "src/abstracts/cliCommand.js~CLICommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/cliCommand.js~CLICommand#_handle",
    "access": "protected",
    "description": "This is the real method that receives the execution of the command and parses it in order to\ncreate the options dictionary that the `handle` method receives.",
    "lineNumber": 239,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The list of arguments sent by Commander."
      }
    ],
    "return": null
  },
  {
    "__docId__": 66,
    "kind": "file",
    "name": "src/abstracts/configurationFile.js",
    "content": "const fs = require('fs-extra');\nconst extend = require('extend');\n/**\n * A helper class for creating configuration files that can be overwritten on\n * implementation.\n * @abstract\n */\nclass ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {PathUtils}         pathUtils            To build the path to the overwrite file.\n   * @param {string}            overwritePath        The path, inside the `config` folder, for the\n   *                                                 file that can overwrite the configuration.\n   * @param {boolean}           [asFactory=false]    If `true`, every time `getConfig` gets called,\n   *                                                 the configuration will be created again,\n   *                                                 instead of caching it the first time it's\n   *                                                 created.\n   * @param {?ConfigurationFile} [parentConfig=null] If this parameter is used, the configuration\n   *                                                 created by the instance will be merged on top\n   *                                                 of the configuration returned by the\n   *                                                 `getConfig` method of the parent configuration.\n   * @throws {TypeError} If instantiated directly.\n   * @abstract\n   */\n  constructor(pathUtils, overwritePath, asFactory = false, parentConfig = null) {\n    if (new.target === ConfigurationFile) {\n      throw new TypeError(\n        'ConfigurationFile is an abstract class, it can\\'t be instantiated directly'\n      );\n    }\n    /**\n     * A local reference to the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * The path, inside the `config` folder, for the file that can overwrite the configuration.\n     * @type {string}\n     */\n    this.overwritePath = overwritePath;\n    /**\n     * Whether the configuration should be created every time `getConfig` gets called or not.\n     * @type {boolean}\n     */\n    this.asFactory = asFactory;\n    /**\n     * A parent configuration to extend.\n     * @type {?ConfigurationFile}\n     */\n    this.parentConfig = parentConfig;\n    /**\n     * This will store the configuration after creating it.\n     * @type {?Object}\n     */\n    this._config = null;\n    /**\n     * A flag to know if the overwrite file has been loaded or not.\n     * @type {boolean}\n     */\n    this._fileConfigLoaded = false;\n    /**\n     * A function that eventually will return the changes from the overwrite file. Once the file\n     * is loaded, if the file exports a function, then it will replace this variable, otherwise, the\n     * return value of this method will be become the exported configuration.\n     * @return {Object}\n     */\n    this._fileConfig = () => ({});\n  }\n  /**\n   * This method will be called the first time `getConfig` gets called (or every time, depending on\n   * the value of the `asFactory` property) and it should return the configuration contents.\n   * As parameters, it will return the same ones sent to `getConfig`.\n   * @example\n   * // Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n   * // do something like this:\n   * createConfig(options, prefix) {\n   *   return { message: `${prefix} ${options.name}` };\n   * }\n   * // And the configuration would be `{ message: 'hello Charito'}`\n   * @throws {Error} if not overwritten.\n   * @abstract\n   */\n  createConfig() {\n    throw new Error('This method must to be overwritten');\n  }\n  /**\n   * This is the public method all other services uses to obtain the configuration. If the\n   * configuration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\n   * configuration will be reloaded.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @return {Object}\n   */\n  getConfig(...args) {\n    if (!this._config || this.asFactory) {\n      this._loadConfig(...args);\n    }\n\n    return this._config;\n  }\n  /**\n   * This is the real method that creates the configuration.\n   * @param  {Array} args A list of parameters for the service to use when creating the\n   *                      configuration\n   * @return {Object}\n   * @ignore\n   * @access protected\n   */\n  _loadConfig(...args) {\n    // If the overwrite file wasn't loaded yet...\n    if (!this._fileConfigLoaded) {\n      // ...turn on the flag that says it was loaded.\n      this._fileConfigLoaded = true;\n      // Call the method that loads the file.\n      this._loadConfigFromFile();\n    }\n\n    let parentConfig = {};\n    // If a parent configuration was defined on the constructor...\n    if (this.parentConfig) {\n      /**\n       * Get its configuration by calling its `getConfig` method with the same parameters this\n       * method received.\n       */\n      parentConfig = this.parentConfig.getConfig(...args);\n    }\n    /**\n     * Return the final configuration, which is a merge of the following things:\n     * - The parent configuration `getConfig` method result; or an empty object if no parent\n     * configuration was received.\n     * - The result of this instance `createConfig` method.\n     * - The contents of the overwrite file.\n     */\n    this._config = extend(\n      true,\n      {},\n      parentConfig,\n      this.createConfig(...args),\n      this._fileConfig(...args)\n    );\n  }\n  /**\n   * Load the configuration from the overwrite file.\n   * @ignore\n   * @access protected\n   */\n  _loadConfigFromFile() {\n    const filepath = this.pathUtils.join('config', this.overwritePath);\n    let overwriteContents = null;\n    // If the file exists...\n    if (fs.pathExistsSync(filepath)) {\n      // ...require it\n      // eslint-disable-next-line global-require, import/no-dynamic-require\n      overwriteContents = require(filepath);\n    }\n    // If the file exists and exported anything...\n    if (overwriteContents) {\n      // ...get the type of whatever the file exported.\n      const overwriteType = typeof overwriteContents;\n      // If the file exported a function...\n      if (overwriteType === 'function') {\n        // ...set it as the `_fileConfig` property.\n        this._fileConfig = overwriteContents;\n      } else {\n        // ...otherwise, set the `_fileConfig` property to return whatever the file exported.\n        this._fileConfig = () => overwriteContents;\n      }\n    }\n  }\n}\n\nmodule.exports = ConfigurationFile;\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/abstracts/configurationFile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 67,
    "kind": "class",
    "name": "ConfigurationFile",
    "memberof": "src/abstracts/configurationFile.js",
    "static": true,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/abstracts/configurationFile.js",
    "importStyle": "ConfigurationFile",
    "description": "A helper class for creating configuration files that can be overwritten on\nimplementation.",
    "lineNumber": 8,
    "abstract": true,
    "interface": false
  },
  {
    "__docId__": 68,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 25,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build the path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "overwritePath",
        "description": "The path, inside the `config` folder, for the\n                                                file that can overwrite the configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "asFactory",
        "description": "If `true`, every time `getConfig` gets called,\n                                                the configuration will be created again,\n                                                instead of caching it the first time it's\n                                                created."
      },
      {
        "nullable": true,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "parentConfig",
        "description": "If this parameter is used, the configuration\n                                                created by the instance will be merged on top\n                                                of the configuration returned by the\n                                                `getConfig` method of the parent configuration."
      }
    ],
    "abstract": true,
    "throws": [
      {
        "types": [
          "TypeError"
        ],
        "description": "If instantiated directly."
      }
    ]
  },
  {
    "__docId__": 69,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#pathUtils",
    "access": "public",
    "description": "A local reference to the `pathUtils` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 70,
    "kind": "member",
    "name": "overwritePath",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#overwritePath",
    "access": "public",
    "description": "The path, inside the `config` folder, for the file that can overwrite the configuration.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 71,
    "kind": "member",
    "name": "asFactory",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#asFactory",
    "access": "public",
    "description": "Whether the configuration should be created every time `getConfig` gets called or not.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "parentConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#parentConfig",
    "access": "public",
    "description": "A parent configuration to extend.",
    "lineNumber": 50,
    "type": {
      "nullable": true,
      "types": [
        "ConfigurationFile"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "_config",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_config",
    "access": "private",
    "description": "This will store the configuration after creating it.",
    "lineNumber": 55,
    "type": {
      "nullable": true,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "member",
    "name": "_fileConfigLoaded",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfigLoaded",
    "access": "private",
    "description": "A flag to know if the overwrite file has been loaded or not.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "member",
    "name": "_fileConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_fileConfig",
    "access": "private",
    "description": "A function that eventually will return the changes from the overwrite file. Once the file\nis loaded, if the file exports a function, then it will replace this variable, otherwise, the\nreturn value of this method will be become the exported configuration.",
    "lineNumber": 67,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 76,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#createConfig",
    "access": "public",
    "description": "This method will be called the first time `getConfig` gets called (or every time, depending on\nthe value of the `asFactory` property) and it should return the configuration contents.\nAs parameters, it will return the same ones sent to `getConfig`.",
    "examples": [
      "// Let's say the class receives this call: `getConfig({ name: 'Charito'}, 'hello')`, you could\n// do something like this:\ncreateConfig(options, prefix) {\n  return { message: `${prefix} ${options.name}` };\n}\n// And the configuration would be `{ message: 'hello Charito'}`"
    ],
    "lineNumber": 83,
    "abstract": true,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if not overwritten."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 77,
    "kind": "method",
    "name": "getConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#getConfig",
    "access": "public",
    "description": "This is the public method all other services uses to obtain the configuration. If the\nconfiguration doesn't exists or `asFactory` was set to `true` on the `constructor`, the\nconfiguration will be reloaded.",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 78,
    "kind": "method",
    "name": "_loadConfig",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfig",
    "access": "protected",
    "description": "This is the real method that creates the configuration.",
    "lineNumber": 109,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "A list of parameters for the service to use when creating the\n                     configuration"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 81,
    "kind": "method",
    "name": "_loadConfigFromFile",
    "memberof": "src/abstracts/configurationFile.js~ConfigurationFile",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/abstracts/configurationFile.js~ConfigurationFile#_loadConfigFromFile",
    "access": "protected",
    "description": "Load the configuration from the overwrite file.",
    "lineNumber": 147,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/app/index.js",
    "content": "const Jimple = require('jimple');\nconst appPackage = require('../../package.json');\n\nconst {\n  environmentUtils,\n  errorHandler,\n  appLogger,\n  packageInfo,\n  pathUtils,\n  rootRequire,\n} = require('wootils/node/providers');\n\nconst {\n  cleaner,\n  copier,\n  events,\n  plugins,\n  versionUtils,\n} = require('../services/common');\n\nconst {\n  buildCleaner,\n  buildCopier,\n  buildEngines,\n  buildNodeRunner,\n  buildNodeRunnerProcess,\n  buildTranspiler,\n  buildVersion,\n  builder,\n  targets,\n} = require('../services/building');\n\nconst {\n  cli,\n  cliBuildCommand,\n  cliCleanCommand,\n  cliCopyProjectFilesCommand,\n  cliRevisionCommand,\n  cliRunCommand,\n  cliSHBuildCommand,\n  cliSHCopyCommand,\n  cliSHNodeRunCommand,\n  cliSHRunCommand,\n  cliSHTranspileCommand,\n  cliSHValidateBuildCommand,\n  cliSHValidateRunCommand,\n} = require('../services/cli');\n\nconst {\n  babelConfiguration,\n  projectConfiguration,\n  targetConfiguration,\n} = require('../services/configurations');\n/**\n * Woopack dependecy injection container. This class is in charge of registering all the Woopack\n * known services, load any existing plugin and add an error handler.\n * @extends {Jimple}\n */\nclass Woopack extends Jimple {\n  /**\n   * Registers all the known services, load any existing plugin and add an error handler.\n   * @ignore\n   */\n  constructor() {\n    super();\n\n    this.set('info', () => appPackage);\n\n    this.register(environmentUtils);\n    this.register(errorHandler);\n    this.register(appLogger);\n    this.register(packageInfo);\n    this.register(pathUtils);\n    this.register(rootRequire);\n\n    this.register(cleaner);\n    this.register(copier);\n    this.register(events);\n    this.register(plugins('woopack-plugin'));\n    this.register(versionUtils);\n\n    this.register(buildCleaner);\n    this.register(buildCopier);\n    this.register(buildEngines);\n    this.register(buildNodeRunner);\n    this.register(buildNodeRunnerProcess);\n    this.register(buildTranspiler);\n    this.register(buildVersion);\n    this.register(builder);\n    this.register(targets);\n\n    this.register(cli);\n    this.register(cliBuildCommand);\n    this.register(cliCleanCommand);\n    this.register(cliCopyProjectFilesCommand);\n    this.register(cliRevisionCommand);\n    this.register(cliRunCommand);\n    this.register(cliSHBuildCommand);\n    this.register(cliSHCopyCommand);\n    this.register(cliSHNodeRunCommand);\n    this.register(cliSHRunCommand);\n    this.register(cliSHTranspileCommand);\n    this.register(cliSHValidateBuildCommand);\n    this.register(cliSHValidateRunCommand);\n\n    this.register(babelConfiguration);\n    this.register(projectConfiguration);\n    this.register(targetConfiguration);\n\n    this._loadPlugins();\n    this._addErrorHandler();\n  }\n  /**\n   * Starts Woopack CLI interface.\n   */\n  cli() {\n    this.get('cli').start([\n      this.get('cliBuildCommand'),\n      this.get('cliRunCommand'),\n      this.get('cliCleanCommand'),\n      this.get('cliCopyProjectFilesCommand'),\n      this.get('cliRevisionCommand'),\n      this.get('cliSHBuildCommand'),\n      this.get('cliSHCopyCommand'),\n      this.get('cliSHNodeRunCommand'),\n      this.get('cliSHRunCommand'),\n      this.get('cliSHTranspileCommand'),\n      this.get('cliSHValidateBuildCommand'),\n      this.get('cliSHValidateRunCommand'),\n    ]);\n  }\n  /**\n   * Uses the `plugins` service to load and register any existing plugin.\n   * @ignore\n   * @access protected\n   */\n  _loadPlugins() {\n    this.get('plugins').load();\n  }\n  /**\n   * Makes the `errorHandler` service listen for any uncaught exceptions Woopack may throw.\n   * @ignore\n   * @access protected\n   */\n  _addErrorHandler() {\n    this.get('errorHandler').listen();\n  }\n}\n\nmodule.exports = { Woopack };\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/app/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "class",
    "name": "Woopack",
    "memberof": "src/app/index.js",
    "static": true,
    "longname": "src/app/index.js~Woopack",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/app/index.js",
    "importStyle": "{Woopack}",
    "description": "Woopack dependecy injection container. This class is in charge of registering all the Woopack\nknown services, load any existing plugin and add an error handler.",
    "lineNumber": 59,
    "interface": false,
    "extends": [
      "Jimple"
    ]
  },
  {
    "__docId__": 86,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/app/index.js~Woopack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Woopack#constructor",
    "access": "public",
    "description": "Registers all the known services, load any existing plugin and add an error handler.",
    "lineNumber": 64,
    "ignore": true
  },
  {
    "__docId__": 87,
    "kind": "method",
    "name": "cli",
    "memberof": "src/app/index.js~Woopack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Woopack#cli",
    "access": "public",
    "description": "Starts Woopack CLI interface.",
    "lineNumber": 116,
    "params": [],
    "return": null
  },
  {
    "__docId__": 88,
    "kind": "method",
    "name": "_loadPlugins",
    "memberof": "src/app/index.js~Woopack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Woopack#_loadPlugins",
    "access": "protected",
    "description": "Uses the `plugins` service to load and register any existing plugin.",
    "lineNumber": 137,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 89,
    "kind": "method",
    "name": "_addErrorHandler",
    "memberof": "src/app/index.js~Woopack",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/app/index.js~Woopack#_addErrorHandler",
    "access": "protected",
    "description": "Makes the `errorHandler` service listen for any uncaught exceptions Woopack may throw.",
    "lineNumber": 145,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 90,
    "kind": "file",
    "name": "src/index.js",
    "content": "module.exports = require('./app');\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/services/building/buildCleaner.js",
    "content": "const fs = require('fs-extra');\nconst { provider } = require('jimple');\n/**\n * Remove the builded files for the project and/or an specific target.\n */\nclass BuildCleaner {\n  /**\n   * Class constructor.\n   * @param {Logger}                       appLogger            Used to inform the user when files\n   *                                                            haven been removed of it there was\n   *                                                            a problem removing them.\n   * @param {Cleaner.clean}                cleaner              The function that removes\n   *                                                            directories and files using glob\n   *                                                            patterns.\n   * @param {PathUtils}                    pathUtils            Necessary to build the paths to\n   *                                                            clean.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the project information and\n   *                                                            get paths.\n   */\n  constructor(\n    appLogger,\n    cleaner,\n    pathUtils,\n    projectConfiguration\n  ) {\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `cleaner` service function.\n     * @type {Cleaner.clean}\n     */\n    this.cleaner = cleaner;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n  }\n  /**\n   * Removes the entire distribution directory (where are the targets build are located).\n   * @return {Promise<undefined,Error>}\n   */\n  cleanAll() {\n    const { paths: { build } } = this.projectConfiguration;\n    const dist = this.pathUtils.join(build);\n    return this.cleaner(dist, '**')\n    .then(() => {\n      this.appLogger.success(\n        `The distribution directory was successfully removed (${dist})`\n      );\n    })\n    .catch((error) => {\n      this.appLogger.error(\n        `Error: There was an error while removing the distribution directory (${dist})`\n      );\n\n      return Promise.reject(error);\n    });\n  }\n  /**\n   * Removes the builded files of an specific target.\n   * @param {Target} target The target information.\n   * @return {Promise<undefined,Error>}\n   */\n  cleanTarget(target) {\n    const { paths: { build } } = this.projectConfiguration;\n    const dist = this.pathUtils.join(build);\n    const cleanStep = target.is.node ?\n      this.cleanNodeTarget(target) :\n      this.cleanBrowserTarget(target);\n\n    return cleanStep\n    .then(() => {\n      this.appLogger.success(\n        `The files for ${target.name} have been was successfully removed from ` +\n        `the distribution directory (${dist})`\n      );\n    })\n    .catch((error) => {\n      this.appLogger.error(\n        `Error: There was an error while removing the files for ${target.name} ` +\n        `from the distribution directory (${dist})`\n      );\n\n      return Promise.reject(error);\n    });\n  }\n  /**\n   * Removes the builded files of a Node target.\n   * @param {Target} target The target information.\n   * @return {Promise<undefined,undefined>}\n   */\n  cleanNodeTarget(target) {\n    const {\n      bundle,\n      name,\n      paths: {\n        source,\n        build,\n      },\n    } = target;\n    const firstStep = bundle ?\n      Promise.resolve(this.getTargetNamesVariation(name)) :\n      fs.readdir(source);\n\n    return firstStep\n    .then((items) => this.cleaner(build, items));\n  }\n  /**\n   * Removes the builded files of a browser target.\n   * @param {Target} target The target information.\n   * @return {Promise<undefined,undefined>}\n   */\n  cleanBrowserTarget(target) {\n    const { paths: { output } } = this.projectConfiguration;\n    const {\n      name,\n      html,\n      paths: { build },\n    } = target;\n    const items = [\n      ...this.getTargetNamesVariation(name),\n      ...Object.keys(output).map((folder) => output[folder]),\n    ];\n\n    if (!target.library) {\n      items.push(...[\n        html.filename,\n        `${html.filename}.gz`,\n      ]);\n    }\n\n    return this.cleaner(build, items);\n  }\n  /**\n   * Get all the names variations for a target bundled file based on the target name.\n   * @param {string} name The target name.\n   * @return {Array} A list of all the possible names of files related to that target.\n   */\n  getTargetNamesVariation(name) {\n    const names = [\n      name,\n      `${name}.js`,\n      `${name}.js.map`,\n      `${name}.*.js`,\n      `${name}.*.js.map`,\n    ];\n    names.push(...names.map((file) => `${file}.gz`));\n    return names;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildCleaner` as the `buildCleaner` service.\n * @example\n * // Register it on the container\n * container.register(buildCleaner);\n * // Getting access to the service instance\n * const buildCleaner = container.get('buildCleaner');\n * @type {Provider}\n */\nconst buildCleaner = provider((app) => {\n  app.set('buildCleaner', () => new BuildCleaner(\n    app.get('appLogger'),\n    app.get('cleaner'),\n    app.get('pathUtils'),\n    app.get('projectConfiguration').getConfig()\n  ));\n});\n\nmodule.exports = {\n  BuildCleaner,\n  buildCleaner,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildCleaner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "class",
    "name": "BuildCleaner",
    "memberof": "src/services/building/buildCleaner.js",
    "static": true,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildCleaner.js",
    "importStyle": "{BuildCleaner}",
    "description": "Remove the builded files for the project and/or an specific target.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 93,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "Used to inform the user when files\n                                                           haven been removed of it there was\n                                                           a problem removing them."
      },
      {
        "nullable": null,
        "types": [
          "Cleaner.clean"
        ],
        "spread": false,
        "optional": false,
        "name": "cleaner",
        "description": "The function that removes\n                                                           directories and files using glob\n                                                           patterns."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Necessary to build the paths to\n                                                           clean."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the project information and\n                                                           get paths."
      }
    ]
  },
  {
    "__docId__": 94,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 95,
    "kind": "member",
    "name": "cleaner",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#cleaner",
    "access": "public",
    "description": "A local reference for the `cleaner` service function.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Cleaner.clean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 96,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 97,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 98,
    "kind": "method",
    "name": "cleanAll",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#cleanAll",
    "access": "public",
    "description": "Removes the entire distribution directory (where are the targets build are located).",
    "lineNumber": 51,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "cleanTarget",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#cleanTarget",
    "access": "public",
    "description": "Removes the builded files of an specific target.",
    "lineNumber": 73,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "cleanNodeTarget",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#cleanNodeTarget",
    "access": "public",
    "description": "Removes the builded files of a Node target.",
    "lineNumber": 101,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,undefined>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "cleanBrowserTarget",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#cleanBrowserTarget",
    "access": "public",
    "description": "Removes the builded files of a browser target.",
    "lineNumber": 122,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,undefined>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "getTargetNamesVariation",
    "memberof": "src/services/building/buildCleaner.js~BuildCleaner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCleaner.js~BuildCleaner#getTargetNamesVariation",
    "access": "public",
    "description": "Get all the names variations for a target bundled file based on the target name.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The target name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": "A list of all the possible names of files related to that target."
    }
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "buildCleaner",
    "memberof": "src/services/building/buildCleaner.js",
    "static": true,
    "longname": "src/services/building/buildCleaner.js~buildCleaner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildCleaner.js",
    "importStyle": "{buildCleaner}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildCleaner` as the `buildCleaner` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildCleaner);\n// Getting access to the service instance\nconst buildCleaner = container.get('buildCleaner');"
    ],
    "lineNumber": 170,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 104,
    "kind": "file",
    "name": "src/services/building/buildCopier.js",
    "content": "const fs = require('fs-extra');\nconst path = require('path');\nconst { provider } = require('jimple');\n/**\n * Copies the project files and/or the files of a target that doesn't require bundling.\n */\nclass BuildCopier {\n  /**\n   * Class constructor.\n   * @param {Copier.copy}                  copier               The function that copies files and\n   *                                                            directories.\n   * @param {Logger}                       appLogger            Used to inform the user when files\n   *                                                            are being copied.\n   * @param {Events}                       events               To trigger events reducer that may\n   *                                                            alter the items being copied.\n   * @param {PathUtils}                    pathUtils            Necessary to build the paths.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the project information and\n   *                                                            get paths.\n   */\n  constructor(copier, appLogger, events, pathUtils, projectConfiguration) {\n    /**\n     * A local reference for the `copier` service function.\n     * @type {Copier.copy}\n     */\n    this.copier = copier;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n  }\n  /**\n   * If `copy.enabled` is `true` on the project configuration, this method will copy the list of\n   * items on the configuration `copy.items` key.\n   * This method emits the event reducer `project-files-to-copy` with the list of items to copy and\n   * expects an `Array` on return.\n   * @return {Promise<undefined,Error>}\n   */\n  copyFiles() {\n    let result;\n    const {\n      copy,\n      version: {\n        revision,\n      },\n      paths: {\n        build,\n        privateModules,\n      },\n    } = this.projectConfiguration;\n    // If the feature is enabled...\n    if (copy.enabled) {\n      // ..prepare a list of the items\n      let items = [];\n      // Prepare a list of Node modules that may be copied.\n      const copiedModules = {};\n      // If there are items to copy on the project configuration...\n      if (Array.isArray(copy.items)) {\n        // ...loop the items.\n        copy.items.forEach((item) => {\n          // If the item is a Node module...\n          if (typeof item === 'string' && item.startsWith('node_modules')) {\n            // ...generate a new path for the module inside a private folder.\n            const newModulePath = item.replace(/^(node_modules\\/)/, `${privateModules}/`);\n            // Save the name of the module linked to the new path.\n            copiedModules[item.split('/').pop()] = newModulePath;\n            // Push the module and its new path to the list of items to copy.\n            items.push({\n              [item]: newModulePath,\n            });\n          } else {\n            // ...otherwise, just push it to the list of items to copy.\n            items.push(item);\n          }\n        });\n\n        // if the revision functionality is enabled and the file exists...\n        if (\n          revision.enabled &&\n          revision.copy &&\n          fs.pathExistsSync(this.pathUtils.join(revision.filename))\n        ) {\n          // ...add it to the items to copy.\n          items.push(revision.filename);\n        }\n        // Reduce the list of items to copy and give the chance to any plugin to add new ones.\n        items = this.events.reduce('project-files-to-copy', items);\n        // If there are still items to copy...\n        if (items.length) {\n          // ...grab a reference to the path of the project.\n          const thispath = this.pathUtils.path;\n          // Copy all the items on the project path onto the distribution directory.\n          result = this.copier(\n            thispath,\n            this.pathUtils.join(build),\n            items\n          )\n          .then((results) => {\n            this.appLogger.success('The following items have been successfully copied:');\n            // Remove the absolute path and the first `/`\n            const prefix = thispath.length + 1;\n            // Log a message for each item informing it was copied.\n            results.forEach((item) => {\n              const from = item.from.substr(prefix);\n              const to = item.to.substr(prefix);\n              this.appLogger.info(`${from} -> ${to}`);\n            });\n            /**\n             * If there any Node module was copied, call the method that updates the copied\n             * `package.json` of the project and modules in order to use relative paths instead of\n             * versions of the npm/yarn registry.\n             */\n            return Object.keys(copiedModules).length ?\n              this.addPrivateModules(this.pathUtils.join(build, 'package.json'), copiedModules) :\n              {};\n          })\n          .catch((error) => {\n            this.appLogger.error('There was an error copying the files');\n            return Promise.reject(error);\n          });\n        } else {\n          result = Promise.resolve();\n        }\n      } else {\n        result = Promise.reject(new Error('The \\'copy.items\\' setting is not an array'));\n      }\n    } else {\n      result = Promise.resolve();\n    }\n\n    return result;\n  }\n  /**\n   * After the project files are copied, this module updates the copied package.json with local\n   * references for any given module name.\n   * @param {string}  packagePath             The path to the main `package.json`.\n   * @param {Object}  modules                 A dictionary with the name of modules as keys and\n   *                                          local paths as values.\n   * @param {boolean} [updateModulesToo=true] If `true`, it will also update the `package.json` of\n   *                                          each of the modules with references each others local\n   *                                          paths.\n   * @return Promise<undefined,Error>\n   */\n  addPrivateModules(packagePath, modules, updateModulesToo = true) {\n    // Read the main `package.json`\n    return fs.readJson(packagePath)\n    .then((packageContents) => {\n      // Create a new reference to avoid linting issues.\n      const newPackage = Object.assign({}, packageContents);\n      // Loop the different types of dependencies...\n      ['dependencies', 'devDependencies']\n      .forEach((type) => {\n        // Loop the dictionary of modules...\n        Object.keys(modules).forEach((dependencyName) => {\n          // If the module is present...\n          if (newPackage[type] && newPackage[type][dependencyName]) {\n            // ...change the version to the local path.\n            newPackage[type][dependencyName] = `./${modules[dependencyName]}`;\n          }\n        });\n      });\n      // Remove any \"private property\" npm adds on the `package.json`\n      Object.keys(newPackage).forEach((property) => {\n        if (property.startsWith('_')) {\n          delete newPackage[property];\n        }\n      });\n      // Write the updated file.\n      return fs.writeJson(packagePath, newPackage);\n    })\n    .then(() => {\n      let result = {};\n      // If it needs to also update the methods between each other...\n      if (updateModulesToo) {\n        // Get the location of the private folder where modules are copied.\n        const { paths: { privateModules } } = this.projectConfiguration;\n        // Generate a path to it.\n        const directory = path.join(path.dirname(packagePath), privateModules);\n        const packages = [];\n        const modulesWithPathToRoot = {};\n        // Loop all the modules...\n        Object.keys(modules).forEach((dependencyName) => {\n          // Get its private path.\n          const privatePath = modules[dependencyName];\n          /**\n           * Updates it by adding 2 levels up from its location so they will be relative to where\n           * the `package.json` is: one to `node_modules`, and a second one to the \"root\"\n           */\n          modulesWithPathToRoot[dependencyName] = `../../${privatePath}`;\n          /**\n           * Push the module `package.json` path to the list of `package.json`s that will be\n           * updated.\n           */\n          packages.push(path.join(directory, dependencyName, 'package.json'));\n        });\n        /**\n         * Loop all the `package.json`s and call this same method to update their references, but\n         * with the flag to update modules disabled as it's already doing it.\n         */\n        result = Promise.all(packages.map((modulePackage) => this.addPrivateModules(\n          modulePackage,\n          modulesWithPathToRoot,\n          false\n        )));\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Copy the files of an specific target.\n   * @param {Target} target The target information.\n   * @return {Promise<undefined,Error>}\n   */\n  copyTargetFiles(target) {\n    return fs.ensureDir(target.paths.build)\n    .then(() => fs.readdir(target.paths.source))\n    .then((items) => this.copier(\n      target.paths.source,\n      target.paths.build,\n      items\n    ))\n    .then(() => {\n      this.appLogger.success(\n        `The files for ${target.name} have been successfully copied (${target.paths.build})`\n      );\n    })\n    .catch((error) => {\n      this.appLogger.error(`The files for ${target.name} couldn't be copied`);\n      return Promise.reject(error);\n    });\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildCopier` as the `buildCopier` service.\n * @example\n * // Register it on the container\n * container.register(buildCopier);\n * // Getting access to the service instance\n * const buildCopier = container.get('buildCopier');\n * @type {Provider}\n */\nconst buildCopier = provider((app) => {\n  app.set('buildCopier', () => new BuildCopier(\n    app.get('copier'),\n    app.get('appLogger'),\n    app.get('events'),\n    app.get('pathUtils'),\n    app.get('projectConfiguration').getConfig()\n  ));\n});\n\nmodule.exports = {\n  BuildCopier,\n  buildCopier,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildCopier.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 105,
    "kind": "class",
    "name": "BuildCopier",
    "memberof": "src/services/building/buildCopier.js",
    "static": true,
    "longname": "src/services/building/buildCopier.js~BuildCopier",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildCopier.js",
    "importStyle": "{BuildCopier}",
    "description": "Copies the project files and/or the files of a target that doesn't require bundling.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 106,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "Copier.copy"
        ],
        "spread": false,
        "optional": false,
        "name": "copier",
        "description": "The function that copies files and\n                                                           directories."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "Used to inform the user when files\n                                                           are being copied."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To trigger events reducer that may\n                                                           alter the items being copied."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Necessary to build the paths."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the project information and\n                                                           get paths."
      }
    ]
  },
  {
    "__docId__": 107,
    "kind": "member",
    "name": "copier",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#copier",
    "access": "public",
    "description": "A local reference for the `copier` service function.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Copier.copy"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 108,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 109,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 110,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 111,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 112,
    "kind": "method",
    "name": "copyFiles",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#copyFiles",
    "access": "public",
    "description": "If `copy.enabled` is `true` on the project configuration, this method will copy the list of\nitems on the configuration `copy.items` key.\nThis method emits the event reducer `project-files-to-copy` with the list of items to copy and\nexpects an `Array` on return.",
    "lineNumber": 54,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 113,
    "kind": "method",
    "name": "addPrivateModules",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#addPrivateModules",
    "access": "public",
    "description": "After the project files are copied, this module updates the copied package.json with local\nreferences for any given module name.",
    "lineNumber": 159,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "packagePath",
        "description": "The path to the main `package.json`."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "modules",
        "description": "A dictionary with the name of modules as keys and\n                                         local paths as values."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "updateModulesToo",
        "description": "If `true`, it will also update the `package.json` of\n                                         each of the modules with references each others local\n                                         paths."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Promise<undefined,Error>"
    }
  },
  {
    "__docId__": 114,
    "kind": "method",
    "name": "copyTargetFiles",
    "memberof": "src/services/building/buildCopier.js~BuildCopier",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildCopier.js~BuildCopier#copyTargetFiles",
    "access": "public",
    "description": "Copy the files of an specific target.",
    "lineNumber": 230,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 115,
    "kind": "variable",
    "name": "buildCopier",
    "memberof": "src/services/building/buildCopier.js",
    "static": true,
    "longname": "src/services/building/buildCopier.js~buildCopier",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildCopier.js",
    "importStyle": "{buildCopier}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildCopier` as the `buildCopier` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildCopier);\n// Getting access to the service instance\nconst buildCopier = container.get('buildCopier');"
    ],
    "lineNumber": 259,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/services/building/buildEngines.js",
    "content": "const { provider } = require('jimple');\n/**\n * This is an special service as it doesn't do anything but returning another services: Build\n * engines are what Woopack uses to bundle targets, since they depend on a target configuration,\n * we can't have huge `if` that checks the value of the setting in order to retrieve the required\n * service.\n * The solution we came up with is that the engines services all respect an interface and register\n * themselves with the name `[name]BuildEngine` so the rest of the app can use this service to\n * retrieve them by name.\n */\nclass BuildEngines {\n  /**\n   * Class constructor.\n   * @param {Woopack} app The main app container. Used to retrieve the build engines services.\n   */\n  constructor(app) {\n    /**\n     * A local reference for the main app container.\n     * @type {Woopack}\n     */\n    this.app = app;\n  }\n  /**\n   * Get a build engine service.\n   * @param {string} name The engine name.\n   * @return {BuildEngine}\n   * @throws {Error} If the service is not registered.\n   */\n  getEngine(name) {\n    return this.app.get(`${name}BuildEngine`);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildEngines` as the `buildEngines` service.\n * @example\n * // Register it on the container\n * container.register(buildEngines);\n * // Getting access to the service instance\n * const buildEngines = container.get('buildEngines');\n * @type {Provider}\n */\nconst buildEngines = provider((app) => {\n  app.set('buildEngines', () => new BuildEngines(app));\n});\n\nmodule.exports = {\n  BuildEngines,\n  buildEngines,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildEngines.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "class",
    "name": "BuildEngines",
    "memberof": "src/services/building/buildEngines.js",
    "static": true,
    "longname": "src/services/building/buildEngines.js~BuildEngines",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildEngines.js",
    "importStyle": "{BuildEngines}",
    "description": "This is an special service as it doesn't do anything but returning another services: Build\nengines are what Woopack uses to bundle targets, since they depend on a target configuration,\nwe can't have huge `if` that checks the value of the setting in order to retrieve the required\nservice.\nThe solution we came up with is that the engines services all respect an interface and register\nthemselves with the name `[name]BuildEngine` so the rest of the app can use this service to\nretrieve them by name.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 118,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildEngines.js~BuildEngines",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildEngines.js~BuildEngines#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Woopack"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The main app container. Used to retrieve the build engines services."
      }
    ]
  },
  {
    "__docId__": 119,
    "kind": "member",
    "name": "app",
    "memberof": "src/services/building/buildEngines.js~BuildEngines",
    "static": false,
    "longname": "src/services/building/buildEngines.js~BuildEngines#app",
    "access": "public",
    "description": "A local reference for the main app container.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Woopack"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 120,
    "kind": "method",
    "name": "getEngine",
    "memberof": "src/services/building/buildEngines.js~BuildEngines",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildEngines.js~BuildEngines#getEngine",
    "access": "public",
    "description": "Get a build engine service.",
    "lineNumber": 29,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The engine name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "BuildEngine"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the service is not registered."
      }
    ]
  },
  {
    "__docId__": 121,
    "kind": "variable",
    "name": "buildEngines",
    "memberof": "src/services/building/buildEngines.js",
    "static": true,
    "longname": "src/services/building/buildEngines.js~buildEngines",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildEngines.js",
    "importStyle": "{buildEngines}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildEngines` as the `buildEngines` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildEngines);\n// Getting access to the service instance\nconst buildEngines = container.get('buildEngines');"
    ],
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 122,
    "kind": "file",
    "name": "src/services/building/buildNodeRunner.js",
    "content": "const path = require('path');\nconst { provider } = require('jimple');\n/**\n * This service provides a simple interface for running targets on a development environment using\n * `Nodemon`. The actual service that does the _'running'_ is `buildNodeRunnerProcess`, but this\n * one takes care of reading and processing a target settings before telling the other service\n * to start Nodemon.\n */\nclass BuildNodeRunner {\n  /**\n   * Class constructor.\n   * @param {BuildNodeRunnerProcess#run} buildNodeRunnerProcess To actually run a target process.\n   */\n  constructor(buildNodeRunnerProcess) {\n    /**\n     * A local reference for the `buildNodeRunnerProcess` service.\n     * @type {BuildNodeRunnerProcess#run}\n     */\n    this.buildNodeRunnerProcess = buildNodeRunnerProcess;\n  }\n  /**\n   * Run a target with Nodemon.\n   * @param  {Target} target The target information.\n   * @return {Nodemon}\n   * @throws {Error} If the target needs to be bundled.\n   */\n  runTarget(target) {\n    if (target.bundle) {\n      throw new Error(`${target.name} needs to be bundled in order to run`);\n    }\n\n    return target.transpile ?\n      this._runWithTranspilation(target) :\n      this._run(target);\n  }\n  /**\n   * Runs a target that requires transpilation. It executes the file from the distribution\n   * directory while it watches the source directory.\n   * @param  {Target} target The target information.\n   * @return {Nodemon}\n   */\n  _runWithTranspilation(target) {\n    const { paths: { source, build } } = target;\n    const executable = path.join(build, target.entry.development);\n    const watch = [build];\n    this.buildNodeRunnerProcess(\n      executable,\n      watch,\n      source,\n      build,\n      {}\n    );\n  }\n  /**\n   * Runs a target that doesn't require transpilation. It executes and watches the source directory.\n   * @param  {Target} target The target information.\n   * @return {Nodemon}\n   */\n  _run(target) {\n    const { paths: { source } } = target;\n    const executable = path.join(source, target.entry.development);\n    const watch = [source];\n    this.buildNodeRunnerProcess(\n      executable,\n      watch,\n      source,\n      source,\n      {}\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildNodeRunner` as the `buildNodeRunner` service.\n * @example\n * // Register it on the container\n * container.register(buildNodeRunner);\n * // Getting access to the service instance\n * const buildNodeRunner = container.get('buildNodeRunner');\n * @type {Provider}\n */\nconst buildNodeRunner = provider((app) => {\n  app.set('buildNodeRunner', () => new BuildNodeRunner(\n    app.get('buildNodeRunnerProcess')\n  ));\n});\n\nmodule.exports = {\n  BuildNodeRunner,\n  buildNodeRunner,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildNodeRunner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 123,
    "kind": "class",
    "name": "BuildNodeRunner",
    "memberof": "src/services/building/buildNodeRunner.js",
    "static": true,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildNodeRunner.js",
    "importStyle": "{BuildNodeRunner}",
    "description": "This service provides a simple interface for running targets on a development environment using\n`Nodemon`. The actual service that does the _'running'_ is `buildNodeRunnerProcess`, but this\none takes care of reading and processing a target settings before telling the other service\nto start Nodemon.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 124,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildNodeRunnerProcess#run"
        ],
        "spread": false,
        "optional": false,
        "name": "buildNodeRunnerProcess",
        "description": "To actually run a target process."
      }
    ]
  },
  {
    "__docId__": 125,
    "kind": "member",
    "name": "buildNodeRunnerProcess",
    "memberof": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "static": false,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner#buildNodeRunnerProcess",
    "access": "public",
    "description": "A local reference for the `buildNodeRunnerProcess` service.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "BuildNodeRunnerProcess#run"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 126,
    "kind": "method",
    "name": "runTarget",
    "memberof": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner#runTarget",
    "access": "public",
    "description": "Run a target with Nodemon.",
    "lineNumber": 27,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Nodemon"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the target needs to be bundled."
      }
    ]
  },
  {
    "__docId__": 127,
    "kind": "method",
    "name": "_runWithTranspilation",
    "memberof": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner#_runWithTranspilation",
    "access": "private",
    "description": "Runs a target that requires transpilation. It executes the file from the distribution\ndirectory while it watches the source directory.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Nodemon"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 128,
    "kind": "method",
    "name": "_run",
    "memberof": "src/services/building/buildNodeRunner.js~BuildNodeRunner",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunner.js~BuildNodeRunner#_run",
    "access": "private",
    "description": "Runs a target that doesn't require transpilation. It executes and watches the source directory.",
    "lineNumber": 59,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Nodemon"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 129,
    "kind": "variable",
    "name": "buildNodeRunner",
    "memberof": "src/services/building/buildNodeRunner.js",
    "static": true,
    "longname": "src/services/building/buildNodeRunner.js~buildNodeRunner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildNodeRunner.js",
    "importStyle": "{buildNodeRunner}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildNodeRunner` as the `buildNodeRunner` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildNodeRunner);\n// Getting access to the service instance\nconst buildNodeRunner = container.get('buildNodeRunner');"
    ],
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 130,
    "kind": "file",
    "name": "src/services/building/buildNodeRunnerProcess.js",
    "content": "const path = require('path');\nconst fs = require('fs-extra');\nconst extend = require('extend');\nconst nodemon = require('nodemon');\nconst Watchpack = require('watchpack');\nconst { provider } = require('jimple');\n/**\n * This service implements both `nodemon` and `watchpack` in order to run Node apps while watching\n * and transpiling if necessary.\n */\nclass BuildNodeRunnerProcess {\n  /**\n   * Class constructor.\n   * @param {Logger}                       appLogger            The inform on the CLI of the events\n   *                                                            of the runner.\n   * @param {BuildTranspiler}              buildTranspiler      To transpile files if required.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the project paths.\n   */\n  constructor(appLogger, buildTranspiler, projectConfiguration) {\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `buildTranspiler` service.\n     * @type {BuildTranspiler}\n     */\n    this.buildTranspiler = buildTranspiler;\n    /**\n     * The watcher that will check of changes on the target source directory.\n     * @type {Watchpack}\n     */\n    this.watcher = new Watchpack({\n      poll: projectConfiguration.others.watch.poll,\n    });\n    /**\n     * A simple flag to check whether the process is running or not.\n     * @type {boolean}\n     */\n    this.running = false;\n    /**\n     * The default options for when the service runs a target. These will be overwritten by the\n     * parameters sent to the `run` method.\n     * @type {Object}\n     * @property {string}  executable            The path to the executable file.\n     * @property {Array}   watch                 A list of directories to watch.\n     * @property {Array}   ignore                A list of patterns to ignore.\n     * @property {string}  sourcePath            The path to the source files.\n     * @property {string}  executionPath         The path to the files being executed.\n     * @property {Object}  envVars               A dictionary of environment variables to send to\n     *                                           the process.\n     * @property {boolean} requiresTranspilation Whether or not the target requires transpilation.\n     */\n    this.defaultOptions = {\n      executable: '',\n      watch: [],\n      ignore: [],\n      sourcePath: '',\n      executionPath: '',\n      envVars: {},\n      requiresTranspilation: false,\n    };\n    /**\n     * This dictionary is where the parameters sent to the `run` method and the `defaultOptions`\n     * will be merged.\n     * @type {Object}\n     */\n    this.options = {};\n    /**\n     * Whether or not the process logged the starting message.\n     * @type {boolean}\n     * @ignore\n     * @access protected\n     */\n    this._started = false;\n    /**\n     * Whether or not the process is currently being restarted.\n     * @type {boolean}\n     * @ignore\n     * @access protected\n     */\n    this._restaring = false;\n    /**\n     * Bind the method to export it as the main service.\n     * @ignore\n     */\n    this.run = this.run.bind(this);\n    /**\n     * Bind the method to send it to the `nodemon` events listener.\n     * @ignore\n     */\n    this._onNodemonStart = this._onNodemonStart.bind(this);\n    /**\n     * Bind the method to send it to the `nodemon` events listener.\n     * @ignore\n     */\n    this._onNodemonRestart = this._onNodemonRestart.bind(this);\n    /**\n     * Bind the method to send it to the `nodemon` events listener.\n     * @ignore\n     */\n    this._onNodemonCrash = this._onNodemonCrash.bind(this);\n    /**\n     * Bind the method to send it to the `nodemon` events listener.\n     * @ignore\n     */\n    this._onNodemonQuit = this._onNodemonQuit.bind(this);\n    /**\n     * Bind the method to send it to the `watchpack` events listener.\n     * @ignore\n     */\n    this._onFileChange = this._onFileChange.bind(this);\n  }\n  /**\n   * Run a Node app.\n   * @param {string} executable             The app executable.\n   * @param {Array}  watchOn                A list of directories to watch.\n   * @param {string} sourcePath             The path to the source code of the app. If it doesn't\n   *                                        match with `executionPath`, then the code needs\n   *                                        transpilation.\n   * @param {string} executionPath          The path to where the app is being executed. If it\n   *                                        doesn't match with `sourcePath`, then the code needs\n   *                                        transpilation.\n   * @param {Object} [envVars={}]           A dictionary with extra environment variables to send to\n   *                                        the process.\n   * @param {Array}  [ignore=['*.test.js']] A list of patterns to ignore on the watch.\n   * @return {Nodemon}\n   * @throws {Error} if the process is already running.\n   * @throws {Error} if the executable doesn't exist.\n   */\n  run(\n    executable,\n    watchOn,\n    sourcePath,\n    executionPath,\n    envVars = {},\n    ignore = ['*.test.js']\n  ) {\n    // Check that is not already running and that the executable exists.\n    if (this.running) {\n      throw new Error(\n        'The process is already running, you can\\'t start it more than once'\n      );\n    } else if (!fs.pathExistsSync(executable)) {\n      throw new Error(`The target executable doesn't exist (${executable})`);\n    }\n    // Turn on the flag that tells the service the process is running.\n    this.running = true;\n    // Define the options.\n    this.options = extend(true, {}, this.defaultOptions, {\n      executable,\n      watchOn,\n      ignore,\n      sourcePath,\n      executionPath,\n      envVars,\n      requiresTranspilation: (sourcePath !== executionPath),\n    });\n    // If the code requires transpilation...\n    if (this.options.requiresTranspilation) {\n      // ...turn on `watchpack`.\n      this.watcher.watch([], [this.options.sourcePath]);\n      this.watcher.on('change', this._onFileChange);\n    }\n    // Execute `nodemon`.\n    nodemon({\n      script: this.options.executable,\n      watch: this.options.watchOn,\n      ignore: this.options.ignore,\n      env: Object.assign({}, process.env, this.options.envVars),\n    });\n    // Add the `nodemon` listeners.\n    nodemon.on('start', this._onNodemonStart);\n    nodemon.on('restart', this._onNodemonRestart);\n    nodemon.on('crash', this._onNodemonCrash);\n    nodemon.on('quit', this._onNodemonQuit);\n\n    return nodemon;\n  }\n  /**\n   * This is called when `nodemon` starts the process and after each time it restarts it. The\n   * method just prints information messages and turn on the `_started` flag.\n   * @param {boolean} [forceLog=false] By default, it only logs the messages the first time, but\n   *                                   if this flag is `true`, it will do it anyways. This is\n   *                                   used from the `_onNodemonRestart` to make sure the restart\n   *                                   messages are shown before the start.\n   * @ignore\n   * @access protected\n   */\n  _onNodemonStart(forceLog = false) {\n    // Only log the messages if it is the first time or if the force flag is `true.`\n    if (!this._started || forceLog) {\n      this.appLogger.success(`Starting ${this.options.executable}`);\n      this.appLogger.info([\n        'to restart at any time, enter \\'rs\\'',\n        ...this.options.watchOn.map((directory) => `watching: ${directory}`),\n      ]);\n      // Turn on the flag that informs the service this method was executed at least once.\n      this._started = true;\n    }\n  }\n  /**\n   * This is called when `nodemon` restarts a process, because a file changed or because the user\n   * requested it. It only prints information messages.\n   * @param {?Array} files A list of files that changed, thus triggering the restart.\n   * @ignore\n   * @access protected\n   */\n  _onNodemonRestart(files) {\n    /**\n     * If the code requires transpilation and this was triggered by file changes, the restart\n     * message was already printed by the `watchpack` listener, so no need to print anything else.\n     */\n    if (!this.options.requiresTranspilation) {\n      if (files && files.length) {\n        const [file] = files;\n        this.appLogger.warning(`Restarting because file was modified: ${file}`);\n      } else {\n        this.appLogger.warning('Restarting');\n      }\n    } else if (!files) {\n      /**\n       * If the code requires transpilation but the change was triggered by the user, then is ok to\n       * show a message.\n       */\n      this.appLogger.warning('Restarting');\n    }\n    /**\n     * After showing the restart messages, show the start messages again.\n     * This is done this way because for some reason, the events were being triggered before the\n     * `start` and then the `restart`, showing the messages out of order. This way, the `restart`\n     * triggers the `start`, so the order of the message is always correct.\n     */\n    this._onNodemonStart(true);\n  }\n  /**\n   * This is called when `nodemon` crashes and just prints a message saying that it is still\n   * watching.\n   * @ignore\n   * @access protected\n   */\n  _onNodemonCrash() {\n    this.appLogger.error('Crash - waiting for file changes before starting...');\n  }\n  /**\n   * This is called when the `nodemon` process is stopeed. It first checks if it needs to turn off\n   * the `watchpack` listener and then exists the current process.\n   * @ignore\n   * @access protected\n   */\n  _onNodemonQuit() {\n    // If the code needs transpilation...\n    if (this.options.requiresTranspilation) {\n      // ...then `watchpack` is listening and should be stopped.\n      this.watcher.close();\n    }\n\n    // eslint-disable-next-line no-process-exit\n    process.exit();\n  }\n  /**\n   * This is the `watchpack` listener and it gets called every time a source file changes. When this\n   * happens, the service transpiles the file, thus triggering `nodemon` restart.\n   * @param {string} file The path to the modified file.\n   * @ignore\n   * @access protected\n   */\n  _onFileChange(file) {\n    this.appLogger.warning(`Restarting because file was modified: ${file}`);\n    this._transpileFile(file);\n  }\n  /**\n   * Transpile a file from the source directory into the execution directory (the one `nodemon` is\n   * watching).\n   * @param {string} file The path to the file.\n   * @ignore\n   * @access protected\n   */\n  _transpileFile(file) {\n    const { sourcePath, executionPath } = this.options;\n    const relative = file.substr(sourcePath.length);\n\n    try {\n      this.buildTranspiler.transpileFileSync({\n        source: path.join(sourcePath, relative),\n        output: path.join(executionPath, relative),\n      });\n\n      this.appLogger.success('The file was successfully copied and transpiled');\n    } catch (error) {\n      /**\n       * By no throwing the error, we allow `nodemon` to keep listening so we can try making other\n       * changes to the file in order transpile it correctly.\n       */\n      this.appLogger.error('Error: The file couldn\\'t be updated');\n      this.appLogger.error(error);\n      this._onNodemonCrash();\n    }\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildNodeRunnerProcess` as the `buildNodeRunnerProcess` service.\n * @example\n * // Register it on the container\n * container.register(buildNodeRunnerProcess);\n * // Getting access to the service instance\n * const buildNodeRunnerProcess = container.get('buildNodeRunnerProcess');\n * @type {Provider}\n */\nconst buildNodeRunnerProcess = provider((app) => {\n  app.set('buildNodeRunnerProcess', () => new BuildNodeRunnerProcess(\n    app.get('appLogger'),\n    app.get('buildTranspiler'),\n    app.get('projectConfiguration').getConfig()\n  ).run);\n});\n\nmodule.exports = {\n  BuildNodeRunnerProcess,\n  buildNodeRunnerProcess,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildNodeRunnerProcess.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 131,
    "kind": "class",
    "name": "BuildNodeRunnerProcess",
    "memberof": "src/services/building/buildNodeRunnerProcess.js",
    "static": true,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildNodeRunnerProcess.js",
    "importStyle": "{BuildNodeRunnerProcess}",
    "description": "This service implements both `nodemon` and `watchpack` in order to run Node apps while watching\nand transpiling if necessary.",
    "lineNumber": 11,
    "interface": false
  },
  {
    "__docId__": 132,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "The inform on the CLI of the events\n                                                           of the runner."
      },
      {
        "nullable": null,
        "types": [
          "BuildTranspiler"
        ],
        "spread": false,
        "optional": false,
        "name": "buildTranspiler",
        "description": "To transpile files if required."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the project paths."
      }
    ]
  },
  {
    "__docId__": 133,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 134,
    "kind": "member",
    "name": "buildTranspiler",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#buildTranspiler",
    "access": "public",
    "description": "A local reference for the `buildTranspiler` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "BuildTranspiler"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 135,
    "kind": "member",
    "name": "watcher",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#watcher",
    "access": "public",
    "description": "The watcher that will check of changes on the target source directory.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Watchpack"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 136,
    "kind": "member",
    "name": "running",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#running",
    "access": "public",
    "description": "A simple flag to check whether the process is running or not.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 137,
    "kind": "member",
    "name": "defaultOptions",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#defaultOptions",
    "access": "public",
    "description": "The default options for when the service runs a target. These will be overwritten by the\nparameters sent to the `run` method.",
    "lineNumber": 55,
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": "The path to the executable file."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "watch",
        "description": "A list of directories to watch."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "ignore",
        "description": "A list of patterns to ignore."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcePath",
        "description": "The path to the source files."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "executionPath",
        "description": "The path to the files being executed."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "envVars",
        "description": "A dictionary of environment variables to send to\n                                          the process."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "requiresTranspilation",
        "description": "Whether or not the target requires transpilation."
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 138,
    "kind": "member",
    "name": "options",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#options",
    "access": "public",
    "description": "This dictionary is where the parameters sent to the `run` method and the `defaultOptions`\nwill be merged.",
    "lineNumber": 69,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 139,
    "kind": "member",
    "name": "_started",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_started",
    "access": "protected",
    "description": "Whether or not the process logged the starting message.",
    "lineNumber": 76,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 140,
    "kind": "member",
    "name": "_restaring",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_restaring",
    "access": "protected",
    "description": "Whether or not the process is currently being restarted.",
    "lineNumber": 83,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 147,
    "kind": "method",
    "name": "run",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#run",
    "access": "public",
    "description": "Run a Node app.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "executable",
        "description": "The app executable."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "watchOn",
        "description": "A list of directories to watch."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "sourcePath",
        "description": "The path to the source code of the app. If it doesn't\n                                       match with `executionPath`, then the code needs\n                                       transpilation."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "executionPath",
        "description": "The path to where the app is being executed. If it\n                                       doesn't match with `sourcePath`, then the code needs\n                                       transpilation."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "envVars",
        "description": "A dictionary with extra environment variables to send to\n                                       the process."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "['*.test.js']",
        "defaultRaw": "['*.test.js']",
        "name": "ignore",
        "description": "A list of patterns to ignore on the watch."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Nodemon"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "if the process is already running."
      },
      {
        "types": [
          "Error"
        ],
        "description": "if the executable doesn't exist."
      }
    ]
  },
  {
    "__docId__": 150,
    "kind": "method",
    "name": "_onNodemonStart",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_onNodemonStart",
    "access": "protected",
    "description": "This is called when `nodemon` starts the process and after each time it restarts it. The\nmethod just prints information messages and turn on the `_started` flag.",
    "lineNumber": 191,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceLog",
        "description": "By default, it only logs the messages the first time, but\n                                  if this flag is `true`, it will do it anyways. This is\n                                  used from the `_onNodemonRestart` to make sure the restart\n                                  messages are shown before the start."
      }
    ],
    "return": null
  },
  {
    "__docId__": 152,
    "kind": "method",
    "name": "_onNodemonRestart",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_onNodemonRestart",
    "access": "protected",
    "description": "This is called when `nodemon` restarts a process, because a file changed or because the user\nrequested it. It only prints information messages.",
    "lineNumber": 210,
    "ignore": true,
    "params": [
      {
        "nullable": true,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "A list of files that changed, thus triggering the restart."
      }
    ],
    "return": null
  },
  {
    "__docId__": 153,
    "kind": "method",
    "name": "_onNodemonCrash",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_onNodemonCrash",
    "access": "protected",
    "description": "This is called when `nodemon` crashes and just prints a message saying that it is still\nwatching.",
    "lineNumber": 243,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 154,
    "kind": "method",
    "name": "_onNodemonQuit",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_onNodemonQuit",
    "access": "protected",
    "description": "This is called when the `nodemon` process is stopeed. It first checks if it needs to turn off\nthe `watchpack` listener and then exists the current process.",
    "lineNumber": 252,
    "ignore": true,
    "params": [],
    "return": null
  },
  {
    "__docId__": 155,
    "kind": "method",
    "name": "_onFileChange",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_onFileChange",
    "access": "protected",
    "description": "This is the `watchpack` listener and it gets called every time a source file changes. When this\nhappens, the service transpiles the file, thus triggering `nodemon` restart.",
    "lineNumber": 269,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The path to the modified file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 156,
    "kind": "method",
    "name": "_transpileFile",
    "memberof": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildNodeRunnerProcess.js~BuildNodeRunnerProcess#_transpileFile",
    "access": "protected",
    "description": "Transpile a file from the source directory into the execution directory (the one `nodemon` is\nwatching).",
    "lineNumber": 280,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The path to the file."
      }
    ],
    "return": null
  },
  {
    "__docId__": 157,
    "kind": "variable",
    "name": "buildNodeRunnerProcess",
    "memberof": "src/services/building/buildNodeRunnerProcess.js",
    "static": true,
    "longname": "src/services/building/buildNodeRunnerProcess.js~buildNodeRunnerProcess",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildNodeRunnerProcess.js",
    "importStyle": "{buildNodeRunnerProcess}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildNodeRunnerProcess` as the `buildNodeRunnerProcess` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildNodeRunnerProcess);\n// Getting access to the service instance\nconst buildNodeRunnerProcess = container.get('buildNodeRunnerProcess');"
    ],
    "lineNumber": 312,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 158,
    "kind": "file",
    "name": "src/services/building/buildTranspiler.js",
    "content": "const path = require('path');\nconst babel = require('babel-core');\nconst fs = require('fs-extra');\nconst glob = require('glob');\nconst { provider } = require('jimple');\n/**\n * Manages the transpilation of target files using Babel.\n */\nclass BuildTranspiler {\n  /**\n   * Class constructor.\n   * @param {BabelConfiguration}           babelConfiguration   To get a target Babel configuration.\n   * @param {Logger}                       appLogger            To print information messages after\n   *                                                            transpiling files.\n   * @param {PathUtils}                    pathUtils            To build paths for targets files.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the project paths.\n   * @param {Targets}                      targets              To access targets information.\n   */\n  constructor(\n    babelConfiguration,\n    appLogger,\n    pathUtils,\n    projectConfiguration,\n    targets\n  ) {\n    /**\n     * A local reference for the `babelConfiguration` service.\n     * @type {BabelConfiguration}\n     */\n    this.babelConfiguration = babelConfiguration;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n  }\n  /**\n   * Transpile a target files for a given build type. This requires the target files to have been\n   * previously copied to the distribution directory.\n   * @param {Target} target    The target information.\n   * @param {string} buildType Required in order to get the target entry file and use that\n   *                           directory as reference of what it needs to be transpiled.\n   * @return {Promise<undefined,Error}\n   */\n  transpileTargetFiles(target, buildType) {\n    const { paths } = this.projectConfiguration;\n    // Get the target entry file for the given build type (on the distribution directory).\n    const targetFile = this.pathUtils.join(\n      paths.build,\n      target.entry[buildType]\n    );\n    /**\n     * Get the directory of the entry file.\n     * @todo This will cause issues if the entry file is on a sub directory.\n     */\n    const targetPath = path.dirname(targetFile);\n    // Find all the JS files on the directory.\n    return this.findFiles(targetPath)\n    .then((files) => {\n      // Get the Babel configuration for the target.\n      const babelConfig = this.babelConfiguration.getConfigForTarget(target);\n      // Loop all the files and transpile them\n      return Promise.all(files.map((file) => this.transpileFile(file, babelConfig)));\n    })\n    .then((files) => {\n      this.appLogger.success('The following files have been successfully transpiled:');\n      // Remove the absolute path and the first `/`\n      const prefix = this.pathUtils.path.length + 1;\n      // Log all the files that have been transpiled.\n      files.forEach((file) => {\n        const filepath = file.substr(prefix);\n        this.appLogger.info(`> ${filepath}`);\n      });\n    })\n    .catch((error) => {\n      this.appLogger.error(\n        `There was an error while transpiling the ${target.name} code`\n      );\n      return Promise.reject(error);\n    });\n  }\n  /**\n   * Transpile a file.\n   * @param {string|Object} filepath         If used as a string, it's the path to the file to\n   *                                         transpile; if used as an object, it should have\n   *                                         `source` and `output` properties to define from where\n   *                                         to where the file is transpiled.\n   * @param {?Object}       [options=null]   The Babel configuration to use. If not defined, the\n   *                                         method will try to find a target configuration using\n   *                                         the path of the file.\n   * @param {boolean}       [writeFile=true] If `true`, it will write the transpile code,\n   *                                         otherwise, it will return it on the promise.\n   * @return {Promise<Object|string,Error>} If `writeFile` is true, the promise will resolve on\n   *                                        an object with the keys `filepath` (the path where it\n   *                                        was transpiled) and `code`; but if the parameter is\n   *                                        `false`, the promise will resolve on a string with\n   *                                        the path to the file.\n   */\n  transpileFile(filepath, options = null, writeFile = true) {\n    let from = '';\n    let to = '';\n    /**\n     * Check if the file is a string or an object and define the from where to where the\n     * transpilation should happen.\n     */\n    if (typeof filepath === 'string') {\n      from = filepath;\n      to = filepath;\n    } else {\n      from = filepath.source;\n      to = filepath.output;\n    }\n    // If no options were defined, try to get them from a target, using the path of the file.\n    const babelOptions = options || this.getTargetConfigurationForFile(from);\n    // First, transform the file with Babel.\n    const firstStep = new Promise((resolve, reject) => {\n      babel.transformFile(from, babelOptions, (error, result) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(result.code);\n        }\n      });\n    });\n\n    let result;\n    // If the file should be written...\n    if (writeFile) {\n      result = firstStep\n      // ...write the file.\n      .then((code) => fs.writeFile(to, code))\n      // And return the path to the transpiled file.\n      .then(() => to);\n    } else {\n      result = firstStep\n      // Return the code and the path it should've been saved.\n      .then((code) => ({ filepath: to, code }));\n    }\n\n    return result;\n  }\n  /**\n   * Synchronous version of `transpileFile`.\n   * @param {string|Object} filepath         If used as a string, it's the path to the file to\n   *                                         transpile; if used as an object, it should have\n   *                                         `source` and `output` properties to define from where\n   *                                         to where the file is transpiled.\n   * @param {?Object}       [options=null]   The Babel configuration to use. If not defined, the\n   *                                         method will try to find a target configuration using\n   *                                         the path of the file.\n   * @param {boolean}       [writeFile=true] If `true`, it will write the transpile code,\n   *                                         otherwise, it will return it.\n   * @return {Object|string} If `writeFile` is true, it will return an object with the keys\n   *                         `filepath` (the path where it was transpiled) and `code`; but if the\n   *                         parameter is `false`, it will return a string with the path to the\n   *                         file.\n   */\n  transpileFileSync(filepath, options = null, writeFile = true) {\n    let from = '';\n    let to = '';\n    /**\n     * Check if the file is a string or an object and define the from where to where the\n     * transpilation should happen.\n     */\n    if (typeof filepath === 'string') {\n      from = filepath;\n      to = filepath;\n    } else {\n      from = filepath.source;\n      to = filepath.output;\n    }\n\n    // If no options were defined, try to get them from a target, using the path of the file.\n    const babelOptions = options || this.getTargetConfigurationForFile(from);\n    // First, transform the file with Babel.\n    const { code } = babel.transformFileSync(from, babelOptions);\n    let result;\n\n    // If the file should be written...\n    if (writeFile) {\n      // ...write the file.\n      fs.writeFileSync(to, code);\n      // And set to return the path to the transpiled file.\n      result = to;\n    } else {\n      // Set to return the code and the path it should've been saved.\n      result = { filepath: to, code };\n    }\n\n    return result;\n  }\n  /**\n   * Find files of a given type on a directory.\n   * @param {string} directory                 The directory where the files will be searched for.\n   * @param {string} [pattern='**\\/*.{js,jsx}'] A glob pattern to match the files.\n   * @return {Promise<Array,Error>} If everything goes well, the promise will resolve on the list\n   *                                of files found.\n   */\n  findFiles(directory, pattern = '**/*.{js,jsx}') {\n    return new Promise((resolve, reject) => {\n      glob(pattern, { cwd: directory }, (error, files) => {\n        if (error) {\n          reject(error);\n        } else {\n          resolve(files.map((file) => path.join(directory, file)));\n        }\n      });\n    });\n  }\n  /**\n   * Get a target Babel configuration based on a filepath.\n   * @param {string} file The file that will be used to obtain the target and then the Babel\n   *                      configuration.\n   * @return {Object}\n   * @throws {Error} If no target can be found.\n   */\n  getTargetConfigurationForFile(file) {\n    // Find target using the received filepath.\n    const target = this.targets.findTargetForFile(file);\n    // If no target was found...\n    if (!target) {\n      throw new Error(`A target couldn't be find for the following file: ${file}`);\n    }\n    // Return the Babel configuration for the found target.\n    return this.babelConfiguration.getConfigForTarget(target);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildTranspiler` as the `buildTranspiler` service.\n * @example\n * // Register it on the container\n * container.register(buildTranspiler);\n * // Getting access to the service instance\n * const buildTranspiler = container.get('buildTranspiler');\n * @type {Provider}\n */\nconst buildTranspiler = provider((app) => {\n  app.set('buildTranspiler', () => new BuildTranspiler(\n    app.get('babelConfiguration'),\n    app.get('appLogger'),\n    app.get('pathUtils'),\n    app.get('projectConfiguration').getConfig(),\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  BuildTranspiler,\n  buildTranspiler,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildTranspiler.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 159,
    "kind": "class",
    "name": "BuildTranspiler",
    "memberof": "src/services/building/buildTranspiler.js",
    "static": true,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildTranspiler.js",
    "importStyle": "{BuildTranspiler}",
    "description": "Manages the transpilation of target files using Babel.",
    "lineNumber": 9,
    "interface": false
  },
  {
    "__docId__": 160,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 19,
    "params": [
      {
        "nullable": null,
        "types": [
          "BabelConfiguration"
        ],
        "spread": false,
        "optional": false,
        "name": "babelConfiguration",
        "description": "To get a target Babel configuration."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To print information messages after\n                                                           transpiling files."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build paths for targets files."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the project paths."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To access targets information."
      }
    ]
  },
  {
    "__docId__": 161,
    "kind": "member",
    "name": "babelConfiguration",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#babelConfiguration",
    "access": "public",
    "description": "A local reference for the `babelConfiguration` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "BabelConfiguration"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 162,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 163,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 164,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 165,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 166,
    "kind": "method",
    "name": "transpileTargetFiles",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#transpileTargetFiles",
    "access": "public",
    "description": "Transpile a target files for a given build type. This requires the target files to have been\npreviously copied to the distribution directory.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "Required in order to get the target entry file and use that\n                          directory as reference of what it needs to be transpiled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 167,
    "kind": "method",
    "name": "transpileFile",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#transpileFile",
    "access": "public",
    "description": "Transpile a file.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "If used as a string, it's the path to the file to\n                                        transpile; if used as an object, it should have\n                                        `source` and `output` properties to define from where\n                                        to where the file is transpiled."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options",
        "description": "The Babel configuration to use. If not defined, the\n                                        method will try to find a target configuration using\n                                        the path of the file."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "writeFile",
        "description": "If `true`, it will write the transpile code,\n                                        otherwise, it will return it on the promise."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object|string,Error>"
      ],
      "spread": false,
      "description": "If `writeFile` is true, the promise will resolve on\n                                       an object with the keys `filepath` (the path where it\n                                       was transpiled) and `code`; but if the parameter is\n                                       `false`, the promise will resolve on a string with\n                                       the path to the file."
    }
  },
  {
    "__docId__": 168,
    "kind": "method",
    "name": "transpileFileSync",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#transpileFileSync",
    "access": "public",
    "description": "Synchronous version of `transpileFile`.",
    "lineNumber": 173,
    "params": [
      {
        "nullable": null,
        "types": [
          "string",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "filepath",
        "description": "If used as a string, it's the path to the file to\n                                        transpile; if used as an object, it should have\n                                        `source` and `output` properties to define from where\n                                        to where the file is transpiled."
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "options",
        "description": "The Babel configuration to use. If not defined, the\n                                        method will try to find a target configuration using\n                                        the path of the file."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "writeFile",
        "description": "If `true`, it will write the transpile code,\n                                        otherwise, it will return it."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object",
        "string"
      ],
      "spread": false,
      "description": "If `writeFile` is true, it will return an object with the keys\n                        `filepath` (the path where it was transpiled) and `code`; but if the\n                        parameter is `false`, it will return a string with the path to the\n                        file."
    }
  },
  {
    "__docId__": 169,
    "kind": "method",
    "name": "findFiles",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#findFiles",
    "access": "public",
    "description": "Find files of a given type on a directory.",
    "lineNumber": 214,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The directory where the files will be searched for."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'**\\/*.{js,jsx}'",
        "defaultRaw": "'**\\/*.{js,jsx}'",
        "name": "pattern",
        "description": "A glob pattern to match the files."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the promise will resolve on the list\n                               of files found."
    }
  },
  {
    "__docId__": 170,
    "kind": "method",
    "name": "getTargetConfigurationForFile",
    "memberof": "src/services/building/buildTranspiler.js~BuildTranspiler",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildTranspiler.js~BuildTranspiler#getTargetConfigurationForFile",
    "access": "public",
    "description": "Get a target Babel configuration based on a filepath.",
    "lineNumber": 232,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The file that will be used to obtain the target and then the Babel\n                     configuration."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no target can be found."
      }
    ]
  },
  {
    "__docId__": 171,
    "kind": "variable",
    "name": "buildTranspiler",
    "memberof": "src/services/building/buildTranspiler.js",
    "static": true,
    "longname": "src/services/building/buildTranspiler.js~buildTranspiler",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildTranspiler.js",
    "importStyle": "{buildTranspiler}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildTranspiler` as the `buildTranspiler` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildTranspiler);\n// Getting access to the service instance\nconst buildTranspiler = container.get('buildTranspiler');"
    ],
    "lineNumber": 253,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/services/building/buildVersion.js",
    "content": "const { provider } = require('jimple');\n/**\n * This service uses the project configuration settings in order manage the project version.\n */\nclass BuildVersion {\n  /**\n   * Class constructor.\n   * @param {Events}                       events               To fire an event when the revision\n   *                                                            file is created.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the `version` settings.\n   * @param {VersionUtils}                 versionUtils         To load the version and write the\n   *                                                            revision file.\n   */\n  constructor(events, projectConfiguration, versionUtils) {\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n    /**\n     * A local reference for the `versionUtils` service.\n     * @type {VersionUtils}\n     */\n    this.versionUtils = versionUtils;\n  }\n  /**\n   * Look for the project version first on the revision file, then on the environment variable and\n   * finally fallbacks to `development` if none of the other could be found.\n   * @return {string}\n   */\n  getVersion() {\n    const { version } = this.projectConfiguration;\n    return this.versionUtils.getVersion(\n      version.revision.filename,\n      version.environmentVariable\n    );\n  }\n  /**\n   * Create the revision file.\n   * This method emits the `revision-file-created` event and sends the contents of the file as\n   * a argument.\n   * @param {boolean} [force=false] Force the service to create the file even if the feature\n   *                                is disabled.\n   * @return {Promise<string,Error>}\n   */\n  createRevision(force = false) {\n    const { version } = this.projectConfiguration;\n    const { revision } = version;\n    let result;\n    if (revision.enabled || force) {\n      result = this.versionUtils.createRevisionFile(\n        revision.filename,\n        version.environmentVariable\n      )\n      .then((savedVersion) => {\n        this.events.emit('revision-file-created', savedVersion);\n        return savedVersion;\n      });\n    } else {\n      const error = new Error('The revision feature is disabled on the project configuration');\n      result = Promise.reject(error);\n    }\n\n    return result;\n  }\n  /**\n   * Get the name of the variable where the build engine should define the version.\n   * @return {string}\n   */\n  getDefinitionVariable() {\n    return this.projectConfiguration.version.defineOn;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BuildVersion` as the `buildVersion` service.\n * @example\n * // Register it on the container\n * container.register(buildVersion);\n * // Getting access to the service instance\n * const buildVersion = container.get('buildVersion');\n * @type {Provider}\n */\nconst buildVersion = provider((app) => {\n  app.set('buildVersion', () => new BuildVersion(\n    app.get('events'),\n    app.get('projectConfiguration').getConfig(),\n    app.get('versionUtils')\n  ));\n});\n\nmodule.exports = {\n  BuildVersion,\n  buildVersion,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/buildVersion.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "class",
    "name": "BuildVersion",
    "memberof": "src/services/building/buildVersion.js",
    "static": true,
    "longname": "src/services/building/buildVersion.js~BuildVersion",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildVersion.js",
    "importStyle": "{BuildVersion}",
    "description": "This service uses the project configuration settings in order manage the project version.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 174,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To fire an event when the revision\n                                                           file is created."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the `version` settings."
      },
      {
        "nullable": null,
        "types": [
          "VersionUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "versionUtils",
        "description": "To load the version and write the\n                                                           revision file."
      }
    ]
  },
  {
    "__docId__": 175,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 176,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 177,
    "kind": "member",
    "name": "versionUtils",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#versionUtils",
    "access": "public",
    "description": "A local reference for the `versionUtils` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "VersionUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 178,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#getVersion",
    "access": "public",
    "description": "Look for the project version first on the revision file, then on the environment variable and\nfinally fallbacks to `development` if none of the other could be found.",
    "lineNumber": 36,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 179,
    "kind": "method",
    "name": "createRevision",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#createRevision",
    "access": "public",
    "description": "Create the revision file.\nThis method emits the `revision-file-created` event and sends the contents of the file as\na argument.",
    "lineNumber": 51,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "force",
        "description": "Force the service to create the file even if the feature\n                               is disabled."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 180,
    "kind": "method",
    "name": "getDefinitionVariable",
    "memberof": "src/services/building/buildVersion.js~BuildVersion",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/buildVersion.js~BuildVersion#getDefinitionVariable",
    "access": "public",
    "description": "Get the name of the variable where the build engine should define the version.",
    "lineNumber": 75,
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 181,
    "kind": "variable",
    "name": "buildVersion",
    "memberof": "src/services/building/buildVersion.js",
    "static": true,
    "longname": "src/services/building/buildVersion.js~buildVersion",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/buildVersion.js",
    "importStyle": "{buildVersion}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BuildVersion` as the `buildVersion` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(buildVersion);\n// Getting access to the service instance\nconst buildVersion = container.get('buildVersion');"
    ],
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 182,
    "kind": "file",
    "name": "src/services/building/builder.js",
    "content": "const { provider } = require('jimple');\n/**\n * This is the main _\"bridge service\"_ for building: It connects the rest of the building services\n * and perform most of the _\"building-related tasks\"_.\n */\nclass Builder {\n  /**\n   * Class constructor.\n   * @param {BuildCleaner}    buildCleaner    Used to clean a target builded files before building\n   *                                          again.\n   * @param {BuildCopier}     buildCopier     Used to copy a target files if it doesn't require\n   *                                          bundling.\n   * @param {BuildEngines}    buildEngines    To access the engines in charge of building targets.\n   * @param {buildTranspiler} buildTranspiler To transpile files of atarget that doesn't require\n   *                                          bundling.\n   * @param {Targets}         targets         To access targets information.\n   */\n  constructor(\n    buildCleaner,\n    buildCopier,\n    buildEngines,\n    buildTranspiler,\n    targets\n  ) {\n    /**\n     * A local reference for the `buildCleaner` service.\n     * @type {BuildCleaner}\n     */\n    this.buildCleaner = buildCleaner;\n    /**\n     * A local reference for the `buildCopier` service.\n     * @type {BuildCopier}\n     */\n    this.buildCopier = buildCopier;\n    /**\n     * A local reference for the `buildEngines` service.\n     * @type {BuildEngines}\n     */\n    this.buildEngines = buildEngines;\n    /**\n     * A local reference for the `buildTranspiler` service.\n     * @type {BuildTranspiler}\n     */\n    this.buildTranspiler = buildTranspiler;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n  }\n  /**\n   * Get a build command for a target. If the target doesn't require bundling, it will return an\n   * empty string, otherwise, it will ask the build engine the target uses for the required shell\n   * command.\n   * @param {Target}  target           The target information.\n   * @param {string}  buildType        The type of build intended: `production` or `development`.\n   * @param {boolean} [forceRun=false] Whether or not the build command should also run the target.\n   * @return {string}\n   */\n  getTargetBuildCommand(target, buildType, forceRun = false) {\n    let command = '';\n    if (target.bundle !== false) {\n      const engine = this.buildEngines.getEngine(target.engine);\n      command = engine.getBuildCommand(target, buildType, forceRun);\n    }\n\n    return command;\n  }\n  /**\n   * Copy a target files to the distribution directory. The only reason to copy a target files are:\n   * If the target needs to be transpiles or if the build type is `production`, on all the other\n   * cases the method won't do anything.\n   * @param {string} targetName The name of the target.\n   * @param {string} buildType  The type of build it's being made: `production` or `development`.\n   * @return {Promise<undefined,Error>}\n   */\n  copyTarget(targetName, buildType) {\n    const target = this.targets.getTarget(targetName);\n    let result;\n    if (\n      target.is.node &&\n      target.bundle === false &&\n      (buildType === 'production' || target.transpile)\n    ) {\n      result = this.buildCopier.copyTargetFiles(target);\n    } else {\n      result = Promise.resolve();\n    }\n\n    return result;\n  }\n  /**\n   * Transpile a target files **that have been previously copied** to the distribution directory.\n   * If the target is not a Node target or it doesn't require transpiling, this method won't do\n   * anything.\n   * @param {string} targetName The name of the target.\n   * @param {string} buildType  The type of build it's being made: `production` or `development`.\n   * @return {Promise<undefined,Error>}\n   */\n  transpileTarget(targetName, buildType) {\n    const target = this.targets.getTarget(targetName);\n    let result;\n    if (\n      target.is.node &&\n      target.bundle === false &&\n      target.transpile\n    ) {\n      result = this.buildTranspiler.transpileTargetFiles(target, buildType);\n    } else {\n      result = Promise.resolve();\n    }\n\n    return result;\n  }\n  /**\n   * Removes all previous builds/copies of a target from the distribution directory.\n   * @param {string} targetName The name of the target.\n   * @return {Promise<undefined,Error>}\n   */\n  cleanTarget(targetName) {\n    const target = this.targets.getTarget(targetName);\n    return this.buildCleaner.cleanTarget(target);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `Builder` as the `builder` service.\n * @example\n * // Register it on the container\n * container.register(builder);\n * // Getting access to the service instance\n * const builder = container.get('builder');\n * @type {Provider}\n */\nconst builder = provider((app) => {\n  app.set('builder', () => new Builder(\n    app.get('buildCleaner'),\n    app.get('buildCopier'),\n    app.get('buildEngines'),\n    app.get('buildTranspiler'),\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  Builder,\n  builder,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/builder.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 183,
    "kind": "class",
    "name": "Builder",
    "memberof": "src/services/building/builder.js",
    "static": true,
    "longname": "src/services/building/builder.js~Builder",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/builder.js",
    "importStyle": "{Builder}",
    "description": "This is the main _\"bridge service\"_ for building: It connects the rest of the building services\nand perform most of the _\"building-related tasks\"_.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 184,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/builder.js~Builder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/builder.js~Builder#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildCleaner"
        ],
        "spread": false,
        "optional": false,
        "name": "buildCleaner",
        "description": "Used to clean a target builded files before building\n                                         again."
      },
      {
        "nullable": null,
        "types": [
          "BuildCopier"
        ],
        "spread": false,
        "optional": false,
        "name": "buildCopier",
        "description": "Used to copy a target files if it doesn't require\n                                         bundling."
      },
      {
        "nullable": null,
        "types": [
          "BuildEngines"
        ],
        "spread": false,
        "optional": false,
        "name": "buildEngines",
        "description": "To access the engines in charge of building targets."
      },
      {
        "nullable": null,
        "types": [
          "buildTranspiler"
        ],
        "spread": false,
        "optional": false,
        "name": "buildTranspiler",
        "description": "To transpile files of atarget that doesn't require\n                                         bundling."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To access targets information."
      }
    ]
  },
  {
    "__docId__": 185,
    "kind": "member",
    "name": "buildCleaner",
    "memberof": "src/services/building/builder.js~Builder",
    "static": false,
    "longname": "src/services/building/builder.js~Builder#buildCleaner",
    "access": "public",
    "description": "A local reference for the `buildCleaner` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "BuildCleaner"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 186,
    "kind": "member",
    "name": "buildCopier",
    "memberof": "src/services/building/builder.js~Builder",
    "static": false,
    "longname": "src/services/building/builder.js~Builder#buildCopier",
    "access": "public",
    "description": "A local reference for the `buildCopier` service.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "BuildCopier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 187,
    "kind": "member",
    "name": "buildEngines",
    "memberof": "src/services/building/builder.js~Builder",
    "static": false,
    "longname": "src/services/building/builder.js~Builder#buildEngines",
    "access": "public",
    "description": "A local reference for the `buildEngines` service.",
    "lineNumber": 39,
    "type": {
      "nullable": null,
      "types": [
        "BuildEngines"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 188,
    "kind": "member",
    "name": "buildTranspiler",
    "memberof": "src/services/building/builder.js~Builder",
    "static": false,
    "longname": "src/services/building/builder.js~Builder#buildTranspiler",
    "access": "public",
    "description": "A local reference for the `buildTranspiler` service.",
    "lineNumber": 44,
    "type": {
      "nullable": null,
      "types": [
        "BuildTranspiler"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 189,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/builder.js~Builder",
    "static": false,
    "longname": "src/services/building/builder.js~Builder#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 190,
    "kind": "method",
    "name": "getTargetBuildCommand",
    "memberof": "src/services/building/builder.js~Builder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/builder.js~Builder#getTargetBuildCommand",
    "access": "public",
    "description": "Get a build command for a target. If the target doesn't require bundling, it will return an\nempty string, otherwise, it will ask the build engine the target uses for the required shell\ncommand.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The type of build intended: `production` or `development`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRun",
        "description": "Whether or not the build command should also run the target."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 191,
    "kind": "method",
    "name": "copyTarget",
    "memberof": "src/services/building/builder.js~Builder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/builder.js~Builder#copyTarget",
    "access": "public",
    "description": "Copy a target files to the distribution directory. The only reason to copy a target files are:\nIf the target needs to be transpiles or if the build type is `production`, on all the other\ncases the method won't do anything.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetName",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The type of build it's being made: `production` or `development`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 192,
    "kind": "method",
    "name": "transpileTarget",
    "memberof": "src/services/building/builder.js~Builder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/builder.js~Builder#transpileTarget",
    "access": "public",
    "description": "Transpile a target files **that have been previously copied** to the distribution directory.\nIf the target is not a Node target or it doesn't require transpiling, this method won't do\nanything.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetName",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The type of build it's being made: `production` or `development`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 193,
    "kind": "method",
    "name": "cleanTarget",
    "memberof": "src/services/building/builder.js~Builder",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/builder.js~Builder#cleanTarget",
    "access": "public",
    "description": "Removes all previous builds/copies of a target from the distribution directory.",
    "lineNumber": 120,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "targetName",
        "description": "The name of the target."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 194,
    "kind": "variable",
    "name": "builder",
    "memberof": "src/services/building/builder.js",
    "static": true,
    "longname": "src/services/building/builder.js~builder",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/builder.js",
    "importStyle": "{builder}",
    "description": "The service provider that once registered on the app container will set an instance of\n`Builder` as the `builder` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(builder);\n// Getting access to the service instance\nconst builder = container.get('builder');"
    ],
    "lineNumber": 135,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 195,
    "kind": "file",
    "name": "src/services/building/index.js",
    "content": "const { buildCleaner } = require('./buildCleaner');\nconst { buildCopier } = require('./buildCopier');\nconst { buildEngines } = require('./buildEngines');\nconst { buildNodeRunner } = require('./buildNodeRunner');\nconst { buildNodeRunnerProcess } = require('./buildNodeRunnerProcess');\nconst { buildTranspiler } = require('./buildTranspiler');\nconst { buildVersion } = require('./buildVersion');\nconst { builder } = require('./builder');\nconst { targets } = require('./targets');\n\nmodule.exports = {\n  buildCleaner,\n  buildCopier,\n  buildEngines,\n  buildNodeRunner,\n  buildNodeRunnerProcess,\n  buildTranspiler,\n  buildVersion,\n  builder,\n  targets,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 196,
    "kind": "file",
    "name": "src/services/building/targets.js",
    "content": "const path = require('path');\nconst extend = require('extend');\nconst { AppConfiguration } = require('wootils/node/appConfiguration');\nconst { provider } = require('jimple');\n/**\n * This service is in charge of loading and managing the project targets information.\n */\nclass Targets {\n  /**\n   * Class constructor.\n   * @param {Events}                       events               Used to reduce a target information\n   *                                                            after loading it.\n   * @param {EnvironmentUtils}             environmentUtils     To send to the configuration\n   *                                                            service used by the browser targets.\n   * @param {PathUtils}                    pathUtils            Used to build the targets paths.\n   * @param {ProjectConfigurationSettings} projectConfiguration To read the targets and their\n   *                                                            templates.\n   * @param {RootRequire}                  rootRequire          To send to the configuration\n   *                                                            service used by the browser targets.\n   */\n  constructor(\n    events,\n    environmentUtils,\n    pathUtils,\n    projectConfiguration,\n    rootRequire\n  ) {\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A local reference for the `environmentUtils` service.\n     * @type {EnvironmentUtils}\n     */\n    this.environmentUtils = environmentUtils;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n    /**\n     * A local reference for the `rootRequire` function service.\n     * @type {RootRequire}\n     */\n    this.rootRequire = rootRequire;\n    /**\n     * A dictionary that will be filled with the targets information.\n     * @type {Object}\n     */\n    this.targets = {};\n    /**\n     * A simple regular expression to validate a target type.\n     * @type {RegExp}\n     */\n    this.typesValidationRegex = /^(?:node|browser)$/i;\n    /**\n     * The default type a target will be if it doesn't have a `type` property.\n     * @type {string}\n     */\n    this.defaultType = 'node';\n    this.loadTargets();\n  }\n  /**\n   * Loads and build the target information.\n   * This method emits the event reducer `target-load` with the information of a loaded target and\n   * expects an object with a target information on return.\n   * @throws {Error} If a target has a type but it doesn't match `this.typesValidationRegex`.\n   */\n  loadTargets() {\n    const {\n      targets,\n      targetsTemplates,\n      paths: { source, build },\n    } = this.projectConfiguration;\n    // Loop all the targets on the project configuration...\n    Object.keys(targets).forEach((name) => {\n      const target = targets[name];\n      // Validates the type.\n      if (target.type && !this.typesValidationRegex.test(target.type)) {\n        throw new Error(`Target ${name} has an invalid type: ${target.type}`);\n      } else {\n        // Define the target folders.\n        const sourceFolderName = target.folder || name;\n        const buildFolderName = target.createFolder ? sourceFolderName : '';\n        // Define the target type.\n        const type = target.type || this.defaultType;\n        const isNode = type === 'node';\n        // Get the type template.\n        const template = targetsTemplates[type];\n        /**\n         * Create the new target information by merging the template, the target information from\n         * the configuration and the information defined by this method.\n         */\n        const newTarget = extend(true, {}, template, target, {\n          name,\n          type,\n          paths: {\n            source: '',\n            build: '',\n          },\n          folders: {\n            source: '',\n            build: '',\n          },\n          is: {\n            node: isNode,\n            browser: !isNode,\n          },\n        });\n        // Check if the target should be transpiled (You can use types without transpilation).\n        if (!newTarget.transpile && newTarget.flow) {\n          newTarget.transpile = true;\n        }\n        // Generate the taret paths and folders.\n        newTarget.folders.source = newTarget.hasFolder ?\n          path.join(source, sourceFolderName) :\n          source;\n        newTarget.paths.source = this.pathUtils.join(newTarget.folders.source);\n\n        newTarget.folders.build = path.join(build, buildFolderName);\n        newTarget.paths.build = this.pathUtils.join(newTarget.folders.build);\n        // Reduce the target information and save it on the service dictionary.\n        this.targets[name] = this.events.reduce('target-load', newTarget);\n      }\n    });\n  }\n  /**\n   * Get all the registered targets information on a dictionary that uses their names as keys.\n   * @return {Object}\n   */\n  getTargets() {\n    return this.targets;\n  }\n  /**\n   * Get a target information by its name.\n   * @param {string} name The target name.\n   * @return {Target}\n   * @throws {Error} If there's no target with the given name.\n   */\n  getTarget(name) {\n    const target = this.getTargets()[name];\n    if (!target) {\n      throw new Error(`The required target doesn't exist: ${name}`);\n    }\n\n    return target;\n  }\n  /**\n   * Find a target by a given filepath.\n   * @param {string} file The path of the file that should match with a target path.\n   * @return {Target}\n   * @throws {Error} If no target is found.\n   * @todo The implementation of this method also throws an error if no target is found.\n   */\n  findTargetForFile(file) {\n    const targets = this.getTargets();\n    const targetName = Object.keys(targets).find((name) => {\n      const target = targets[name];\n      return file.includes(target.paths.source);\n    });\n\n    if (!targetName) {\n      throw new Error(`A target for the following file couldn't be found: ${file}`);\n    }\n\n    return targets[targetName];\n  }\n  /**\n   * Get a _'App Configuration'_ for a browser target. This is a utility Woopack provides for\n   * browser targets as they can't load configuration files dynamically, so on the building process,\n   * Woopack uses this service to load the configuration and then injects it on the target bundle.\n   * @param {Target} target The target information.\n   * @return {Object} The target _'App Configuration'_.\n   * @throws {Error} If the given target is not a browser target.\n   */\n  getBrowserTargetConfiguration(target) {\n    if (target.is.node) {\n      throw new Error('Only browser targets can generate configuration on the building process');\n    }\n    // Get the configuration settings from the target information.\n    const {\n      name,\n      configuration: {\n        enabled,\n        default: defaultConfiguration,\n        path: configurationsPath,\n        hasFolder,\n        environmentVariable,\n        loadFromEnvironment,\n        filenameFormat,\n      },\n    } = target;\n    let result = {};\n    // If the configuration feature is enabled...\n    if (enabled) {\n      // Define the path where the configuration files are located.\n      let configsPath = configurationsPath;\n      if (hasFolder) {\n        configsPath += `${name}/`;\n      }\n      // Prepare the filename format the `AppConfiguration` class uses.\n      const filenameNewFormat = filenameFormat\n      .replace(/\\[target-name\\]/ig, name)\n      .replace(/\\[configuration-name\\]/ig, '[name]');\n\n      let defaultConfig = {};\n      // If the feature options include a default configuration...\n      if (defaultConfiguration) {\n        // ...use it.\n        defaultConfig = defaultConfiguration;\n      } else {\n        // ...otherwise, load it from a configuration file.\n        const defaultConfigPath = `${configsPath}${name}.config.js`;\n        defaultConfig = this.rootRequire(defaultConfigPath);\n      }\n      /**\n       * Create a new instance of `AppConfiguration` in order to handle the environment and the\n       * merging of the configurations.\n       */\n      const appConfiguration = new AppConfiguration(\n        this.environmentUtils,\n        this.rootRequire,\n        name,\n        defaultConfig,\n        {\n          environmentVariable,\n          path: configsPath,\n          filenameFormat: filenameNewFormat,\n        }\n      );\n      // If the feature supports loading a configuration using an environment variable...\n      if (loadFromEnvironment) {\n        // ...Tell the instance of `AppConfiguration` to look for it.\n        appConfiguration.loadFromEnvironment();\n      }\n      // Finally, set to return the configuration generated by the service.\n      result = appConfiguration.getConfig();\n    }\n\n    return result;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `Targets` as the `targets` service.\n * @example\n * // Register it on the container\n * container.register(targets);\n * // Getting access to the service instance\n * const targets = container.get('targets');\n * @type {Provider}\n */\nconst targets = provider((app) => {\n  app.set('targets', () => new Targets(\n    app.get('events'),\n    app.get('environmentUtils'),\n    app.get('pathUtils'),\n    app.get('projectConfiguration').getConfig(),\n    app.get('rootRequire')\n  ));\n});\n\nmodule.exports = {\n  Targets,\n  targets,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/building/targets.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 197,
    "kind": "class",
    "name": "Targets",
    "memberof": "src/services/building/targets.js",
    "static": true,
    "longname": "src/services/building/targets.js~Targets",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/targets.js",
    "importStyle": "{Targets}",
    "description": "This service is in charge of loading and managing the project targets information.",
    "lineNumber": 8,
    "interface": false
  },
  {
    "__docId__": 198,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 21,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "Used to reduce a target information\n                                                           after loading it."
      },
      {
        "nullable": null,
        "types": [
          "EnvironmentUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentUtils",
        "description": "To send to the configuration\n                                                           service used by the browser targets."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Used to build the targets paths."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "To read the targets and their\n                                                           templates."
      },
      {
        "nullable": null,
        "types": [
          "RootRequire"
        ],
        "spread": false,
        "optional": false,
        "name": "rootRequire",
        "description": "To send to the configuration\n                                                           service used by the browser targets."
      }
    ]
  },
  {
    "__docId__": 199,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 200,
    "kind": "member",
    "name": "environmentUtils",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#environmentUtils",
    "access": "public",
    "description": "A local reference for the `environmentUtils` service.",
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "EnvironmentUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 201,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 42,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 202,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 47,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 203,
    "kind": "member",
    "name": "rootRequire",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#rootRequire",
    "access": "public",
    "description": "A local reference for the `rootRequire` function service.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "RootRequire"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 204,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#targets",
    "access": "public",
    "description": "A dictionary that will be filled with the targets information.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 205,
    "kind": "member",
    "name": "typesValidationRegex",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#typesValidationRegex",
    "access": "public",
    "description": "A simple regular expression to validate a target type.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "RegExp"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 206,
    "kind": "member",
    "name": "defaultType",
    "memberof": "src/services/building/targets.js~Targets",
    "static": false,
    "longname": "src/services/building/targets.js~Targets#defaultType",
    "access": "public",
    "description": "The default type a target will be if it doesn't have a `type` property.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 207,
    "kind": "method",
    "name": "loadTargets",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#loadTargets",
    "access": "public",
    "description": "Loads and build the target information.\nThis method emits the event reducer `target-load` with the information of a loaded target and\nexpects an object with a target information on return.",
    "lineNumber": 76,
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If a target has a type but it doesn't match `this.typesValidationRegex`."
      }
    ],
    "params": [],
    "return": null
  },
  {
    "__docId__": 208,
    "kind": "method",
    "name": "getTargets",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#getTargets",
    "access": "public",
    "description": "Get all the registered targets information on a dictionary that uses their names as keys.",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 209,
    "kind": "method",
    "name": "getTarget",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#getTarget",
    "access": "public",
    "description": "Get a target information by its name.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The target name."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Target"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If there's no target with the given name."
      }
    ]
  },
  {
    "__docId__": 210,
    "kind": "method",
    "name": "findTargetForFile",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#findTargetForFile",
    "access": "public",
    "description": "Find a target by a given filepath.",
    "lineNumber": 162,
    "todo": [
      "The implementation of this method also throws an error if no target is found."
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "file",
        "description": "The path of the file that should match with a target path."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Target"
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If no target is found."
      }
    ]
  },
  {
    "__docId__": 211,
    "kind": "method",
    "name": "getBrowserTargetConfiguration",
    "memberof": "src/services/building/targets.js~Targets",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/building/targets.js~Targets#getBrowserTargetConfiguration",
    "access": "public",
    "description": "Get a _'App Configuration'_ for a browser target. This is a utility Woopack provides for\nbrowser targets as they can't load configuration files dynamically, so on the building process,\nWoopack uses this service to load the configuration and then injects it on the target bundle.",
    "lineNumber": 183,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "The target _'App Configuration'_."
    },
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the given target is not a browser target."
      }
    ]
  },
  {
    "__docId__": 212,
    "kind": "variable",
    "name": "targets",
    "memberof": "src/services/building/targets.js",
    "static": true,
    "longname": "src/services/building/targets.js~targets",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/building/targets.js",
    "importStyle": "{targets}",
    "description": "The service provider that once registered on the app container will set an instance of\n`Targets` as the `targets` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(targets);\n// Getting access to the service instance\nconst targets = container.get('targets');"
    ],
    "lineNumber": 260,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 213,
    "kind": "file",
    "name": "src/services/cli/cli.js",
    "content": "const commander = require('commander');\nconst { provider } = require('jimple');\n/**\n * The main CLI program interface where all the commands are registered and that works as a bridge\n * between the app and `commander`.\n */\nclass CLI {\n  /**\n   * Class constructor.\n   * @param {Object} info      This app `package.json` information.\n   * @param {string} [name=''] The name of the program. If not specified, it will use the one on\n   *                           `info` object.\n   */\n  constructor(info, name = '') {\n    /**\n     * This app `package.json` information.\n     * @type {Object}\n     */\n    this.info = info;\n    /**\n     * The name of the CLI program.\n     * @type {string}\n     */\n    this.name = name || this.info.name;\n  }\n  /**\n   * Start the interface with a list of commands.\n   * @param {Array<CLICommand>} commands A list of commands to register.\n   */\n  start(commands) {\n    // eslint-disable-next-line no-underscore-dangle\n    commander._name = this.name;\n    // Set the version and the description of the program.\n    commander.version(this.info.version, '-v, --version');\n    commander.description(this.info.description);\n    // Loop all the commands and register them.\n    commands.forEach((command) => {\n      command.register(commander, this);\n    });\n    // Tell commander to parse the arguments.\n    commander.parse(process.argv);\n  }\n}\n/**\n * Generates a `Provider` with an already defined name for the program.\n * @example\n * // Generate the provider\n * const provider = cliWithName('my-program');\n * // Register it on the container\n * container.register(provider);\n * // Getting access to the service instance\n * const cli = container.get('cli');\n * @param {string} name The name of the program.\n * @return {Provider}\n */\nconst cliWithName = (name) => provider((app) => {\n  app.set('cli', () => new CLI(\n    app.get('info'),\n    name\n  ));\n});\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLI` as the `cli` service.\n * @example\n * // Register it on the container\n * container.register(cli);\n * // Getting access to the service instance\n * const cli = container.get('cli');\n * @type {Provider}\n */\nconst cli = cliWithName();\n\nmodule.exports = {\n  CLI,\n  cliWithName,\n  cli,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cli.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 214,
    "kind": "class",
    "name": "CLI",
    "memberof": "src/services/cli/cli.js",
    "static": true,
    "longname": "src/services/cli/cli.js~CLI",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cli.js",
    "importStyle": "{CLI}",
    "description": "The main CLI program interface where all the commands are registered and that works as a bridge\nbetween the app and `commander`.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 215,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cli.js~CLI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cli.js~CLI#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "info",
        "description": "This app `package.json` information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "name",
        "description": "The name of the program. If not specified, it will use the one on\n                          `info` object."
      }
    ]
  },
  {
    "__docId__": 216,
    "kind": "member",
    "name": "info",
    "memberof": "src/services/cli/cli.js~CLI",
    "static": false,
    "longname": "src/services/cli/cli.js~CLI#info",
    "access": "public",
    "description": "This app `package.json` information.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 217,
    "kind": "member",
    "name": "name",
    "memberof": "src/services/cli/cli.js~CLI",
    "static": false,
    "longname": "src/services/cli/cli.js~CLI#name",
    "access": "public",
    "description": "The name of the CLI program.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 218,
    "kind": "method",
    "name": "start",
    "memberof": "src/services/cli/cli.js~CLI",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cli.js~CLI#start",
    "access": "public",
    "description": "Start the interface with a list of commands.",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<CLICommand>"
        ],
        "spread": false,
        "optional": false,
        "name": "commands",
        "description": "A list of commands to register."
      }
    ],
    "return": null
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "cliWithName",
    "memberof": "src/services/cli/cli.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/cli/cli.js~cliWithName",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cli.js",
    "importStyle": "{cliWithName}",
    "description": "Generates a `Provider` with an already defined name for the program.",
    "examples": [
      "// Generate the provider\nconst provider = cliWithName('my-program');\n// Register it on the container\ncontainer.register(provider);\n// Getting access to the service instance\nconst cli = container.get('cli');"
    ],
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the program."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "cli",
    "memberof": "src/services/cli/cli.js",
    "static": true,
    "longname": "src/services/cli/cli.js~cli",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cli.js",
    "importStyle": "{cli}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLI` as the `cli` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cli);\n// Getting access to the service instance\nconst cli = container.get('cli');"
    ],
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/services/cli/cliBuild.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a fake command the app uses to show the information of the build task. In reality, this\n * command is handled by a shell script.\n * @extends {CLICommand}\n */\nclass CLIBuildCommand extends CLICommand {\n  /**\n   * Class constructor.\n   */\n  constructor() {\n    super();\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'build [target]';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = 'Build a target';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    this.addOption(\n      'run',\n      '-r, --run',\n      'Run the target after the build is completed. It only works when the ' +\n        'build type is development',\n      false\n    );\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLIBuildCommand` as the `cliBuildCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliBuildCommand);\n * // Getting access to the service instance\n * const cliBuildCommand = container.get('cliBuildCommand');\n * @type {Provider}\n */\nconst cliBuildCommand = provider((app) => {\n  app.set('cliBuildCommand', () => new CLIBuildCommand());\n});\n\nmodule.exports = {\n  CLIBuildCommand,\n  cliBuildCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliBuild.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "class",
    "name": "CLIBuildCommand",
    "memberof": "src/services/cli/cliBuild.js",
    "static": true,
    "longname": "src/services/cli/cliBuild.js~CLIBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliBuild.js",
    "importStyle": "{CLIBuildCommand}",
    "description": "This is a fake command the app uses to show the information of the build task. In reality, this\ncommand is handled by a shell script.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 223,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliBuild.js~CLIBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliBuild.js~CLIBuildCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 12
  },
  {
    "__docId__": 224,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliBuild.js~CLIBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliBuild.js~CLIBuildCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 225,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliBuild.js~CLIBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliBuild.js~CLIBuildCommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "cliBuildCommand",
    "memberof": "src/services/cli/cliBuild.js",
    "static": true,
    "longname": "src/services/cli/cliBuild.js~cliBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliBuild.js",
    "importStyle": "{cliBuildCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLIBuildCommand` as the `cliBuildCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliBuildCommand);\n// Getting access to the service instance\nconst cliBuildCommand = container.get('cliBuildCommand');"
    ],
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/services/cli/cliClean.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is the command used on the CLI interface to remove a target file(s) or the entire\n * distribution directory.\n * @extends {CLICommand}\n */\nclass CLICleanCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Builder}      builder      Needed to remove a target files.\n   * @param {BuildCleaner} buildCleaner Needed to remove the distribution directory.\n   */\n  constructor(builder, buildCleaner) {\n    super();\n    /**\n     * A local reference for the `builder` service function.\n     * @type {Builder}\n     */\n    this.builder = builder;\n    /**\n     * A local reference for the `buildCleaner` service function.\n     * @type {BuildCleaner}\n     */\n    this.buildCleaner = buildCleaner;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'clean [target]';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = 'Delete builded files for a target. If no target is ' +\n      'specified, the build directory will be deleted';\n  }\n  /**\n   * Handle the execution of the command.\n   * @param {?string} target A target name. If specified, only that target files will be removed\n   *                         from the distribution directory; otherwise, the entire directory will\n   *                         be removed.\n   * @return {Promise<undefined,Error>}\n   */\n  handle(target) {\n    return target ?\n      this.builder.cleanTarget(target) :\n      this.buildCleaner.cleanAll();\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLICleanCommand` as the `cliCleanCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliCleanCommand);\n * // Getting access to the service instance\n * const cliCleanCommand = container.get('cliCleanCommand');\n * @type {Provider}\n */\nconst cliCleanCommand = provider((app) => {\n  app.set('cliCleanCommand', () => new CLICleanCommand(\n    app.get('builder'),\n    app.get('buildCleaner')\n  ));\n});\n\nmodule.exports = {\n  CLICleanCommand,\n  cliCleanCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliClean.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "class",
    "name": "CLICleanCommand",
    "memberof": "src/services/cli/cliClean.js",
    "static": true,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliClean.js",
    "importStyle": "{CLICleanCommand}",
    "description": "This is the command used on the CLI interface to remove a target file(s) or the entire\ndistribution directory.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 229,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "Builder"
        ],
        "spread": false,
        "optional": false,
        "name": "builder",
        "description": "Needed to remove a target files."
      },
      {
        "nullable": null,
        "types": [
          "BuildCleaner"
        ],
        "spread": false,
        "optional": false,
        "name": "buildCleaner",
        "description": "Needed to remove the distribution directory."
      }
    ]
  },
  {
    "__docId__": 230,
    "kind": "member",
    "name": "builder",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#builder",
    "access": "public",
    "description": "A local reference for the `builder` service function.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 231,
    "kind": "member",
    "name": "buildCleaner",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#buildCleaner",
    "access": "public",
    "description": "A local reference for the `buildCleaner` service function.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "BuildCleaner"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 232,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 233,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 234,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliClean.js~CLICleanCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliClean.js~CLICleanCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command.",
    "lineNumber": 45,
    "params": [
      {
        "nullable": true,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "A target name. If specified, only that target files will be removed\n                        from the distribution directory; otherwise, the entire directory will\n                        be removed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 235,
    "kind": "variable",
    "name": "cliCleanCommand",
    "memberof": "src/services/cli/cliClean.js",
    "static": true,
    "longname": "src/services/cli/cliClean.js~cliCleanCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliClean.js",
    "importStyle": "{cliCleanCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLICleanCommand` as the `cliCleanCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliCleanCommand);\n// Getting access to the service instance\nconst cliCleanCommand = container.get('cliCleanCommand');"
    ],
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 236,
    "kind": "file",
    "name": "src/services/cli/cliCopyProjectFiles.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is the command used on the CLI interface to copy the project files to the distribution\n * directory.\n * @extends {CLICommand}\n */\nclass CLICopyProjectFilesCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {BuildCopier} buildCopier Used to copy the files.\n   */\n  constructor(buildCopier) {\n    super();\n    /**\n     * A local reference for the `buildCopier` service function.\n     * @type {BuildCopier}\n     */\n    this.buildCopier = buildCopier;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'copy-project-files';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = 'Copy the required project files into the build directory';\n  }\n  /**\n   * Handle the execution of the command and copies the project files to the distribution directory.\n   * @return {Promise<undefined,Error>}\n   */\n  handle() {\n    return this.buildCopier.copyFiles();\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLICopyProjectFilesCommand` as the `cliCopyProjectFilesCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliCopyProjectFilesCommand);\n * // Getting access to the service instance\n * const cliCopyProjectFilesCommand = container.get('cliCopyProjectFilesCommand');\n * @type {Provider}\n */\nconst cliCopyProjectFilesCommand = provider((app) => {\n  app.set('cliCopyProjectFilesCommand', () => new CLICopyProjectFilesCommand(\n    app.get('buildCopier')\n  ));\n});\n\nmodule.exports = {\n  CLICopyProjectFilesCommand,\n  cliCopyProjectFilesCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliCopyProjectFiles.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 237,
    "kind": "class",
    "name": "CLICopyProjectFilesCommand",
    "memberof": "src/services/cli/cliCopyProjectFiles.js",
    "static": true,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliCopyProjectFiles.js",
    "importStyle": "{CLICopyProjectFilesCommand}",
    "description": "This is the command used on the CLI interface to copy the project files to the distribution\ndirectory.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 238,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildCopier"
        ],
        "spread": false,
        "optional": false,
        "name": "buildCopier",
        "description": "Used to copy the files."
      }
    ]
  },
  {
    "__docId__": 239,
    "kind": "member",
    "name": "buildCopier",
    "memberof": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "static": false,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand#buildCopier",
    "access": "public",
    "description": "A local reference for the `buildCopier` service function.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "BuildCopier"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 240,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "static": false,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 241,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "static": false,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 242,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliCopyProjectFiles.js~CLICopyProjectFilesCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and copies the project files to the distribution directory.",
    "lineNumber": 35,
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 243,
    "kind": "variable",
    "name": "cliCopyProjectFilesCommand",
    "memberof": "src/services/cli/cliCopyProjectFiles.js",
    "static": true,
    "longname": "src/services/cli/cliCopyProjectFiles.js~cliCopyProjectFilesCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliCopyProjectFiles.js",
    "importStyle": "{cliCopyProjectFilesCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLICopyProjectFilesCommand` as the `cliCopyProjectFilesCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliCopyProjectFilesCommand);\n// Getting access to the service instance\nconst cliCopyProjectFilesCommand = container.get('cliCopyProjectFilesCommand');"
    ],
    "lineNumber": 49,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 244,
    "kind": "file",
    "name": "src/services/cli/cliRevision.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is the command used on the CLI interface to create the revision file.\n * @extends {CLICommand}\n */\nclass CLIRevisionCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {BuildVersion} buildVersion To call the method that writes the revision file.\n   */\n  constructor(buildVersion) {\n    super();\n    /**\n     * A local reference for the `buildVersion` service function.\n     * @type {BuildVersion}\n     */\n    this.buildVersion = buildVersion;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'create-revision';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = 'Create the revision file with the project version';\n  }\n  /**\n   * Handles the execution of the command and creates the file.\n   * @return {Promise<string,Error>}\n   */\n  handle() {\n    return this.buildVersion.createRevision();\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLIRevisionCommand` as the `cliRevisionCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliRevisionCommand);\n * // Getting access to the service instance\n * const cliRevisionCommand = container.get('cliRevisionCommand');\n * @type {Provider}\n */\nconst cliRevisionCommand = provider((app) => {\n  app.set('cliRevisionCommand', () => new CLIRevisionCommand(\n    app.get('buildVersion')\n  ));\n});\n\nmodule.exports = {\n  CLIRevisionCommand,\n  cliRevisionCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliRevision.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 245,
    "kind": "class",
    "name": "CLIRevisionCommand",
    "memberof": "src/services/cli/cliRevision.js",
    "static": true,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliRevision.js",
    "importStyle": "{CLIRevisionCommand}",
    "description": "This is the command used on the CLI interface to create the revision file.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 246,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildVersion"
        ],
        "spread": false,
        "optional": false,
        "name": "buildVersion",
        "description": "To call the method that writes the revision file."
      }
    ]
  },
  {
    "__docId__": 247,
    "kind": "member",
    "name": "buildVersion",
    "memberof": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "static": false,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand#buildVersion",
    "access": "public",
    "description": "A local reference for the `buildVersion` service function.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "BuildVersion"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 248,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "static": false,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 249,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "static": false,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 28,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 250,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliRevision.js~CLIRevisionCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliRevision.js~CLIRevisionCommand#handle",
    "access": "public",
    "description": "Handles the execution of the command and creates the file.",
    "lineNumber": 34,
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "cliRevisionCommand",
    "memberof": "src/services/cli/cliRevision.js",
    "static": true,
    "longname": "src/services/cli/cliRevision.js~cliRevisionCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliRevision.js",
    "importStyle": "{cliRevisionCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLIRevisionCommand` as the `cliRevisionCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliRevisionCommand);\n// Getting access to the service instance\nconst cliRevisionCommand = container.get('cliRevisionCommand');"
    ],
    "lineNumber": 48,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 252,
    "kind": "file",
    "name": "src/services/cli/cliRun.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a fake command the app uses to show the information of the run task. In reality, this\n * command is handled by a shell script.\n * @extends {CLICommand}\n */\nclass CLIRunCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @ignore\n   */\n  constructor() {\n    super();\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'run [target]';\n    /**\n     * A description of the command for the help interface.\n     * @type {string}\n     */\n    this.description = 'Run a target on a development build type';\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLIRunCommand` as the `cliRunCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliRunCommand);\n * // Getting access to the service instance\n * const cliRunCommand = container.get('cliRunCommand');\n * @type {Provider}\n */\nconst cliRunCommand = provider((app) => {\n  app.set('cliRunCommand', () => new CLIRunCommand());\n});\n\nmodule.exports = {\n  CLIRunCommand,\n  cliRunCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliRun.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 253,
    "kind": "class",
    "name": "CLIRunCommand",
    "memberof": "src/services/cli/cliRun.js",
    "static": true,
    "longname": "src/services/cli/cliRun.js~CLIRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliRun.js",
    "importStyle": "{CLIRunCommand}",
    "description": "This is a fake command the app uses to show the information of the run task. In reality, this\ncommand is handled by a shell script.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 254,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliRun.js~CLIRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliRun.js~CLIRunCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 13,
    "ignore": true
  },
  {
    "__docId__": 255,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliRun.js~CLIRunCommand",
    "static": false,
    "longname": "src/services/cli/cliRun.js~CLIRunCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 256,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliRun.js~CLIRunCommand",
    "static": false,
    "longname": "src/services/cli/cliRun.js~CLIRunCommand#description",
    "access": "public",
    "description": "A description of the command for the help interface.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 257,
    "kind": "variable",
    "name": "cliRunCommand",
    "memberof": "src/services/cli/cliRun.js",
    "static": true,
    "longname": "src/services/cli/cliRun.js~cliRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliRun.js",
    "importStyle": "{cliRunCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLIRunCommand` as the `cliRunCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliRunCommand);\n// Getting access to the service instance\nconst cliRunCommand = container.get('cliRunCommand');"
    ],
    "lineNumber": 37,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 258,
    "kind": "file",
    "name": "src/services/cli/cliSHBuild.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is the _'real build command'_. This is a private command the shell script executes in order\n * to get a list of commands to run.\n * @extends {CLICommand}\n */\nclass CLISHBuildCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Builder}                      builder                    Needed to generate a target\n   *                                                                  build command.\n   * @param {CLICleanCommand}              cliCleanCommand            Needed to generate the command\n   *                                                                  that cleans a target files.\n   * @param {CLICopyProjectFilesCommand}   cliCopyProjectFilesCommand Needed to generate the command\n   *                                                                  to copy the project files if\n   *                                                                  the feature of copying on\n   *                                                                  build is enabled.\n   * @param {CLIRevisionCommand}           cliRevisionCommand         Needed to generate the command\n   *                                                                  that creates the revision file\n   *                                                                  if the feature of generating\n   *                                                                  it on build is enabled.\n   * @param {CLISHCopyCommand}             cliSHCopyCommand           Needed to generate the command\n   *                                                                  to copy the target files if\n   *                                                                  the target doesn't require\n   *                                                                  bundling.\n   * @param {CLISHNodeRunCommand}          cliSHNodeRunCommand        Needed to generate the command\n   *                                                                  to run a Node target if the\n   *                                                                  `run` option is used.\n   * @param {CLISHTranspileCommand}        cliSHTranspileCommand      Needed to generate the command\n   *                                                                  to transpile a Node target\n   *                                                                  code.\n   * @param {Events}                       events                     Used to reduce the list of\n   *                                                                  commands generated.\n   * @param {ProjectConfigurationSettings} projectConfiguration       Used to read and validate the\n   *                                                                  features.\n   * @param {Targets}                      targets                    Used to get the targets\n   *                                                                  information.\n   */\n  constructor(\n    builder,\n    cliCleanCommand,\n    cliCopyProjectFilesCommand,\n    cliRevisionCommand,\n    cliSHCopyCommand,\n    cliSHNodeRunCommand,\n    cliSHTranspileCommand,\n    events,\n    projectConfiguration,\n    targets\n  ) {\n    super();\n    /**\n     * A local reference for the `builder` service.\n     * @type {Builder}\n     */\n    this.builder = builder;\n    /**\n     * A local reference for the `cliCleanCommand` service.\n     * @type {CliCleanCommand}\n     */\n    this.cliCleanCommand = cliCleanCommand;\n    /**\n     * A local reference for the `cliCopyProjectFilesCommand` service.\n     * @type {CliCopyProjectFilesCommand}\n     */\n    this.cliCopyProjectFilesCommand = cliCopyProjectFilesCommand;\n    /**\n     * A local reference for the `cliRevisionCommand` service.\n     * @type {CliRevisionCommand}\n     */\n    this.cliRevisionCommand = cliRevisionCommand;\n    /**\n     * A local reference for the `cliSHCopyCommand` service.\n     * @type {CliSHCopyCommand}\n     */\n    this.cliSHCopyCommand = cliSHCopyCommand;\n    /**\n     * A local reference for the `cliSHNodeRunCommand` service.\n     * @type {CliSHNodeRunCommand}\n     */\n    this.cliSHNodeRunCommand = cliSHNodeRunCommand;\n    /**\n     * A local reference for the `cliSHTranspileCommand` service.\n     * @type {CliSHTranspileCommand}\n     */\n    this.cliSHTranspileCommand = cliSHTranspileCommand;\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * All the project settings.\n     * @type {ProjectConfigurationSettings}\n     */\n    this.projectConfiguration = projectConfiguration;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-build [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Get the build commands for the shell program to execute';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    this.addOption(\n      'run',\n      '-r, --run',\n      'Run the target after the build is completed. It only works when the ' +\n        'build type is development',\n      false\n    );\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and outputs the list of commands to run.\n   * This method emits the event reducer `build-target-commands-list` with the list of commands,\n   * the target information, the type of build and whether or not the target should be executed;\n   * and it expects a list of commands on return.\n   * @param {string}  name         The name of the target.\n   * @param {Command} command      The executed command (sent by `commander`).\n   * @param {Object}  options      The command options.\n   * @param {string}  options.type The type of build.\n   * @param {boolean} options.run  Whether or not the target also needs to be executed.\n   */\n  handle(name, command, options) {\n    const { type } = options;\n    // Get the target information\n    const target = this.targets.getTarget(name);\n    // Check if there's a reason for the target to be executed.\n    const run = type === 'development' && (target.runOnDevelopment || options.run);\n    // Based on the target type, get the list of commands.\n    const commands = target.is.node ?\n      this.getCommandsForNodeTarget(target, type, run) :\n      this.getCommandsForBrowserTarget(target, type, run);\n    // Reduce the list of commands.\n    const output = this.events.reduce(\n      'build-target-commands-list',\n      commands.filter((cmd) => !!cmd),\n      target,\n      type,\n      run\n    )\n    // Join the commands on a single string.\n    .join(';');\n    // Outputs all the commands\n    this.output(output);\n  }\n  /**\n   * Get the build (and run) commands for a Node target.\n   * @param {Target}  target The target information.\n   * @param {string}  type   The intended build type: `development` or `production`.\n   * @param {boolean} run    Whether or not the target needs to be executed.\n   * @return {Array}\n   */\n  getCommandsForNodeTarget(target, type, run) {\n    /**\n     * Define the arguments that will be sent to the other methods. The reason we defined them this\n     * way is because this is the format they'll be sent to the `.generate` method of the other\n     * CLI commands.\n     */\n    const args = {\n      target: target.name,\n      type,\n      run,\n    };\n    // Check whether or not the target needs to be build.\n    const build = (\n      type === 'production' ||\n      target.bundle ||\n      target.transpile\n    );\n    // Get the base commands.\n    const commands = [\n      this.getCleanCommandIfNeeded(args, target, type, build, run),\n      this.getBuildCommandIfNeeded(args, target, type, build, run),\n      this.getCopyCommand(args, target, type, build, run),\n      this.getTranspileCommand(args, target, type, build, run),\n    ];\n    // If the target won't be executed...\n    if (!run) {\n      // ...push the commands to create the revision file and copy the project files.\n      commands.push(...[\n        this.getRevisionCommand(args, target, type),\n        this.getCopyProjectFilesCommand(args, target, type),\n      ]);\n    } else if (!target.bundle) {\n      /**\n       * ...but if the target will run and is not a bundled target, push the command to run the\n       * target with `nodemon`.\n       */\n      commands.push(this.getNodeRunCommand(args, target, type));\n    }\n\n    return commands;\n  }\n  /**\n   * Get the build (and run) commands for a browser target.\n   * @param {Target}  target The target information.\n   * @param {string}  type   The intended build type: `development` or `production`.\n   * @param {boolean} run    Whether or not the target needs to be executed.\n   * @return {Array}\n   */\n  getCommandsForBrowserTarget(target, type, run) {\n    /**\n     * Define the arguments that will be sent to the other methods. The reason we defined them this\n     * way is because this is the format they'll be sent to the `.generate` method of the other\n     * CLI commands.\n     */\n    const args = {\n      target: target.name,\n      type,\n      run,\n    };\n    // Get the base commands.\n    const commands = [\n      this.getCleanCommandIfNeeded(args, target, type, true, run),\n      this.getBuildCommandIfNeeded(args, target, type, true, run),\n    ];\n    // If the target won't be executed...\n    if (!run) {\n      // ...push the commands to create the revision file and copy the project files.\n      commands.push(...[\n        this.getRevisionCommand(args, target, type),\n        this.getCopyProjectFilesCommand(args, target, type),\n      ]);\n    }\n\n    return commands;\n  }\n  /**\n   * Get the command to remove the previous build files of a target, but only if the target will be\n   * build, otherwise, it will return an empty string.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @param {Target}  target      The target information.\n   * @param {string}  type        The intended build type: `development` or `production`.\n   * @param {boolean} build       Whether or not the target will be build.\n   * @return {string}\n   */\n  getCleanCommandIfNeeded(args, target, type, build) {\n    return build && target.cleanBeforeBuild ?\n      this.cliCleanCommand.generate(args) :\n      '';\n  }\n  /**\n   * Get the command to actually build a target.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @param {Target}  target      The target information.\n   * @param {string}  type        The intended build type: `development` or `production`.\n   * @param {boolean} build       Whether or not the target will be build.\n   * @param {boolean} run         Whether or not the target will be executed.\n   * @return {string}\n   */\n  getBuildCommandIfNeeded(args, target, type, build, run) {\n    return this.builder.getTargetBuildCommand(target, type, run);\n  }\n  /**\n   * Get the command to copy a target files, but only if the target will be _'build'_ (transpiled\n   * counts) and it doesn't support bundling, otherwise, it will return an empty string.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @param {Target}  target      The target information.\n   * @param {string}  type        The intended build type: `development` or `production`.\n   * @param {boolean} build       Whether or not the target will be build.\n   * @return {string}\n   */\n  getCopyCommand(args, target, type, build) {\n    return build && !target.bundle ?\n      this.cliSHCopyCommand.generate(args) :\n      '';\n  }\n  /**\n   * Get the command to transpile a target files, but only if the target will be _'build'_\n   * (transpiled counts) and it doesn't support bundling, otherwise, it will return an empty string.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @param {Target}  target      The target information.\n   * @param {string}  type        The intended build type: `development` or `production`.\n   * @param {boolean} build       Whether or not the target will be build.\n   * @return {string}\n   */\n  getTranspileCommand(args, target, type, build) {\n    return build && !target.bundle ?\n      this.cliSHTranspileCommand.generate(args) :\n      '';\n  }\n  /**\n   * Get the command to run a Node target.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @return {string}\n   */\n  getNodeRunCommand(args) {\n    return this.cliSHNodeRunCommand.generate(args);\n  }\n  /**\n   * Get the command to create the revision file, but only if the feature is enabled, otherwise,\n   * it will return an empty string.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @return {string}\n   */\n  getRevisionCommand(args) {\n    const {\n      enabled,\n      createRevisionOnBuild,\n    } = this.projectConfiguration.version.revision;\n    let command = '';\n    if (enabled && createRevisionOnBuild.enabled) {\n      const revisionEnvCheck = !createRevisionOnBuild.onlyOnProduction ||\n        (createRevisionOnBuild.onlyOnProduction && args.type === 'production');\n      const revisionTargetCheck = !createRevisionOnBuild.targets.length ||\n        createRevisionOnBuild.targets.includes(args.target);\n\n      if (revisionEnvCheck && revisionTargetCheck) {\n        command = this.cliRevisionCommand.generate();\n      }\n    }\n\n    return command;\n  }\n  /**\n   * Get the command to copy the project files, but only if the feature is enabled, otherwise,\n   * it will return an empty string.\n   * @param {Object}  args        The arguments ready to be sent to a `CLICommand` `generate`\n   *                              method.\n   * @param {string}  args.target The target name.\n   * @param {string}  args.type   The intended build type: `development` or `production`.\n   * @param {boolean} args.run    Whether or not the target will be executed.\n   * @return {string}\n   */\n  getCopyProjectFilesCommand(args) {\n    const { enabled, copyOnBuild } = this.projectConfiguration.copy;\n    let command = '';\n    if (enabled && copyOnBuild.enabled) {\n      const copyEnvCheck = !copyOnBuild.onlyOnProduction ||\n        (copyOnBuild.onlyOnProduction && args.type === 'production');\n      const copyTaretCheck = !copyOnBuild.targets.length ||\n        copyOnBuild.targets.includes(args.target);\n\n      if (copyEnvCheck && copyTaretCheck) {\n        command = this.cliCopyProjectFilesCommand.generate();\n      }\n    }\n\n    return command;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHBuildCommand` as the `cliSHBuildCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHBuildCommand);\n * // Getting access to the service instance\n * const cliSHBuildCommand = container.get('cliSHBuildCommand');\n * @type {Provider}\n */\nconst cliSHBuildCommand = provider((app) => {\n  app.set('cliSHBuildCommand', () => new CLISHBuildCommand(\n    app.get('builder'),\n    app.get('cliCleanCommand'),\n    app.get('cliCopyProjectFilesCommand'),\n    app.get('cliRevisionCommand'),\n    app.get('cliSHCopyCommand'),\n    app.get('cliSHNodeRunCommand'),\n    app.get('cliSHTranspileCommand'),\n    app.get('events'),\n    app.get('projectConfiguration').getConfig(),\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  CLISHBuildCommand,\n  cliSHBuildCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHBuild.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 259,
    "kind": "class",
    "name": "CLISHBuildCommand",
    "memberof": "src/services/cli/cliSHBuild.js",
    "static": true,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHBuild.js",
    "importStyle": "{CLISHBuildCommand}",
    "description": "This is the _'real build command'_. This is a private command the shell script executes in order\nto get a list of commands to run.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 260,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 40,
    "params": [
      {
        "nullable": null,
        "types": [
          "Builder"
        ],
        "spread": false,
        "optional": false,
        "name": "builder",
        "description": "Needed to generate a target\n                                                                 build command."
      },
      {
        "nullable": null,
        "types": [
          "CLICleanCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliCleanCommand",
        "description": "Needed to generate the command\n                                                                 that cleans a target files."
      },
      {
        "nullable": null,
        "types": [
          "CLICopyProjectFilesCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliCopyProjectFilesCommand",
        "description": "Needed to generate the command\n                                                                 to copy the project files if\n                                                                 the feature of copying on\n                                                                 build is enabled."
      },
      {
        "nullable": null,
        "types": [
          "CLIRevisionCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliRevisionCommand",
        "description": "Needed to generate the command\n                                                                 that creates the revision file\n                                                                 if the feature of generating\n                                                                 it on build is enabled."
      },
      {
        "nullable": null,
        "types": [
          "CLISHCopyCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliSHCopyCommand",
        "description": "Needed to generate the command\n                                                                 to copy the target files if\n                                                                 the target doesn't require\n                                                                 bundling."
      },
      {
        "nullable": null,
        "types": [
          "CLISHNodeRunCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliSHNodeRunCommand",
        "description": "Needed to generate the command\n                                                                 to run a Node target if the\n                                                                 `run` option is used."
      },
      {
        "nullable": null,
        "types": [
          "CLISHTranspileCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliSHTranspileCommand",
        "description": "Needed to generate the command\n                                                                 to transpile a Node target\n                                                                 code."
      },
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "Used to reduce the list of\n                                                                 commands generated."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "projectConfiguration",
        "description": "Used to read and validate the\n                                                                 features."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "Used to get the targets\n                                                                 information."
      }
    ]
  },
  {
    "__docId__": 261,
    "kind": "member",
    "name": "builder",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#builder",
    "access": "public",
    "description": "A local reference for the `builder` service.",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 262,
    "kind": "member",
    "name": "cliCleanCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliCleanCommand",
    "access": "public",
    "description": "A local reference for the `cliCleanCommand` service.",
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "CliCleanCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 263,
    "kind": "member",
    "name": "cliCopyProjectFilesCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliCopyProjectFilesCommand",
    "access": "public",
    "description": "A local reference for the `cliCopyProjectFilesCommand` service.",
    "lineNumber": 67,
    "type": {
      "nullable": null,
      "types": [
        "CliCopyProjectFilesCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 264,
    "kind": "member",
    "name": "cliRevisionCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliRevisionCommand",
    "access": "public",
    "description": "A local reference for the `cliRevisionCommand` service.",
    "lineNumber": 72,
    "type": {
      "nullable": null,
      "types": [
        "CliRevisionCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 265,
    "kind": "member",
    "name": "cliSHCopyCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliSHCopyCommand",
    "access": "public",
    "description": "A local reference for the `cliSHCopyCommand` service.",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "CliSHCopyCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 266,
    "kind": "member",
    "name": "cliSHNodeRunCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliSHNodeRunCommand",
    "access": "public",
    "description": "A local reference for the `cliSHNodeRunCommand` service.",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "CliSHNodeRunCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 267,
    "kind": "member",
    "name": "cliSHTranspileCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#cliSHTranspileCommand",
    "access": "public",
    "description": "A local reference for the `cliSHTranspileCommand` service.",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "CliSHTranspileCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 268,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 269,
    "kind": "member",
    "name": "projectConfiguration",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#projectConfiguration",
    "access": "public",
    "description": "All the project settings.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 270,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 271,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 272,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 113,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 273,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 131,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 274,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and outputs the list of commands to run.\nThis method emits the event reducer `build-target-commands-list` with the list of commands,\nthe target information, the type of build and whether or not the target should be executed;\nand it expects a list of commands on return.",
    "lineNumber": 144,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The executed command (sent by `commander`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The command options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "The type of build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "options.run",
        "description": "Whether or not the target also needs to be executed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 275,
    "kind": "method",
    "name": "getCommandsForNodeTarget",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getCommandsForNodeTarget",
    "access": "public",
    "description": "Get the build (and run) commands for a Node target.",
    "lineNumber": 174,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Whether or not the target needs to be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 276,
    "kind": "method",
    "name": "getCommandsForBrowserTarget",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getCommandsForBrowserTarget",
    "access": "public",
    "description": "Get the build (and run) commands for a browser target.",
    "lineNumber": 222,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Whether or not the target needs to be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 277,
    "kind": "method",
    "name": "getCleanCommandIfNeeded",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getCleanCommandIfNeeded",
    "access": "public",
    "description": "Get the command to remove the previous build files of a target, but only if the target will be\nbuild, otherwise, it will return an empty string.",
    "lineNumber": 262,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "Whether or not the target will be build."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 278,
    "kind": "method",
    "name": "getBuildCommandIfNeeded",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getBuildCommandIfNeeded",
    "access": "public",
    "description": "Get the command to actually build a target.",
    "lineNumber": 280,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "Whether or not the target will be build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "run",
        "description": "Whether or not the target will be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 279,
    "kind": "method",
    "name": "getCopyCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getCopyCommand",
    "access": "public",
    "description": "Get the command to copy a target files, but only if the target will be _'build'_ (transpiled\ncounts) and it doesn't support bundling, otherwise, it will return an empty string.",
    "lineNumber": 296,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "Whether or not the target will be build."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 280,
    "kind": "method",
    "name": "getTranspileCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getTranspileCommand",
    "access": "public",
    "description": "Get the command to transpile a target files, but only if the target will be _'build'_\n(transpiled counts) and it doesn't support bundling, otherwise, it will return an empty string.",
    "lineNumber": 314,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      },
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "Whether or not the target will be build."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 281,
    "kind": "method",
    "name": "getNodeRunCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getNodeRunCommand",
    "access": "public",
    "description": "Get the command to run a Node target.",
    "lineNumber": 328,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 282,
    "kind": "method",
    "name": "getRevisionCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getRevisionCommand",
    "access": "public",
    "description": "Get the command to create the revision file, but only if the feature is enabled, otherwise,\nit will return an empty string.",
    "lineNumber": 341,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 283,
    "kind": "method",
    "name": "getCopyProjectFilesCommand",
    "memberof": "src/services/cli/cliSHBuild.js~CLISHBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHBuild.js~CLISHBuildCommand#getCopyProjectFilesCommand",
    "access": "public",
    "description": "Get the command to copy the project files, but only if the feature is enabled, otherwise,\nit will return an empty string.",
    "lineNumber": 370,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "args",
        "description": "The arguments ready to be sent to a `CLICommand` `generate`\n                             method."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.target",
        "description": "The target name."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "args.type",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "args.run",
        "description": "Whether or not the target will be executed."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 284,
    "kind": "variable",
    "name": "cliSHBuildCommand",
    "memberof": "src/services/cli/cliSHBuild.js",
    "static": true,
    "longname": "src/services/cli/cliSHBuild.js~cliSHBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHBuild.js",
    "importStyle": "{cliSHBuildCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHBuildCommand` as the `cliSHBuildCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHBuildCommand);\n// Getting access to the service instance\nconst cliSHBuildCommand = container.get('cliSHBuildCommand');"
    ],
    "lineNumber": 397,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 285,
    "kind": "file",
    "name": "src/services/cli/cliSHCopy.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a private command the shell script executes in order to copy a target files.\n * @extends {CLICommand}\n */\nclass CLISHCopyCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Builder} builder To copy the target files.\n   */\n  constructor(builder) {\n    super();\n    /**\n     * A local reference for the `builder` service.\n     * @type {Builder}\n     */\n    this.builder = builder;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-copy-target [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Copy a target files, only if the target requires' +\n      'transpilation or the `type` argument is production';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and copies a target files.\n   * @param {string}  target       The name of the target.\n   * @param {Command} command      The executed command (sent by `commander`).\n   * @param {Object}  options      The command options.\n   * @param {string}  options.type The type of build.\n   */\n  handle(target, command, options) {\n    return this.builder.copyTarget(target, options.type);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHCopyCommand` as the `cliSHCopyCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHCopyCommand);\n * // Getting access to the service instance\n * const cliSHCopyCommand = container.get('cliSHCopyCommand');\n * @type {Provider}\n */\nconst cliSHCopyCommand = provider((app) => {\n  app.set('cliSHCopyCommand', () => new CLISHCopyCommand(app.get('builder')));\n});\n\nmodule.exports = {\n  CLISHCopyCommand,\n  cliSHCopyCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHCopy.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 286,
    "kind": "class",
    "name": "CLISHCopyCommand",
    "memberof": "src/services/cli/cliSHCopy.js",
    "static": true,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHCopy.js",
    "importStyle": "{CLISHCopyCommand}",
    "description": "This is a private command the shell script executes in order to copy a target files.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 287,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Builder"
        ],
        "spread": false,
        "optional": false,
        "name": "builder",
        "description": "To copy the target files."
      }
    ]
  },
  {
    "__docId__": 288,
    "kind": "member",
    "name": "builder",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#builder",
    "access": "public",
    "description": "A local reference for the `builder` service.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 289,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 290,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 291,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 292,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHCopy.js~CLISHCopyCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHCopy.js~CLISHCopyCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and copies a target files.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The executed command (sent by `commander`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The command options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "The type of build."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 293,
    "kind": "variable",
    "name": "cliSHCopyCommand",
    "memberof": "src/services/cli/cliSHCopy.js",
    "static": true,
    "longname": "src/services/cli/cliSHCopy.js~cliSHCopyCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHCopy.js",
    "importStyle": "{cliSHCopyCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHCopyCommand` as the `cliSHCopyCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHCopyCommand);\n// Getting access to the service instance\nconst cliSHCopyCommand = container.get('cliSHCopyCommand');"
    ],
    "lineNumber": 64,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 294,
    "kind": "file",
    "name": "src/services/cli/cliSHNodeRun.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a private command the shell script executes in order to run a Node target with `nodemon`.\n * @extends {CLICommand}\n */\nclass CLISHNodeRunCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {BuildNodeRunner} buildNodeRunner To actually run a target.\n   * @param {Targets}         targets         To get a target information.\n   */\n  constructor(buildNodeRunner, targets) {\n    super();\n    /**\n     * A local reference for the `buildNodeRunner` service.\n     * @type {BuildNodeRunner}\n     */\n    this.buildNodeRunner = buildNodeRunner;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-node-run [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Run a Node target that wasn\\'t bundled';\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and runs a Node target.\n   * @param {string} name The name of the target.\n   * @return {`nodemon`}\n   */\n  handle(name) {\n    const target = this.targets.getTarget(name);\n    return this.buildNodeRunner.runTarget(target);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHNodeRunCommand` as the `cliSHNodeRunCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHNodeRunCommand);\n * // Getting access to the service instance\n * const cliSHNodeRunCommand = container.get('cliSHNodeRunCommand');\n * @type {Provider}\n */\nconst cliSHNodeRunCommand = provider((app) => {\n  app.set('cliSHNodeRunCommand', () => new CLISHNodeRunCommand(\n    app.get('buildNodeRunner'),\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  CLISHNodeRunCommand,\n  cliSHNodeRunCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHNodeRun.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 295,
    "kind": "class",
    "name": "CLISHNodeRunCommand",
    "memberof": "src/services/cli/cliSHNodeRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHNodeRun.js",
    "importStyle": "{CLISHNodeRunCommand}",
    "description": "This is a private command the shell script executes in order to run a Node target with `nodemon`.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 296,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 13,
    "params": [
      {
        "nullable": null,
        "types": [
          "BuildNodeRunner"
        ],
        "spread": false,
        "optional": false,
        "name": "buildNodeRunner",
        "description": "To actually run a target."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To get a target information."
      }
    ]
  },
  {
    "__docId__": 297,
    "kind": "member",
    "name": "buildNodeRunner",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#buildNodeRunner",
    "access": "public",
    "description": "A local reference for the `buildNodeRunner` service.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "BuildNodeRunner"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 298,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 299,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 300,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 301,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 302,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHNodeRun.js~CLISHNodeRunCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and runs a Node target.",
    "lineNumber": 47,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the target."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "`nodemon`"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 303,
    "kind": "variable",
    "name": "cliSHNodeRunCommand",
    "memberof": "src/services/cli/cliSHNodeRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHNodeRun.js~cliSHNodeRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHNodeRun.js",
    "importStyle": "{cliSHNodeRunCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHNodeRunCommand` as the `cliSHNodeRunCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHNodeRunCommand);\n// Getting access to the service instance\nconst cliSHNodeRunCommand = container.get('cliSHNodeRunCommand');"
    ],
    "lineNumber": 62,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 304,
    "kind": "file",
    "name": "src/services/cli/cliSHRun.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is the _'real run command'_. This is a private command the shell script executes in order\n * to get a list of commands it should execute.\n * @extends {CLICommand}\n */\nclass CLISHRunCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {CLIBuildCommand} cliBuildCommand The run command is actually an alias for the build\n   *                                          command with the `--run` option flag set to true.\n   */\n  constructor(cliBuildCommand) {\n    super();\n    /**\n     * A local reference for the `cliBuildCommand` service.\n     * @type {CLIBuildCommand}\n     */\n    this.cliBuildCommand = cliBuildCommand;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-run [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Get the build commands for the shell program to execute';\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and outputs the list of commands to run.\n   * @param {string} target The name of the target.\n   */\n  handle(target) {\n    this.output(this.cliBuildCommand.generate({\n      target,\n      type: 'development',\n      run: true,\n    }));\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHRunCommand` as the `cliSHRunCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHRunCommand);\n * // Getting access to the service instance\n * const cliSHRunCommand = container.get('cliSHRunCommand');\n * @type {Provider}\n */\nconst cliSHRunCommand = provider((app) => {\n  app.set('cliSHRunCommand', () => new CLISHRunCommand(\n    app.get('cliBuildCommand')\n  ));\n});\n\nmodule.exports = {\n  CLISHRunCommand,\n  cliSHRunCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHRun.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 305,
    "kind": "class",
    "name": "CLISHRunCommand",
    "memberof": "src/services/cli/cliSHRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHRun.js",
    "importStyle": "{CLISHRunCommand}",
    "description": "This is the _'real run command'_. This is a private command the shell script executes in order\nto get a list of commands it should execute.",
    "lineNumber": 8,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 306,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "CLIBuildCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "cliBuildCommand",
        "description": "The run command is actually an alias for the build\n                                         command with the `--run` option flag set to true."
      }
    ]
  },
  {
    "__docId__": 307,
    "kind": "member",
    "name": "cliBuildCommand",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#cliBuildCommand",
    "access": "public",
    "description": "A local reference for the `cliBuildCommand` service.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "CLIBuildCommand"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 308,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 309,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 31,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 310,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 36,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 311,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHRun.js~CLISHRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHRun.js~CLISHRunCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and outputs the list of commands to run.",
    "lineNumber": 42,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The name of the target."
      }
    ],
    "return": null
  },
  {
    "__docId__": 312,
    "kind": "variable",
    "name": "cliSHRunCommand",
    "memberof": "src/services/cli/cliSHRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHRun.js~cliSHRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHRun.js",
    "importStyle": "{cliSHRunCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHRunCommand` as the `cliSHRunCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHRunCommand);\n// Getting access to the service instance\nconst cliSHRunCommand = container.get('cliSHRunCommand');"
    ],
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 313,
    "kind": "file",
    "name": "src/services/cli/cliSHTranspile.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a private command the shell script executes in order to transpile a target.\n * @extends {CLICommand}\n */\nclass CLISHTranspileCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Builder} builder To copy the target files.\n   */\n  constructor(builder) {\n    super();\n    /**\n     * A local reference for the `builder` service.\n     * @type {Builder}\n     */\n    this.builder = builder;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-transpile-target [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Transpile a target code if needed';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and copies a target files.\n   * @param {string}  target       The name of the target.\n   * @param {Command} command      The executed command (sent by `commander`).\n   * @param {Object}  options      The command options.\n   * @param {string}  options.type The type of build.\n   */\n  handle(target, command, options) {\n    return this.builder.transpileTarget(target, options.type);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHTranspileCommand` as the `cliSHTranspileCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHTranspileCommand);\n * // Getting access to the service instance\n * const cliSHTranspileCommand = container.get('cliSHTranspileCommand');\n * @type {Provider}\n */\nconst cliSHTranspileCommand = provider((app) => {\n  app.set('cliSHTranspileCommand', () => new CLISHTranspileCommand(app.get('builder')));\n});\n\nmodule.exports = {\n  CLISHTranspileCommand,\n  cliSHTranspileCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHTranspile.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 314,
    "kind": "class",
    "name": "CLISHTranspileCommand",
    "memberof": "src/services/cli/cliSHTranspile.js",
    "static": true,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHTranspile.js",
    "importStyle": "{CLISHTranspileCommand}",
    "description": "This is a private command the shell script executes in order to transpile a target.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 315,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 12,
    "params": [
      {
        "nullable": null,
        "types": [
          "Builder"
        ],
        "spread": false,
        "optional": false,
        "name": "builder",
        "description": "To copy the target files."
      }
    ]
  },
  {
    "__docId__": 316,
    "kind": "member",
    "name": "builder",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#builder",
    "access": "public",
    "description": "A local reference for the `builder` service.",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Builder"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 317,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 23,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 318,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 319,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 320,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHTranspile.js~CLISHTranspileCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and copies a target files.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The executed command (sent by `commander`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The command options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "The type of build."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 321,
    "kind": "variable",
    "name": "cliSHTranspileCommand",
    "memberof": "src/services/cli/cliSHTranspile.js",
    "static": true,
    "longname": "src/services/cli/cliSHTranspile.js~cliSHTranspileCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHTranspile.js",
    "importStyle": "{cliSHTranspileCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHTranspileCommand` as the `cliSHTranspileCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHTranspileCommand);\n// Getting access to the service instance\nconst cliSHTranspileCommand = container.get('cliSHTranspileCommand');"
    ],
    "lineNumber": 63,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 322,
    "kind": "file",
    "name": "src/services/cli/cliSHValidateBuild.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a private command the shell script executes before running the build command in order to\n * validate the arguments and throw any necessary error. The reason we do this in two separated\n * commands is that the shell script takes all the output of the build command and tries to execute\n * it, so we can't include execptions in there.\n * @extends {CLICommand}\n */\nclass CLISHValidateBuildCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Logger}  appLogger To inform the user if something goes wrong.\n   * @param {Targets} targets   To validate a target existence.\n   */\n  constructor(appLogger, targets) {\n    super();\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-validate-build [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Validate the arguments before the shell executes the task';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    this.addOption(\n      'run',\n      '-r, --run',\n      'Run the target after the build is completed. It only works when the ' +\n        'build type is development',\n      false\n    );\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and validate all the arguments.\n   * @param {string}  name         The name of the target.\n   * @param {Command} command      The executed command (sent by `commander`).\n   * @param {Object}  options      The command options.\n   * @param {string}  options.type The type of build.\n   * @param {string}  options.type Whether or not the target should be executed.\n   */\n  handle(name, command, options) {\n    const { run, type } = options;\n    // If the target doesn't exist, this will throw an error.\n    const target = this.targets.getTarget(name);\n\n    if (\n      target.is.node &&\n      type === 'development' &&\n      !run &&\n      !target.runOnDevelopment &&\n      !target.bundle &&\n      !target.transpile\n    ) {\n      this.appLogger.warning(\n        `The target '${name}' doesn't need bundling nor transpilation, ` +\n        'so there\\'s no need to build it'\n      );\n    }\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHValidateBuildCommand` as the `cliSHValidateBuildCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHValidateBuildCommand);\n * // Getting access to the service instance\n * const cliSHValidateBuildCommand = container.get('cliSHValidateBuildCommand');\n * @type {Provider}\n */\nconst cliSHValidateBuildCommand = provider((app) => {\n  app.set('cliSHValidateBuildCommand', () => new CLISHValidateBuildCommand(\n    app.get('appLogger'),\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  CLISHValidateBuildCommand,\n  cliSHValidateBuildCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHValidateBuild.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 323,
    "kind": "class",
    "name": "CLISHValidateBuildCommand",
    "memberof": "src/services/cli/cliSHValidateBuild.js",
    "static": true,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHValidateBuild.js",
    "importStyle": "{CLISHValidateBuildCommand}",
    "description": "This is a private command the shell script executes before running the build command in order to\nvalidate the arguments and throw any necessary error. The reason we do this in two separated\ncommands is that the shell script takes all the output of the build command and tries to execute\nit, so we can't include execptions in there.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 324,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To inform the user if something goes wrong."
      },
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To validate a target existence."
      }
    ]
  },
  {
    "__docId__": 325,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 22,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 326,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 27,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 327,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 328,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 38,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 329,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 56,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 330,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHValidateBuild.js~CLISHValidateBuildCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and validate all the arguments.",
    "lineNumber": 66,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the target."
      },
      {
        "nullable": null,
        "types": [
          "Command"
        ],
        "spread": false,
        "optional": false,
        "name": "command",
        "description": "The executed command (sent by `commander`)."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "options",
        "description": "The command options."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "The type of build."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "options.type",
        "description": "Whether or not the target should be executed."
      }
    ],
    "return": null
  },
  {
    "__docId__": 331,
    "kind": "variable",
    "name": "cliSHValidateBuildCommand",
    "memberof": "src/services/cli/cliSHValidateBuild.js",
    "static": true,
    "longname": "src/services/cli/cliSHValidateBuild.js~cliSHValidateBuildCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHValidateBuild.js",
    "importStyle": "{cliSHValidateBuildCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHValidateBuildCommand` as the `cliSHValidateBuildCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHValidateBuildCommand);\n// Getting access to the service instance\nconst cliSHValidateBuildCommand = container.get('cliSHValidateBuildCommand');"
    ],
    "lineNumber": 96,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 332,
    "kind": "file",
    "name": "src/services/cli/cliSHValidateRun.js",
    "content": "const { provider } = require('jimple');\nconst CLICommand = require('../../abstracts/cliCommand');\n/**\n * This is a private command the shell script executes before running the run command in order to\n * validate the arguments and throw any necessary error. The reason we do this in two separated\n * commands is that the shell script takes all the output of the run command and tries to execute\n * it, so we can't include execptions in there.\n * @extends {CLICommand}\n */\nclass CLISHValidateRunCommand extends CLICommand {\n  /**\n   * Class constructor.\n   * @param {Targets} targets To validate a target existence.\n   */\n  constructor(targets) {\n    super();\n    /**\n     * A local reference for the `targets` service.\n     * @type {Targets}\n     */\n    this.targets = targets;\n    /**\n     * The instruction needed to trigger the command.\n     * @type {string}\n     */\n    this.command = 'sh-validate-run [target]';\n    /**\n     * A description of the command, just to follow the interface as the command won't show up on\n     * the help interface.\n     * @type {string}\n     */\n    this.description = 'Validate the arguments before the shell executes the task';\n    this.addOption(\n      'type',\n      '-t, --type [type]',\n      'Which build type: development (default) or production',\n      'development'\n    );\n    this.addOption(\n      'run',\n      '-r, --run',\n      'Run the target after the build is completed. It only works when the ' +\n        'build type is development',\n      false\n    );\n    /**\n     * Hide the command from the help interface.\n     * @type {boolean}\n     */\n    this.hidden = true;\n  }\n  /**\n   * Handle the execution of the command and validate the target existence.\n   * @param {string} name The name of the target.\n   */\n  handle(name) {\n    // If the target doesn't exist, this will throw an error.\n    return this.targets.getTarget(name);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `CLISHValidateRunCommand` as the `cliSHValidateRunCommand` service.\n * @example\n * // Register it on the container\n * container.register(cliSHValidateRunCommand);\n * // Getting access to the service instance\n * const cliSHValidateRunCommand = container.get('cliSHValidateRunCommand');\n * @type {Provider}\n */\nconst cliSHValidateRunCommand = provider((app) => {\n  app.set('cliSHValidateRunCommand', () => new CLISHValidateRunCommand(\n    app.get('targets')\n  ));\n});\n\nmodule.exports = {\n  CLISHValidateRunCommand,\n  cliSHValidateRunCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/cliSHValidateRun.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 333,
    "kind": "class",
    "name": "CLISHValidateRunCommand",
    "memberof": "src/services/cli/cliSHValidateRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHValidateRun.js",
    "importStyle": "{CLISHValidateRunCommand}",
    "description": "This is a private command the shell script executes before running the run command in order to\nvalidate the arguments and throw any necessary error. The reason we do this in two separated\ncommands is that the shell script takes all the output of the run command and tries to execute\nit, so we can't include execptions in there.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "CLICommand"
    ]
  },
  {
    "__docId__": 334,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "Targets"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "To validate a target existence."
      }
    ]
  },
  {
    "__docId__": 335,
    "kind": "member",
    "name": "targets",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#targets",
    "access": "public",
    "description": "A local reference for the `targets` service.",
    "lineNumber": 21,
    "type": {
      "nullable": null,
      "types": [
        "Targets"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 336,
    "kind": "member",
    "name": "command",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#command",
    "access": "public",
    "description": "The instruction needed to trigger the command.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 337,
    "kind": "member",
    "name": "description",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#description",
    "access": "public",
    "description": "A description of the command, just to follow the interface as the command won't show up on\nthe help interface.",
    "lineNumber": 32,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 338,
    "kind": "member",
    "name": "hidden",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#hidden",
    "access": "public",
    "description": "Hide the command from the help interface.",
    "lineNumber": 50,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 339,
    "kind": "method",
    "name": "handle",
    "memberof": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/cli/cliSHValidateRun.js~CLISHValidateRunCommand#handle",
    "access": "public",
    "description": "Handle the execution of the command and validate the target existence.",
    "lineNumber": 56,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "The name of the target."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 340,
    "kind": "variable",
    "name": "cliSHValidateRunCommand",
    "memberof": "src/services/cli/cliSHValidateRun.js",
    "static": true,
    "longname": "src/services/cli/cliSHValidateRun.js~cliSHValidateRunCommand",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/cli/cliSHValidateRun.js",
    "importStyle": "{cliSHValidateRunCommand}",
    "description": "The service provider that once registered on the app container will set an instance of\n`CLISHValidateRunCommand` as the `cliSHValidateRunCommand` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cliSHValidateRunCommand);\n// Getting access to the service instance\nconst cliSHValidateRunCommand = container.get('cliSHValidateRunCommand');"
    ],
    "lineNumber": 71,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 341,
    "kind": "file",
    "name": "src/services/cli/index.js",
    "content": "const { cliWithName, cli } = require('./cli');\nconst { cliBuildCommand } = require('./cliBuild');\nconst { cliCleanCommand } = require('./cliClean');\nconst { cliCopyProjectFilesCommand } = require('./cliCopyProjectFiles');\nconst { cliRevisionCommand } = require('./cliRevision');\nconst { cliRunCommand } = require('./cliRun');\nconst { cliSHBuildCommand } = require('./cliSHBuild');\nconst { cliSHCopyCommand } = require('./cliSHCopy');\nconst { cliSHNodeRunCommand } = require('./cliSHNodeRun');\nconst { cliSHRunCommand } = require('./cliSHRun');\nconst { cliSHTranspileCommand } = require('./cliSHTranspile');\nconst { cliSHValidateBuildCommand } = require('./cliSHValidateBuild');\nconst { cliSHValidateRunCommand } = require('./cliSHValidateRun');\n\nmodule.exports = {\n  cliWithName,\n  cli,\n  cliBuildCommand,\n  cliCleanCommand,\n  cliCopyProjectFilesCommand,\n  cliRevisionCommand,\n  cliRunCommand,\n  cliSHBuildCommand,\n  cliSHCopyCommand,\n  cliSHNodeRunCommand,\n  cliSHRunCommand,\n  cliSHTranspileCommand,\n  cliSHValidateBuildCommand,\n  cliSHValidateRunCommand,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/cli/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 342,
    "kind": "file",
    "name": "src/services/common/cleaner.js",
    "content": "const del = require('del');\nconst { provider } = require('jimple');\n/**\n * A simple class with only one static method that removes items from directories.\n */\nclass Cleaner {\n  /**\n   * Remove items that match a glob pattern from a given directory.\n   * @param {string}  directory            The path to the target directory.\n   * @param {Array}   files                The list of files/folders to remove.\n   * @param {boolean} [removeOthers=false] If `true`, it will remove everything but the specified\n   *                                       `files`.\n   * @return {Promise<undefined,Error>}\n   */\n  static clean(directory, files, removeOthers = false) {\n    const items = [];\n    let flag = '';\n    if (removeOthers) {\n      items.push(`${directory}/**`);\n      items.push(`!${directory}`);\n      flag = '!';\n    }\n\n    if (Array.isArray(files)) {\n      files.forEach((file) => {\n        items.push(`${flag}${directory}/${file}`);\n      });\n    } else {\n      items.push(`${directory}/${files}`);\n    }\n\n    return del(items);\n  }\n}\n/**\n * The service provider that once registered on the app container will set `Cleaner.clean` as the\n * `cleaner` service.\n * @example\n * // Register it on the container\n * container.register(cleaner);\n * // Getting access to the service instance\n * const cleaner = container.get('cleaner');\n * @type {Provider}\n */\nconst cleaner = provider((app) => {\n  app.set('cleaner', () => Cleaner.clean);\n});\n\nmodule.exports = {\n  Cleaner,\n  cleaner,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/cleaner.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 343,
    "kind": "class",
    "name": "Cleaner",
    "memberof": "src/services/common/cleaner.js",
    "static": true,
    "longname": "src/services/common/cleaner.js~Cleaner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/cleaner.js",
    "importStyle": "{Cleaner}",
    "description": "A simple class with only one static method that removes items from directories.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 344,
    "kind": "method",
    "name": "clean",
    "memberof": "src/services/common/cleaner.js~Cleaner",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/cleaner.js~Cleaner.clean",
    "access": "public",
    "description": "Remove items that match a glob pattern from a given directory.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "directory",
        "description": "The path to the target directory."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "files",
        "description": "The list of files/folders to remove."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "removeOthers",
        "description": "If `true`, it will remove everything but the specified\n                                      `files`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<undefined,Error>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 345,
    "kind": "variable",
    "name": "cleaner",
    "memberof": "src/services/common/cleaner.js",
    "static": true,
    "longname": "src/services/common/cleaner.js~cleaner",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/cleaner.js",
    "importStyle": "{cleaner}",
    "description": "The service provider that once registered on the app container will set `Cleaner.clean` as the\n`cleaner` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(cleaner);\n// Getting access to the service instance\nconst cleaner = container.get('cleaner');"
    ],
    "lineNumber": 45,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 346,
    "kind": "file",
    "name": "src/services/common/copier.js",
    "content": "const fs = require('fs-extra');\nconst path = require('path');\nconst { provider } = require('jimple');\n/**\n * A service to copy items.\n */\nclass Copier {\n  /**\n   * Copy a list of items between an `origin` directory and a `target` directory.\n   * @param {string} origin The path to the origin directory.\n   * @param {string} target The path to the target directory.\n   * @param {Array}  items  The list of items to copy. Each item can be a `string` with the path to\n   *                        the item, or an object with origin path of the file as key and the\n   *                        target path as value.\n   * @return {Promise<Array,Error>} If everything goes well, the promise will resolve on a list\n   *                                with the information of every item it copied.\n   */\n  static copy(origin, target, items) {\n    const paths = [];\n    const list = items.map((item) => {\n      const result = {\n        from: '',\n        to: '',\n      };\n\n      if (typeof item === 'string') {\n        result.from = path.join(origin, item);\n        result.to = path.join(target, item);\n        result.isModule = item.startsWith('node_modules');\n      } else {\n        const [name] = Object.keys(item);\n        result.from = path.join(origin, name);\n        result.to = path.join(target, item[name]);\n        result.isModule = name.startsWith('node_modules');\n      }\n\n      paths.push(result.from);\n      return result;\n    });\n\n    return this.findMissingItems(paths)\n    .then(() => Promise.all(list.map((item) => (item.isModule ?\n      this.copyModule(item.from, item.to) :\n      this.copyFile(item.from, item.to)\n    ))));\n  }\n  /**\n   * Copy a single file from one location to another.\n   * @param {string} from The current location of the file.\n   * @param {string} to   The location of the copy.\n   * @return {Promise<Object,Object>} The promise will resolve on an object with the information of\n   *                                  the process: `from`, `to` and `success`.\n   */\n  static copyFile(from, to) {\n    return fs.copy(from, to)\n    .then(() => ({\n      from,\n      to,\n      success: true,\n    }))\n    .catch((error) => ({\n      from,\n      to,\n      error,\n      success: false,\n    }));\n  }\n  /**\n   * Copy a Node module. The reason this is different from `copyFile` is because instead of copying\n   * the entire module, we first read all the files on its directory, remove its modules and the\n   * lock files and then copy all the rest.\n   * @param {string} from The module path.\n   * @param {string} to   The path to where it will be copied.\n   * @return {Promise<Object,Object>} The promise will resolve on an object with the information of\n   *                                  the process: `from`, `to` and `success`.\n   */\n  static copyModule(from, to) {\n    const ignore = ['yarn.lock', 'package-lock.json', 'node_modules'];\n    return fs.ensureDir(to)\n    .then(() => fs.readdir(from))\n    .then((files) => Promise.all(\n      files\n      .filter((file) => !ignore.includes(file))\n      .map((file) => fs.copy(path.join(from, file), path.join(to, file)))\n    ))\n    .then(() => ({\n      from,\n      to,\n      success: true,\n    }))\n    .catch((error) => ({\n      from,\n      to,\n      error,\n      success: false,\n    }));\n  }\n  /**\n   * Given a list of items, find if any of them doesn't exist.\n   * @param {Array} items A list of paths.\n   * @return {Promise<Array,Error>} If everything goes well, the promise will resolve on a list of\n   *                                objects with the path for the `item` and a flag to indicate if\n   *                                they `exists`.\n   */\n  static findMissingItems(items) {\n    return Promise.all(items.map((item) => this.pathExists(item)))\n    .then((results) => {\n      let result = {};\n      const missing = results.find((item) => !item.exists);\n      if (missing) {\n        result = Promise.reject(\n          new Error(`Error: ${missing.item} can't be copied because it doesn't exist`)\n        );\n      }\n\n      return result;\n    });\n  }\n  /**\n   * Check if an item exists.\n   * @param  {string} item The path for the item.\n   * @return {Promise<Object,Error>} If everything goes well, the promise will resolve on an object\n   *                                 with the keys `item`, for the item path, and `exists` to\n   *                                 indicate whether the item exists or not.\n   */\n  static pathExists(item) {\n    return fs.pathExists(item)\n    .then((exists) => ({\n      item,\n      exists,\n    }));\n  }\n}\n/**\n * The service provider that once registered on the app container will set `Copier.copy` as the\n * `copier` service.\n * @example\n * // Register it on the container\n * container.register(copier);\n * // Getting access to the service instance\n * const copier = container.get('copier');\n * @type {Provider}\n */\nconst copier = provider((app) => {\n  app.set('copier', () => Copier.copy.bind(Copier));\n});\n\nmodule.exports = {\n  Copier,\n  copier,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/copier.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 347,
    "kind": "class",
    "name": "Copier",
    "memberof": "src/services/common/copier.js",
    "static": true,
    "longname": "src/services/common/copier.js~Copier",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/copier.js",
    "importStyle": "{Copier}",
    "description": "A service to copy items.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 348,
    "kind": "method",
    "name": "copy",
    "memberof": "src/services/common/copier.js~Copier",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/copier.js~Copier.copy",
    "access": "public",
    "description": "Copy a list of items between an `origin` directory and a `target` directory.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "origin",
        "description": "The path to the origin directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The path to the target directory."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "The list of items to copy. Each item can be a `string` with the path to\n                       the item, or an object with origin path of the file as key and the\n                       target path as value."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the promise will resolve on a list\n                               with the information of every item it copied."
    }
  },
  {
    "__docId__": 349,
    "kind": "method",
    "name": "copyFile",
    "memberof": "src/services/common/copier.js~Copier",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/copier.js~Copier.copyFile",
    "access": "public",
    "description": "Copy a single file from one location to another.",
    "lineNumber": 54,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The current location of the file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "The location of the copy."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object,Object>"
      ],
      "spread": false,
      "description": "The promise will resolve on an object with the information of\n                                 the process: `from`, `to` and `success`."
    }
  },
  {
    "__docId__": 350,
    "kind": "method",
    "name": "copyModule",
    "memberof": "src/services/common/copier.js~Copier",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/copier.js~Copier.copyModule",
    "access": "public",
    "description": "Copy a Node module. The reason this is different from `copyFile` is because instead of copying\nthe entire module, we first read all the files on its directory, remove its modules and the\nlock files and then copy all the rest.",
    "lineNumber": 77,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "from",
        "description": "The module path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "to",
        "description": "The path to where it will be copied."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object,Object>"
      ],
      "spread": false,
      "description": "The promise will resolve on an object with the information of\n                                 the process: `from`, `to` and `success`."
    }
  },
  {
    "__docId__": 351,
    "kind": "method",
    "name": "findMissingItems",
    "memberof": "src/services/common/copier.js~Copier",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/copier.js~Copier.findMissingItems",
    "access": "public",
    "description": "Given a list of items, find if any of them doesn't exist.",
    "lineNumber": 105,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "items",
        "description": "A list of paths."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Array,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the promise will resolve on a list of\n                               objects with the path for the `item` and a flag to indicate if\n                               they `exists`."
    }
  },
  {
    "__docId__": 352,
    "kind": "method",
    "name": "pathExists",
    "memberof": "src/services/common/copier.js~Copier",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/copier.js~Copier.pathExists",
    "access": "public",
    "description": "Check if an item exists.",
    "lineNumber": 126,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "item",
        "description": "The path for the item."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Object,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the promise will resolve on an object\n                                with the keys `item`, for the item path, and `exists` to\n                                indicate whether the item exists or not."
    }
  },
  {
    "__docId__": 353,
    "kind": "variable",
    "name": "copier",
    "memberof": "src/services/common/copier.js",
    "static": true,
    "longname": "src/services/common/copier.js~copier",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/copier.js",
    "importStyle": "{copier}",
    "description": "The service provider that once registered on the app container will set `Copier.copy` as the\n`copier` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(copier);\n// Getting access to the service instance\nconst copier = container.get('copier');"
    ],
    "lineNumber": 144,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 354,
    "kind": "file",
    "name": "src/services/common/events.js",
    "content": "const { provider } = require('jimple');\nconst { EventsHub } = require('wootils/shared');\n/**\n * A simple events hub to manage the app events.\n * @extends {EventsHub}\n */\nclass Events extends EventsHub {}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `Events` as the `events` service.\n * @example\n * // Register it on the container\n * container.register(events);\n * // Getting access to the service instance\n * const events = container.get('events');\n * @type {Provider}\n */\nconst events = provider((app) => {\n  app.set('events', () => new Events());\n});\n\nmodule.exports = {\n  Events,\n  events,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/events.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 355,
    "kind": "class",
    "name": "Events",
    "memberof": "src/services/common/events.js",
    "static": true,
    "longname": "src/services/common/events.js~Events",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/events.js",
    "importStyle": "{Events}",
    "description": "A simple events hub to manage the app events.",
    "lineNumber": 7,
    "interface": false,
    "extends": [
      "EventsHub"
    ]
  },
  {
    "__docId__": 356,
    "kind": "variable",
    "name": "events",
    "memberof": "src/services/common/events.js",
    "static": true,
    "longname": "src/services/common/events.js~events",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/events.js",
    "importStyle": "{events}",
    "description": "The service provider that once registered on the app container will set an instance of\n`Events` as the `events` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(events);\n// Getting access to the service instance\nconst events = container.get('events');"
    ],
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 357,
    "kind": "file",
    "name": "src/services/common/index.js",
    "content": "const { cleaner } = require('./cleaner');\nconst { copier } = require('./copier');\nconst { events } = require('./events');\nconst { plugins } = require('./plugins');\nconst { versionUtils } = require('./versionUtils');\n\nmodule.exports = {\n  cleaner,\n  copier,\n  events,\n  plugins,\n  versionUtils,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 358,
    "kind": "file",
    "name": "src/services/common/plugins.js",
    "content": "const { provider } = require('jimple');\n/**\n * This service is in charge of looking for, loading and registering plugins for the app.\n */\nclass Plugins {\n  /**\n   * Class constructor.\n   * @param {string}    prefix      The prefix the dependencies need to have in order to be\n   *                                identified as plugins.\n   * @param {Woopack}   app         The send to the plugis so they can register their services.\n   * @param {Logger}    appLogger   To indicate if a plugin couldn't be loaded.\n   * @param {Object}    packageInfo To read the dependencies list.\n   * @param {PathUtils} pathUtils   To build the dependencies paths.\n   */\n  constructor(prefix, app, appLogger, packageInfo, pathUtils) {\n    /**\n     * The prefix the dependencies need to have in order to be identified as plugins.\n     * @type {string}\n     */\n    this.prefix = prefix;\n    /**\n     * The local reference to the main app.\n     * @type {Woopack}\n     */\n    this.app = app;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * The implementation `package.json`\n     * @type {Object}\n     */\n    this.packageInfo = packageInfo;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n  }\n  /**\n   * Load all the plugins.\n   * @param  {boolean} [dependencies=true]    Whether or not to look for plugins on the\n   *                                          `dependencies`.\n   * @param  {boolean} [devDependencies=true] Whether or not to look for plugins on the\n   *                                          `devDependencies`.\n   */\n  load(dependencies = true, devDependencies = true) {\n    const packages = [];\n    if (dependencies && this.packageInfo.dependencies) {\n      packages.push(...Object.keys(this.packageInfo.dependencies));\n    }\n\n    if (devDependencies && this.packageInfo.devDependencies) {\n      packages.push(...Object.keys(this.packageInfo.devDependencies));\n    }\n\n    packages\n    .filter((name) => name.startsWith(this.prefix))\n    .forEach((name) => this._loadPlugin(name));\n  }\n  /**\n   * Load a plugin by its package name.\n   * @param  {string} packageName The name of the plugin.\n   * @throws {Error} If the plugin can't be loaded or registered.\n   * @ignore\n   * @access protected\n   */\n  _loadPlugin(packageName) {\n    try {\n      const packagePath = this.pathUtils.join('node_modules', packageName);\n      // eslint-disable-next-line global-require,import/no-dynamic-require\n      const plugin = require(packagePath);\n      plugin(this.app);\n    } catch (error) {\n      this.appLogger.error(`The plugin ${packageName} couldn't be loaded`);\n      throw error;\n    }\n  }\n}\n/**\n * Generate a `Provider` with an already defined prefix for the plugins.\n * @example\n * // Generate the provider\n * const provider = plugins('my-plugin-');\n * // Register it on the container\n * container.register(provider);\n * // Getting access to the service instance\n * const plugins = container.get('plugins');\n * @param {string} prefix The prefix the dependencies need to have in order to\n *                        be identified as plugins.\n * @return {Provider}\n */\nconst plugins = (prefix) => provider((app) => {\n  app.set('plugins', () => new Plugins(\n    prefix,\n    app,\n    app.get('appLogger'),\n    app.get('packageInfo'),\n    app.get('pathUtils')\n  ));\n});\n\nmodule.exports = {\n  Plugins,\n  plugins,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/plugins.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 359,
    "kind": "class",
    "name": "Plugins",
    "memberof": "src/services/common/plugins.js",
    "static": true,
    "longname": "src/services/common/plugins.js~Plugins",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/plugins.js",
    "importStyle": "{Plugins}",
    "description": "This service is in charge of looking for, loading and registering plugins for the app.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 360,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/common/plugins.js~Plugins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix the dependencies need to have in order to be\n                               identified as plugins."
      },
      {
        "nullable": null,
        "types": [
          "Woopack"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "The send to the plugis so they can register their services."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To indicate if a plugin couldn't be loaded."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "packageInfo",
        "description": "To read the dependencies list."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build the dependencies paths."
      }
    ]
  },
  {
    "__docId__": 361,
    "kind": "member",
    "name": "prefix",
    "memberof": "src/services/common/plugins.js~Plugins",
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#prefix",
    "access": "public",
    "description": "The prefix the dependencies need to have in order to be identified as plugins.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 362,
    "kind": "member",
    "name": "app",
    "memberof": "src/services/common/plugins.js~Plugins",
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#app",
    "access": "public",
    "description": "The local reference to the main app.",
    "lineNumber": 25,
    "type": {
      "nullable": null,
      "types": [
        "Woopack"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 363,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/common/plugins.js~Plugins",
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 30,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 364,
    "kind": "member",
    "name": "packageInfo",
    "memberof": "src/services/common/plugins.js~Plugins",
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#packageInfo",
    "access": "public",
    "description": "The implementation `package.json`",
    "lineNumber": 35,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 365,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/common/plugins.js~Plugins",
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 40,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 366,
    "kind": "method",
    "name": "load",
    "memberof": "src/services/common/plugins.js~Plugins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#load",
    "access": "public",
    "description": "Load all the plugins.",
    "lineNumber": 49,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "dependencies",
        "description": "Whether or not to look for plugins on the\n                                         `dependencies`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "devDependencies",
        "description": "Whether or not to look for plugins on the\n                                         `devDependencies`."
      }
    ],
    "return": null
  },
  {
    "__docId__": 367,
    "kind": "method",
    "name": "_loadPlugin",
    "memberof": "src/services/common/plugins.js~Plugins",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/plugins.js~Plugins#_loadPlugin",
    "access": "protected",
    "description": "Load a plugin by its package name.",
    "lineNumber": 70,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "packageName",
        "description": "The name of the plugin."
      }
    ],
    "throws": [
      {
        "types": [
          "Error"
        ],
        "description": "If the plugin can't be loaded or registered."
      }
    ],
    "return": null
  },
  {
    "__docId__": 368,
    "kind": "function",
    "name": "plugins",
    "memberof": "src/services/common/plugins.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/common/plugins.js~plugins",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/plugins.js",
    "importStyle": "{plugins}",
    "description": "Generate a `Provider` with an already defined prefix for the plugins.",
    "examples": [
      "// Generate the provider\nconst provider = plugins('my-plugin-');\n// Register it on the container\ncontainer.register(provider);\n// Getting access to the service instance\nconst plugins = container.get('plugins');"
    ],
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "The prefix the dependencies need to have in order to\n                       be identified as plugins."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 369,
    "kind": "file",
    "name": "src/services/common/versionUtils.js",
    "content": "const fs = require('fs-extra');\nconst shell = require('shelljs');\nconst { provider } = require('jimple');\n/**\n * A set of utilities to work with the version of the project.\n */\nclass VersionUtils {\n  /**\n   * Class constructor.\n   * @param {EnvironmentUtils} environmentUtils To read the environment variables.\n   * @param {Logger}           appLogger        To inform the user if something goes wrong.\n   * @param {PathUtils}        pathUtils        To build paths for the revision file.\n   */\n  constructor(environmentUtils, appLogger, pathUtils) {\n    /**\n     * A local reference for the `environmentUtils` service.\n     * @type {EnvironmentUtils}\n     */\n    this.environmentUtils = environmentUtils;\n    /**\n     * A local reference for the `appLogger` service.\n     * @type {Logger}\n     */\n    this.appLogger = appLogger;\n    /**\n     * A local reference for the `pathUtils` service.\n     * @type {PathUtils}\n     */\n    this.pathUtils = pathUtils;\n    /**\n     * The default fallback version in case none can be retrieved.\n     * @type {string}\n     */\n    this.fallbackVersion = 'development';\n    /**\n     * This will be filled with the version on the revision file, if it exists.\n     * @type {null|string}\n     * @ignore\n     * @access protected\n     */\n    this._loadedVersion = null;\n  }\n  /**\n   * Get the version from an environment variable.\n   * @param {string}  environmentVariable The name of the environment variable.\n   * @param {boolean} [withFallback=true] If `true` and there's no version on the variable, it will\n   *                                       return the fallback version.\n   * @return {string}\n   */\n  getEnvironmentVersion(environmentVariable, withFallback = true) {\n    const fallback = withFallback ? this.fallbackVersion : undefined;\n    return this.environmentUtils.get(environmentVariable, fallback).trim();\n  }\n  /**\n   * Get the version from the revision file. If the revision file doesn't exist or can't be loaded,\n   * it will return an empty string.\n   * @param  {string} filename The path to the revision file.\n   * @return {string}\n   */\n  getVersionFromFile(filename) {\n    let version;\n    try {\n      const filepath = this.pathUtils.join(filename);\n      version = fs\n      .readFileSync(filepath, 'utf-8')\n      .trim();\n    } catch (e) {\n      version = '';\n    }\n\n    return version;\n  }\n  /**\n   * Look for a version on both the revision file and the environment variable.\n   * @param {string} revisionFilename    The path to the revision file.\n   * @param {string} environmentVariable The name of the environment variable.\n   * @return {string}\n   */\n  getVersion(revisionFilename, environmentVariable) {\n    if (!this._loadedVersion || this._loadedVersion === this.fallbackVersion) {\n      this._loadedVersion = this.getVersionFromFile(revisionFilename) ||\n        this.getEnvironmentVersion(environmentVariable);\n    }\n\n    return this._loadedVersion;\n  }\n  /**\n   * Create the revision file with either the version from the environment or, if the project is\n   * on a GIT repository, with the first `7` letters of the last commit hash.\n   * @param {string} revisionFilename    The path to where the revision file will be created.\n   * @param {string} environmentVariable The name of the environment variable.\n   * @return {Promise<string,Error>} If everything goes well, the promise will resolve with the\n   *                                 version the method wrote on the file.\n   */\n  createRevisionFile(revisionFilename, environmentVariable) {\n    let inRepository = true;\n    try {\n      fs.statSync('./.git');\n    } catch (e) {\n      inRepository = false;\n    }\n\n    let version = '';\n    const envVersion = this.getEnvironmentVersion(environmentVariable, false);\n    if (envVersion) {\n      version = envVersion;\n    } else if (shell.which('git') && inRepository) {\n      const commitHash = shell.exec('git rev-parse HEAD', { silent: true });\n      if (commitHash && commitHash.code === 0) {\n        const hashLength = 7;\n        version = commitHash.trim().substr(0, hashLength);\n      }\n    }\n\n    let write;\n    if (version) {\n      const filepath = this.pathUtils.join(revisionFilename);\n      write = fs.writeFile(filepath, version)\n      .then(() => {\n        this.appLogger.success(\n          `The revision file was successfully created (${filepath})`\n        );\n\n        return version;\n      })\n      .catch((error) => {\n        this.appLogger.error(\n          `There was an error creating the revision file (${filepath})`\n        );\n        return Promise.reject(error);\n      });\n    } else {\n      this.appLogger.error('The revision file couldn\\'t be created');\n      const errorMessage = 'The project is not running on a GIT environment and there\\'s no ' +\n        `${environmentVariable} variable set`;\n      write = Promise.reject(new Error(errorMessage));\n    }\n\n    return write;\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `VersionUtils` as the `versionUtils` service.\n * @example\n * // Register it on the container\n * container.register(versionUtils);\n * // Getting access to the service instance\n * const versionUtils = container.get('versionUtils');\n * @type {Provider}\n */\nconst versionUtils = provider((app) => {\n  app.set('versionUtils', () => new VersionUtils(\n    app.get('environmentUtils'),\n    app.get('appLogger'),\n    app.get('pathUtils')\n  ));\n});\n\nmodule.exports = {\n  VersionUtils,\n  versionUtils,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/common/versionUtils.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 370,
    "kind": "class",
    "name": "VersionUtils",
    "memberof": "src/services/common/versionUtils.js",
    "static": true,
    "longname": "src/services/common/versionUtils.js~VersionUtils",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/versionUtils.js",
    "importStyle": "{VersionUtils}",
    "description": "A set of utilities to work with the version of the project.",
    "lineNumber": 7,
    "interface": false
  },
  {
    "__docId__": 371,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 14,
    "params": [
      {
        "nullable": null,
        "types": [
          "EnvironmentUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentUtils",
        "description": "To read the environment variables."
      },
      {
        "nullable": null,
        "types": [
          "Logger"
        ],
        "spread": false,
        "optional": false,
        "name": "appLogger",
        "description": "To inform the user if something goes wrong."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "To build paths for the revision file."
      }
    ]
  },
  {
    "__docId__": 372,
    "kind": "member",
    "name": "environmentUtils",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#environmentUtils",
    "access": "public",
    "description": "A local reference for the `environmentUtils` service.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "EnvironmentUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 373,
    "kind": "member",
    "name": "appLogger",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#appLogger",
    "access": "public",
    "description": "A local reference for the `appLogger` service.",
    "lineNumber": 24,
    "type": {
      "nullable": null,
      "types": [
        "Logger"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 374,
    "kind": "member",
    "name": "pathUtils",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#pathUtils",
    "access": "public",
    "description": "A local reference for the `pathUtils` service.",
    "lineNumber": 29,
    "type": {
      "nullable": null,
      "types": [
        "PathUtils"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 375,
    "kind": "member",
    "name": "fallbackVersion",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#fallbackVersion",
    "access": "public",
    "description": "The default fallback version in case none can be retrieved.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 376,
    "kind": "member",
    "name": "_loadedVersion",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#_loadedVersion",
    "access": "protected",
    "description": "This will be filled with the version on the revision file, if it exists.",
    "lineNumber": 41,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "null",
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 377,
    "kind": "method",
    "name": "getEnvironmentVersion",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#getEnvironmentVersion",
    "access": "public",
    "description": "Get the version from an environment variable.",
    "lineNumber": 50,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentVariable",
        "description": "The name of the environment variable."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "withFallback",
        "description": "If `true` and there's no version on the variable, it will\n                                      return the fallback version."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 378,
    "kind": "method",
    "name": "getVersionFromFile",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#getVersionFromFile",
    "access": "public",
    "description": "Get the version from the revision file. If the revision file doesn't exist or can't be loaded,\nit will return an empty string.",
    "lineNumber": 60,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "filename",
        "description": "The path to the revision file."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 379,
    "kind": "method",
    "name": "getVersion",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#getVersion",
    "access": "public",
    "description": "Look for a version on both the revision file and the environment variable.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "revisionFilename",
        "description": "The path to the revision file."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentVariable",
        "description": "The name of the environment variable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 381,
    "kind": "method",
    "name": "createRevisionFile",
    "memberof": "src/services/common/versionUtils.js~VersionUtils",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/common/versionUtils.js~VersionUtils#createRevisionFile",
    "access": "public",
    "description": "Create the revision file with either the version from the environment or, if the project is\non a GIT repository, with the first `7` letters of the last commit hash.",
    "lineNumber": 95,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "revisionFilename",
        "description": "The path to where the revision file will be created."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "environmentVariable",
        "description": "The name of the environment variable."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<string,Error>"
      ],
      "spread": false,
      "description": "If everything goes well, the promise will resolve with the\n                                version the method wrote on the file."
    }
  },
  {
    "__docId__": 382,
    "kind": "variable",
    "name": "versionUtils",
    "memberof": "src/services/common/versionUtils.js",
    "static": true,
    "longname": "src/services/common/versionUtils.js~versionUtils",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/common/versionUtils.js",
    "importStyle": "{versionUtils}",
    "description": "The service provider that once registered on the app container will set an instance of\n`VersionUtils` as the `versionUtils` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(versionUtils);\n// Getting access to the service instance\nconst versionUtils = container.get('versionUtils');"
    ],
    "lineNumber": 152,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 383,
    "kind": "file",
    "name": "src/services/configurations/babelConfiguration.js",
    "content": "const { provider } = require('jimple');\n/**\n * This service is in charge of creating Babel configurations for targets.\n */\nclass BabelConfiguration {\n  /**\n   * Class constructor.\n   * @param {Events} events To reduce the configurations.\n   */\n  constructor(events) {\n    /**\n     * A local reference for the `events` service.\n     * @type {Events}\n     */\n    this.events = events;\n    /**\n     * A dictionary with familiar names for Babel plugins.\n     * @type {Object}\n     */\n    this.plugins = {\n      properties: 'transform-class-properties',\n      decorators: 'transform-decorators-legacy',\n    };\n  }\n  /**\n   * Get a Babel configuration for a target.\n   * This method uses the event reducer `babel-configuration`, which sends a Babel configuration\n   * and a target information, and expects a Babel configuration on return.\n   * @param {Target} target The target information.\n   * @return {Object}\n   */\n  getConfigForTarget(target) {\n    // Get the target settings we need\n    const {\n      babel: {\n        features,\n        nodeVersion,\n        browserVersions,\n        mobileSupport,\n        overwrites,\n      },\n      flow,\n    } = target;\n    // Define the configuration we are going to _'update'_.\n    const config = Object.assign({}, overwrites || {});\n    // Define the list of presets.\n    const presets = config.presets || [];\n    // Define the list of plugins.\n    const plugins = config.plugins || [];\n    // Check whether or not the presets include the `env` preset.\n    const hasEnv = presets\n    .find((preset) => (Array.isArray(preset) && preset[0] === 'env'));\n\n    // If it doesn't have the `env` preset...\n    if (!hasEnv) {\n      // ...define the preset targets depending on the target type.\n      const presetTargets = {};\n      if (target.is.browser) {\n        const browsers = ['chrome', 'safari', 'edge', 'firefox'];\n        if (mobileSupport) {\n          browsers.push(...['ios', 'android']);\n        }\n\n        presetTargets.browsers = browsers\n        .map((browser) => `last ${browserVersions} ${browser} versions`);\n      } else {\n        presetTargets.node = nodeVersion;\n      }\n      // Push the new `env` preset on top of the list.\n      presets.unshift(['env', { targets: presetTargets }]);\n    }\n    // Check if the configuration should include any _'known plugin'_.\n    features.forEach((feature) => {\n      const featurePlugin = this.plugins[feature];\n      if (!plugins.includes(featurePlugin)) {\n        plugins.push(featurePlugin);\n      }\n    });\n\n    /**\n     * Check if the target uses flow, which forces the configuration to use the `flow` preset and\n     * the _'properties'_ plugin.\n     */\n    if (flow) {\n      presets.push(['flow']);\n      if (!plugins.includes(this.plugins.properties)) {\n        plugins.push(this.plugins.properties);\n      }\n    }\n\n    // Set both presets and plugins back on the config.\n    config.presets = presets;\n    config.plugins = plugins;\n    // Return a reduced configuration\n    return this.events.reduce('babel-configuration', config, target);\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `BabelConfiguration` as the `babelConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(babelConfiguration);\n * // Getting access to the service instance\n * const babelConfiguration = container.get('babelConfiguration');\n * @type {Provider}\n */\nconst babelConfiguration = provider((app) => {\n  app.set('babelConfiguration', () => new BabelConfiguration(\n    app.get('events')\n  ));\n});\n\nmodule.exports = {\n  BabelConfiguration,\n  babelConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/configurations/babelConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 384,
    "kind": "class",
    "name": "BabelConfiguration",
    "memberof": "src/services/configurations/babelConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/babelConfiguration.js~BabelConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/babelConfiguration.js",
    "importStyle": "{BabelConfiguration}",
    "description": "This service is in charge of creating Babel configurations for targets.",
    "lineNumber": 5,
    "interface": false
  },
  {
    "__docId__": 385,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/babelConfiguration.js~BabelConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/babelConfiguration.js~BabelConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 10,
    "params": [
      {
        "nullable": null,
        "types": [
          "Events"
        ],
        "spread": false,
        "optional": false,
        "name": "events",
        "description": "To reduce the configurations."
      }
    ]
  },
  {
    "__docId__": 386,
    "kind": "member",
    "name": "events",
    "memberof": "src/services/configurations/babelConfiguration.js~BabelConfiguration",
    "static": false,
    "longname": "src/services/configurations/babelConfiguration.js~BabelConfiguration#events",
    "access": "public",
    "description": "A local reference for the `events` service.",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "Events"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 387,
    "kind": "member",
    "name": "plugins",
    "memberof": "src/services/configurations/babelConfiguration.js~BabelConfiguration",
    "static": false,
    "longname": "src/services/configurations/babelConfiguration.js~BabelConfiguration#plugins",
    "access": "public",
    "description": "A dictionary with familiar names for Babel plugins.",
    "lineNumber": 20,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 388,
    "kind": "method",
    "name": "getConfigForTarget",
    "memberof": "src/services/configurations/babelConfiguration.js~BabelConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/babelConfiguration.js~BabelConfiguration#getConfigForTarget",
    "access": "public",
    "description": "Get a Babel configuration for a target.\nThis method uses the event reducer `babel-configuration`, which sends a Babel configuration\nand a target information, and expects a Babel configuration on return.",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 389,
    "kind": "variable",
    "name": "babelConfiguration",
    "memberof": "src/services/configurations/babelConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/babelConfiguration.js~babelConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/babelConfiguration.js",
    "importStyle": "{babelConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`BabelConfiguration` as the `babelConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(babelConfiguration);\n// Getting access to the service instance\nconst babelConfiguration = container.get('babelConfiguration');"
    ],
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 390,
    "kind": "file",
    "name": "src/services/configurations/index.js",
    "content": "const { babelConfiguration } = require('./babelConfiguration');\nconst { projectConfiguration } = require('./projectConfiguration');\nconst { targetConfiguration } = require('./targetConfiguration');\n\nmodule.exports = {\n  babelConfiguration,\n  projectConfiguration,\n  targetConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/configurations/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 391,
    "kind": "file",
    "name": "src/services/configurations/projectConfiguration.js",
    "content": "const { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * Here's the configuration with all the _'magic defaults'_ the app uses. This service generates\n * the project configuration with all settings and features Woopack uses.\n * This configuration is ALWAYS overwritten and extended in order to define the targets.\n * @extends {ConfigurationFile}\n */\nclass ProjectConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {PathUtils} pathUtils Because `ConfigurationFile` needs it in order to build the\n   *                              overwrite path.\n   */\n  constructor(pathUtils) {\n    // Set the overwrite file path.\n    super(pathUtils, 'project.config.js');\n  }\n  /**\n   * Create the project configuration with all its _'smart defaults'_.\n   * @return {ProjectConfigurationSettings}\n   */\n  createConfig() {\n    return {\n      paths: {\n        source: 'src',\n        build: 'dist',\n        privateModules: 'private',\n        output: {\n          js: 'statics/js',\n          fonts: 'statics/fonts',\n          css: 'statics/css',\n          images: 'statics/img',\n        },\n      },\n      targetsTemplates: {\n        node: {\n          type: 'node',\n          bundle: false,\n          transpile: false,\n          engine: 'webpack',\n          hasFolder: true,\n          createFolder: false,\n          folder: '',\n          entry: {\n            development: 'start.development.js',\n            production: 'start.production.js',\n          },\n          runOnDevelopment: false,\n          babel: {\n            features: [],\n            nodeVersion: 'current',\n            overwrites: {},\n          },\n          flow: false,\n          library: false,\n          libraryOptions: {},\n          cleanBeforeBuild: true,\n        },\n        browser: {\n          type: 'browser',\n          engine: 'webpack',\n          hasFolder: true,\n          createFolder: true,\n          folder: '',\n          entry: {\n            development: 'index.js',\n            production: 'index.js',\n          },\n          sourceMap: {\n            development: false,\n            production: true,\n          },\n          html: {\n            template: 'index.html',\n            filename: 'index.html',\n          },\n          runOnDevelopment: false,\n          babel: {\n            features: [],\n            browserVersions: 2,\n            mobileSupport: true,\n            polyfill: true,\n            overwrites: {},\n          },\n          flow: false,\n          CSSModules: false,\n          hotReload: false,\n          library: false,\n          libraryOptions: {},\n          cleanBeforeBuild: true,\n          devServer: {\n            port: 2509,\n            reload: true,\n          },\n          configuration: {\n            enabled: false,\n            default: null,\n            path: 'config/',\n            hasFolder: true,\n            defineOn: 'process.env.CONFIG',\n            environmentVariable: 'CONFIG',\n            loadFromEnvironment: true,\n            filenameFormat: '[target-name].[configuration-name].config.js',\n          },\n        },\n      },\n      targets: {},\n      copy: {\n        enabled: false,\n        items: [],\n        copyOnBuild: {\n          enabled: true,\n          onlyOnProduction: true,\n          targets: [],\n        },\n      },\n      version: {\n        defineOn: 'process.env.VERSION',\n        environmentVariable: 'VERSION',\n        revision: {\n          enabled: false,\n          copy: true,\n          filename: 'revision',\n          createRevisionOnBuild: {\n            enabled: true,\n            onlyOnProduction: true,\n            targets: [],\n          },\n        },\n      },\n      others: {\n        watch: {\n          poll: true,\n        },\n      },\n    };\n  }\n}\n/**\n * The service provider that once registered on the app container will set an instance of\n * `ProjectConfiguration` as the `projectConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(projectConfiguration);\n * // Getting access to the service instance\n * const projectConfiguration = container.get('projectConfiguration');\n * @type {Provider}\n */\nconst projectConfiguration = provider((app) => {\n  app.set('projectConfiguration', () => new ProjectConfiguration(\n    app.get('pathUtils')\n  ));\n});\n\nmodule.exports = {\n  ProjectConfiguration,\n  projectConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/configurations/projectConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 392,
    "kind": "class",
    "name": "ProjectConfiguration",
    "memberof": "src/services/configurations/projectConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/projectConfiguration.js~ProjectConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/projectConfiguration.js",
    "importStyle": "{ProjectConfiguration}",
    "description": "Here's the configuration with all the _'magic defaults'_ the app uses. This service generates\nthe project configuration with all settings and features Woopack uses.\nThis configuration is ALWAYS overwritten and extended in order to define the targets.",
    "lineNumber": 9,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 393,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/projectConfiguration.js~ProjectConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/projectConfiguration.js~ProjectConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 15,
    "params": [
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Because `ConfigurationFile` needs it in order to build the\n                             overwrite path."
      }
    ]
  },
  {
    "__docId__": 394,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/projectConfiguration.js~ProjectConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/projectConfiguration.js~ProjectConfiguration#createConfig",
    "access": "public",
    "description": "Create the project configuration with all its _'smart defaults'_.",
    "lineNumber": 23,
    "return": {
      "nullable": null,
      "types": [
        "ProjectConfigurationSettings"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 395,
    "kind": "variable",
    "name": "projectConfiguration",
    "memberof": "src/services/configurations/projectConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/projectConfiguration.js~projectConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/projectConfiguration.js",
    "importStyle": "{projectConfiguration}",
    "description": "The service provider that once registered on the app container will set an instance of\n`ProjectConfiguration` as the `projectConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(projectConfiguration);\n// Getting access to the service instance\nconst projectConfiguration = container.get('projectConfiguration');"
    ],
    "lineNumber": 150,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 396,
    "kind": "file",
    "name": "src/services/configurations/targetConfiguration.js",
    "content": "const { provider } = require('jimple');\nconst ConfigurationFile = require('../../abstracts/configurationFile');\n/**\n * This is a _'tricky'_ service as it only exists to be overwritten. It was created as a dynamic\n * way for a target to extend any configuration. It's service provider returns a function instead\n * of an instance, in which the plugin/service defines any path and then the service gets\n * instantiated.\n * @extends {ConfigurationFile}\n */\nclass TargetConfiguration extends ConfigurationFile {\n  /**\n   * Class constructor.\n   * @param {string}            overwritePath     The path to the overwrite file.\n   * @param {ConfigurationFile} baseConfiguration The configuration this will be extending.\n   * @param {PathUtils}         pathUtils         Because `ConfigurationFile` needs it in order to\n   *                                              build the overwrite path.`\n   */\n  constructor(overwritePath, baseConfiguration, pathUtils) {\n    super(pathUtils, overwritePath, true, baseConfiguration);\n  }\n  /**\n   * Return an empty object just to comply with the interface.\n   * @return {Object}\n   */\n  createConfig() {\n    return {};\n  }\n}\n/**\n * The service provider that once registered on the app container will set an function to get\n * instance of `TargetConfiguration` as the `targetConfiguration` service.\n * @example\n * // Register it on the container\n * container.register(targetConfiguration);\n * // Getting access to the service function\n * const targetConfiguration = container.get('targetConfiguration');\n * // Generating an instance for an specific configurations\n * const myNewConfig = targetConfiguration('./overwrite-path.js', configToExtend).getConfig();\n * @type {Provider}\n */\nconst targetConfiguration = provider((app) => {\n  app.set('targetConfiguration', () => (\n    overwritePath,\n    baseConfiguration\n  ) => new TargetConfiguration(\n    overwritePath,\n    baseConfiguration,\n    app.get('pathUtils')\n  ));\n});\n\nmodule.exports = {\n  TargetConfiguration,\n  targetConfiguration,\n};\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/services/configurations/targetConfiguration.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 397,
    "kind": "class",
    "name": "TargetConfiguration",
    "memberof": "src/services/configurations/targetConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/targetConfiguration.js~TargetConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/targetConfiguration.js",
    "importStyle": "{TargetConfiguration}",
    "description": "This is a _'tricky'_ service as it only exists to be overwritten. It was created as a dynamic\nway for a target to extend any configuration. It's service provider returns a function instead\nof an instance, in which the plugin/service defines any path and then the service gets\ninstantiated.",
    "lineNumber": 10,
    "interface": false,
    "extends": [
      "ConfigurationFile"
    ]
  },
  {
    "__docId__": 398,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/services/configurations/targetConfiguration.js~TargetConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/targetConfiguration.js~TargetConfiguration#constructor",
    "access": "public",
    "description": "Class constructor.",
    "lineNumber": 18,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "overwritePath",
        "description": "The path to the overwrite file."
      },
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "baseConfiguration",
        "description": "The configuration this will be extending."
      },
      {
        "nullable": null,
        "types": [
          "PathUtils"
        ],
        "spread": false,
        "optional": false,
        "name": "pathUtils",
        "description": "Because `ConfigurationFile` needs it in order to\n                                             build the overwrite path.`"
      }
    ]
  },
  {
    "__docId__": 399,
    "kind": "method",
    "name": "createConfig",
    "memberof": "src/services/configurations/targetConfiguration.js~TargetConfiguration",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/services/configurations/targetConfiguration.js~TargetConfiguration#createConfig",
    "access": "public",
    "description": "Return an empty object just to comply with the interface.",
    "lineNumber": 25,
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 400,
    "kind": "variable",
    "name": "targetConfiguration",
    "memberof": "src/services/configurations/targetConfiguration.js",
    "static": true,
    "longname": "src/services/configurations/targetConfiguration.js~targetConfiguration",
    "access": "public",
    "export": true,
    "importPath": "woopack/src/services/configurations/targetConfiguration.js",
    "importStyle": "{targetConfiguration}",
    "description": "The service provider that once registered on the app container will set an function to get\ninstance of `TargetConfiguration` as the `targetConfiguration` service.",
    "examples": [
      "// Register it on the container\ncontainer.register(targetConfiguration);\n// Getting access to the service function\nconst targetConfiguration = container.get('targetConfiguration');\n// Generating an instance for an specific configurations\nconst myNewConfig = targetConfiguration('./overwrite-path.js', configToExtend).getConfig();"
    ],
    "lineNumber": 41,
    "type": {
      "nullable": null,
      "types": [
        "Provider"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 401,
    "kind": "file",
    "name": "src/typedef.js",
    "content": "/**\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n */\n\n/**\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n */\n\n/**\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n */\n\n/**\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n */\n\n/**\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n */\n\n/**\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n */\n\n/**\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n */\n\n/**\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n */\n\n/**\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n */\n\n/**\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n */\n\n/**\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n */\n\n/**\n * @typedef {Object} TargetLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2`, `umd` and `window`\n */\n\n/**\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n */\n\n/**\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n */\n\n/**\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n */\n\n/**\n * @typedef {Object} NodeTargetBabelSettings\n * @property {Array}  [features=[]]\n * woopack includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, woopack uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by woopack, you can use this\n * setting to overwrite/add any value you may need.\n */\n\n/**\n * @typedef {Object} BrowserTargetBabelSettings\n * @property {Array}  [features=[]]\n * woopack includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, woopack uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by woopack, you can use this\n * setting to overwrite/add any value you may need.\n */\n\n/**\n * @typedef {Object} BrowserTargetDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the server when the code changes.\n */\n\n/**\n * @typedef {Object} BrowserTargetConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable woopack will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not woopack should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationOutputPathSettings\n * @property {string} [js='static/js']\n * The path to generated Javascript files on the distribution directory.\n * @property {string} [fonts='static/fonts']\n * The path to font files once they are moved to the distribution directory.\n * @property {string} [css='static/css']\n * The path to generated stylesheets on the distribution directory.\n * @property {string} [images='static/img']\n * The path to font files once they are moved to the distribution directory.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, woopack will save that module (without its\n * dependencies) on that folder.\n * @property {ProjectConfigurationOutputPathSettings} [output]\n * These are paths for static assets that may be generated when bundling a target.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateEntries\n * @property {string} [development='start.development.js']\n * The target entry point on a development build.\n * @property {string} [production='start.production.js']\n * The target entry point on a production build.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell woopack which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationNodeTargetTemplateEntries} [entry]\n * The target entry points for each specific environment build.\n * @property {boolean} [runOnDevelopment=false]\n * This tells woopack that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {NodeTargetBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {TargetLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n */\n\n/**\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell woopack which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationNodeTargetTemplateEntries} entry\n * The target entry points for each specific environment build.\n * @property {boolean} runOnDevelopment\n * This tells woopack that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {NodeTargetBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {TargetLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateEntries\n * @property {string} [development='index.js']\n * The target entry point on a development build.\n * @property {string} [production='index.js']\n * The target entry point on a production build.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [template='index.html']\n * The file inside your target source that will be used to generate the `html`.\n * @property {string} [filename='index.html']\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell woopack which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationBrowserTargetTemplateEntries} [entry]\n * The target entry points for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {BrowserTargetBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [CSSModules=false]\n * Whether or not your application uses CSS Modules.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {TargetLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {BrowserTargetDevServerSettings} [devServer]\n * These are the options for the `http` server woopack will use when running the target on a\n * development environment.\n * @property {BrowserTargetConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n */\n\n/**\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell woopack which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationBrowserTargetTemplateEntries} entry\n * The target entry points for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {BrowserTargetBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} CSSModules\n * Whether or not your application uses CSS Modules.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {TargetLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {BrowserTargetDevServerSettings} devServer\n * These are the options for the `http` server woopack will use when running the target on a\n * development environment.\n * @property {BrowserTargetConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n */\n\n/**\n * @typedef {BrowserTarget|NodeTarget} Target\n */\n\n/**\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n */\n\n/**\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells woopack if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the woopack CLI, you can configure how the feature\n * behaves when building.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the woopack CLI, you can configure how the feature\n * behaves when building.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable woopack should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationWatchSettings}\n * This is used by woopack to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n */\n\n/**\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow woopack\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables woopack to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n */\n\n/**\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @return {string}\n * The command the shell script will use to build the target.\n */\n\n/**\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by woopack in order to get the shell comands to build and/or run a target.\n */\n\n/**\n * @typedef {function} ProviderRegisterMethod\n * @param {Woopack} app\n * A reference to the woopack dependency injection container.\n */\n\n/**\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by Woopack when registering the provider.\n */\n",
    "static": true,
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/src/typedef.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 402,
    "kind": "external",
    "name": "Jimple",
    "externalLink": "https://yarnpkg.com/en/package/jimple",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Jimple",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 403,
    "kind": "external",
    "name": "Nodemon",
    "externalLink": "https://github.com/remy/nodemon/blob/master/doc/requireable.md",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Nodemon",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 404,
    "kind": "external",
    "name": "Command",
    "externalLink": "https://tj.github.io/commander.js/#Command",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Command",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 405,
    "kind": "external",
    "name": "Watchpack",
    "externalLink": "https://yarnpkg.com/en/package/watchpack",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Watchpack",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 406,
    "kind": "external",
    "name": "AppConfiguration",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~AppConfiguration",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 407,
    "kind": "external",
    "name": "PathUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~PathUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 408,
    "kind": "external",
    "name": "Logger",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Logger",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 409,
    "kind": "external",
    "name": "EnvironmentUtils",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~EnvironmentUtils",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 410,
    "kind": "external",
    "name": "EventsHub",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~EventsHub",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 411,
    "kind": "external",
    "name": "ErrorHandler",
    "externalLink": "https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ErrorHandler",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 412,
    "kind": "external",
    "name": "RootRequire",
    "externalLink": "https://homer0.github.io/wootils/function/index.html#static-function-rootRequire",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~RootRequire",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 413,
    "kind": "typedef",
    "name": "TargetLibraryOptions",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetLibraryOptions",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'commonjs2'",
        "defaultRaw": "'commonjs2'",
        "name": "libraryTarget",
        "description": "How the library will be exposed: `commonjs2`, `umd` and `window`"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetLibraryOptions"
    }
  },
  {
    "__docId__": 414,
    "kind": "typedef",
    "name": "TargetTypeCheck",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetTypeCheck",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": "Whether the target type is `node` or not."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "browser",
        "description": "Whether the target type is `browser` or not."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetTypeCheck"
    }
  },
  {
    "__docId__": 415,
    "kind": "typedef",
    "name": "TargetPaths",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetPaths",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The absolute path to the target source directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "The absolute path to the folder, inside the distribution directory, where the target will be\nbundled/copied."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetPaths"
    }
  },
  {
    "__docId__": 416,
    "kind": "typedef",
    "name": "TargetFolders",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetFolders",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "source",
        "description": "The relative path to the target source directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "build",
        "description": "The relative path to the folder, inside the distribution directory, where the target will be\nbundled/copied."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "TargetFolders"
    }
  },
  {
    "__docId__": 417,
    "kind": "typedef",
    "name": "NodeTargetBabelSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~NodeTargetBabelSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "features",
        "description": "woopack includes by default two Babel plugins: `transform-class-properties` and\n`transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\nto include them.\nIf you need other plugins, they can be included on the `overwrites` option."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'current'",
        "defaultRaw": "'current'",
        "name": "nodeVersion",
        "description": "When building the Babel configuration, woopack uses the `babel-preset-env` to just include the\nnecessary stuff. This setting tells the preset the version of Node it should _\"complete\"_."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "overwrites",
        "description": "If you know how to use Babel and need stuff that is not covered by woopack, you can use this\nsetting to overwrite/add any value you may need."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NodeTargetBabelSettings"
    }
  },
  {
    "__docId__": 418,
    "kind": "typedef",
    "name": "BrowserTargetBabelSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BrowserTargetBabelSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "features",
        "description": "woopack includes by default two Babel plugins: `transform-class-properties` and\n`transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\nto include them.\nIf you need other plugins, they can be included on the `overwrites` option."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "browserVersions",
        "description": "When building the Babel configuration, woopack uses the `babel-preset-env` to just include the\nnecessary stuff. This setting tells how many old versions of the major browsers the target needs\ntranspilation for.\nMajor browsers: Firefox, Chrome, Safari and Edge."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "mobileSupport",
        "description": "If `true`, the configuration will add to the list of major browsers `iOS` and `Android`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "polyfill",
        "description": "Whether or not the configuration should include the `babel-polyfill` package."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "overwrites",
        "description": "If you know how to use Babel and need stuff that is not covered by woopack, you can use this\nsetting to overwrite/add any value you may need."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BrowserTargetBabelSettings"
    }
  },
  {
    "__docId__": 419,
    "kind": "typedef",
    "name": "BrowserTargetDevServerSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BrowserTargetDevServerSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2509",
        "defaultRaw": 2509,
        "name": "port",
        "description": "The server port."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "reload",
        "description": "Whether or not to reload the server when the code changes."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BrowserTargetDevServerSettings"
    }
  },
  {
    "__docId__": 420,
    "kind": "typedef",
    "name": "BrowserTargetConfigurationSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BrowserTargetConfigurationSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "enabled",
        "description": "Whether or not the feature is enabled."
      },
      {
        "nullable": null,
        "types": [
          "null",
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "null",
        "defaultRaw": null,
        "name": "default",
        "description": "The default configuration. If none is specified, when the target is builded, it will try to\nuse `[target-name].config.js`, located on the configuration folder."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'config/'",
        "defaultRaw": "'config/'",
        "name": "path",
        "description": "The path where the configuration files are located."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hasFolder",
        "description": "Whether or not there's a folder with the target name on the configuration path."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'process.env.CONFIG'",
        "defaultRaw": "'process.env.CONFIG'",
        "name": "defineOn",
        "description": "The name of the variable where the configuration is going to be replaced on your code when\nbundled."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'CONFIG'",
        "defaultRaw": "'CONFIG'",
        "name": "environmentVariable",
        "description": "The name of the environment variable woopack will check when building the target in order to\nload a dynamic configuration."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "loadFromEnvironment",
        "description": "Whether or not woopack should check for the environment variable value."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'[target-name].[configuration-name].config.js'",
        "defaultRaw": "'[target-name].[configuration-name].config.js'",
        "name": "filenameFormat",
        "description": "The name format of the configuration files."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BrowserTargetConfigurationSettings"
    }
  },
  {
    "__docId__": 421,
    "kind": "typedef",
    "name": "ProjectConfigurationOutputPathSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationOutputPathSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'static/js'",
        "defaultRaw": "'static/js'",
        "name": "js",
        "description": "The path to generated Javascript files on the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'static/fonts'",
        "defaultRaw": "'static/fonts'",
        "name": "fonts",
        "description": "The path to font files once they are moved to the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'static/css'",
        "defaultRaw": "'static/css'",
        "name": "css",
        "description": "The path to generated stylesheets on the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'static/img'",
        "defaultRaw": "'static/img'",
        "name": "images",
        "description": "The path to font files once they are moved to the distribution directory."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationOutputPathSettings"
    }
  },
  {
    "__docId__": 422,
    "kind": "typedef",
    "name": "ProjectConfigurationPathSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationPathSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'src'",
        "defaultRaw": "'src'",
        "name": "source",
        "description": "The directory, relative to your project path, where your targets code is located. On the\ndocumentation is often referred as the _\"source directory\"_."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'dist'",
        "defaultRaw": "'dist'",
        "name": "build",
        "description": "The directory, relative to your project path, where your targets bundled code will be located.\nOn the documentation is often referred as the _\"distribution directory\"_."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'private'",
        "defaultRaw": "'private'",
        "name": "privateModules",
        "description": "This is for the feature that copies when bundling. In case you are using the feature to copy an\nnpm module that, let's say, is not published, woopack will save that module (without its\ndependencies) on that folder."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationOutputPathSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "output",
        "description": "These are paths for static assets that may be generated when bundling a target."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationPathSettings"
    }
  },
  {
    "__docId__": 423,
    "kind": "typedef",
    "name": "ProjectConfigurationNodeTargetTemplateEntries",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationNodeTargetTemplateEntries",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'start.development.js'",
        "defaultRaw": "'start.development.js'",
        "name": "development",
        "description": "The target entry point on a development build."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'start.production.js'",
        "defaultRaw": "'start.production.js'",
        "name": "production",
        "description": "The target entry point on a production build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationNodeTargetTemplateEntries"
    }
  },
  {
    "__docId__": 424,
    "kind": "typedef",
    "name": "ProjectConfigurationNodeTargetTemplate",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationNodeTargetTemplate",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "bundle",
        "description": "Whether or not the target needs to be bundled.\nIf the value is `false`, when running on a development environment, and if the target doesn't\nneed transpilation, the code won't be moved to the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "transpile",
        "description": "This option is kind of tied to the previous one: You may not want to bundle your Node target,\nbut you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\nsupported by the runtime."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'webpack'",
        "defaultRaw": "'webpack'",
        "name": "engine",
        "description": "In case `bundle` is `true`, this will tell woopack which build engine you are going to bundle\nthe target code with."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hasFolder",
        "description": "Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\nthe contents of the source directory are your target code (useful when working with a single\ntarget)."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "createFolder",
        "description": "Whether or not to create a folder for your targets code on the distribution directory when the\ntarget is bundled/copied."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "folder",
        "description": "If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\nfolder name than the target's name."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationNodeTargetTemplateEntries"
        ],
        "spread": false,
        "optional": true,
        "name": "entry",
        "description": "The target entry points for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "runOnDevelopment",
        "description": "This tells woopack that when the target is builded (bundled/copied) on a development\nenvironment, it should execute it."
      },
      {
        "nullable": null,
        "types": [
          "NodeTargetBabelSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "babel",
        "description": "The target transpilation options."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "flow",
        "description": "Whether or not your target uses [flow](https://flow.org/). This will update the Babel\nconfiguration in order to add support and, in case it was disabled, it will enable transpilation."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "library",
        "description": "If the project is bundled, this will tell the build engine that it needs to be builded as a\nlibrary to be `require`d."
      },
      {
        "nullable": null,
        "types": [
          "TargetLibraryOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "libraryOptions",
        "description": "In case `library` is `true`, these options are going to be used by the build engine to configure\nyour library"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cleanBeforeBuild",
        "description": "Whether or not to remove all code from previous builds from the distribution directory when\nmaking a new build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationNodeTargetTemplate"
    }
  },
  {
    "__docId__": 425,
    "kind": "typedef",
    "name": "NodeTarget",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~NodeTarget",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "bundle",
        "description": "Whether or not the target needs to be bundled.\nIf the value is `false`, when running on a development environment, and if the target doesn't\nneed transpilation, the code won't be moved to the distribution directory."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "transpile",
        "description": "This option is kind of tied to the previous one: You may not want to bundle your Node target,\nbut you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\nsupported by the runtime."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "In case `bundle` is `true`, this will tell woopack which build engine you are going to bundle\nthe target code with."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hasFolder",
        "description": "Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\nthe contents of the source directory are your target code (useful when working with a single\ntarget)."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "createFolder",
        "description": "Whether or not to create a folder for your targets code on the distribution directory when the\ntarget is bundled/copied."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "folder",
        "description": "If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\nfolder name than the target's name."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationNodeTargetTemplateEntries"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "The target entry points for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "runOnDevelopment",
        "description": "This tells woopack that when the target is builded (bundled/copied) on a development\nenvironment, it should execute it."
      },
      {
        "nullable": null,
        "types": [
          "NodeTargetBabelSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "babel",
        "description": "The target transpilation options."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flow",
        "description": "Whether or not your target uses [flow](https://flow.org/). This will update the Babel\nconfiguration in order to add support and, in case it was disabled, it will enable transpilation."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "library",
        "description": "If the project is bundled, this will tell the build engine that it needs to be builded as a\nlibrary to be `require`d."
      },
      {
        "nullable": null,
        "types": [
          "TargetLibraryOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "libraryOptions",
        "description": "In case `library` is `true`, these options are going to be used by the build engine to configure\nyour library"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "cleanBeforeBuild",
        "description": "Whether or not to remove all code from previous builds from the distribution directory when\nmaking a new build."
      },
      {
        "nullable": null,
        "types": [
          "TargetTypeCheck"
        ],
        "spread": false,
        "optional": false,
        "name": "is",
        "description": "To check whether the target type is `node` or `browser`"
      },
      {
        "nullable": null,
        "types": [
          "TargetPaths"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The target absolute paths to both the source directory folder and the distribution directory\nfolder."
      },
      {
        "nullable": null,
        "types": [
          "TargetFolders"
        ],
        "spread": false,
        "optional": false,
        "name": "folders",
        "description": "The target relative paths to both the source directory folder and the distribution directory\nfolder."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "NodeTarget"
    }
  },
  {
    "__docId__": 426,
    "kind": "typedef",
    "name": "ProjectConfigurationBrowserTargetTemplateEntries",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationBrowserTargetTemplateEntries",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.js'",
        "defaultRaw": "'index.js'",
        "name": "development",
        "description": "The target entry point on a development build."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.js'",
        "defaultRaw": "'index.js'",
        "name": "production",
        "description": "The target entry point on a production build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationBrowserTargetTemplateEntries"
    }
  },
  {
    "__docId__": 427,
    "kind": "typedef",
    "name": "ProjectConfigurationBrowserTargetTemplateSourceMapSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationBrowserTargetTemplateSourceMapSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "development",
        "description": "Whether or not to generate a source map on a development build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "production",
        "description": "Whether or not to generate a source map on a production build."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationBrowserTargetTemplateSourceMapSettings"
    }
  },
  {
    "__docId__": 428,
    "kind": "typedef",
    "name": "ProjectConfigurationBrowserTargetTemplateHTMLSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationBrowserTargetTemplateHTMLSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "template",
        "description": "The file inside your target source that will be used to generate the `html`."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'index.html'",
        "defaultRaw": "'index.html'",
        "name": "filename",
        "description": "The file that will be generated when your target is bundled. It will automatically include\nthe `<script />` tag to the generated bundle."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationBrowserTargetTemplateHTMLSettings"
    }
  },
  {
    "__docId__": 429,
    "kind": "typedef",
    "name": "ProjectConfigurationBrowserTargetTemplate",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationBrowserTargetTemplate",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'webpack'",
        "defaultRaw": "'webpack'",
        "name": "engine",
        "description": "This will tell woopack which build engine you are going to bundle the target code with."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "hasFolder",
        "description": "Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\nthe contents of the source directory are your target code (useful when working with a single\ntarget)."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "createFolder",
        "description": "Whether or not to create a folder for your targets code on the distribution directory when the\ntarget is bundled/copied."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "''",
        "defaultRaw": "''",
        "name": "folder",
        "description": "If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\nfolder name than the target's name."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateEntries"
        ],
        "spread": false,
        "optional": true,
        "name": "entry",
        "description": "The target entry points for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateSourceMapSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "sourceMap",
        "description": "The target source map settings for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateHTMLSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "html",
        "description": "In the case the target is an app, these are the options for the `html` file that will include\nthe bundle `<script />`; and if your target is a library, this can be used to test your library."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "runOnDevelopment",
        "description": "This will tell the build engine that when you build the target for a development environment,\nit should bring up an `http` server to _\"run\"_ your target."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetBabelSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "babel",
        "description": "These options are used by the build engine to configure [Babel](https://babeljs.io):"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "flow",
        "description": "Whether or not your target uses [flow](https://flow.org/). This will update the Babel\nconfiguration in order to add support for it."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "CSSModules",
        "description": "Whether or not your application uses CSS Modules."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "library",
        "description": "This will tell the build engine that it needs to be builded as a library to be `require`d."
      },
      {
        "nullable": null,
        "types": [
          "TargetLibraryOptions"
        ],
        "spread": false,
        "optional": true,
        "name": "libraryOptions",
        "description": "In case `library` is `true`, these options are going to be used by the build engine to configure\nyour library."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "cleanBeforeBuild",
        "description": "Whether or not to remove all code from previous builds from the distribution directory when\nmaking a new build."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetDevServerSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "devServer",
        "description": "These are the options for the `http` server woopack will use when running the target on a\ndevelopment environment."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetConfigurationSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "configuration",
        "description": "These are the settings for the feature that allows a browser target to have a dynamic\nconfiguration file."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationBrowserTargetTemplate"
    }
  },
  {
    "__docId__": 430,
    "kind": "typedef",
    "name": "BrowserTarget",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BrowserTarget",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "engine",
        "description": "This will tell woopack which build engine you are going to bundle the target code with."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "hasFolder",
        "description": "Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\nthe contents of the source directory are your target code (useful when working with a single\ntarget)."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "createFolder",
        "description": "Whether or not to create a folder for your targets code on the distribution directory when the\ntarget is bundled/copied."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "folder",
        "description": "If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\nfolder name than the target's name."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateEntries"
        ],
        "spread": false,
        "optional": false,
        "name": "entry",
        "description": "The target entry points for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateSourceMapSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "sourceMap",
        "description": "The target source map settings for each specific environment build."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplateHTMLSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": "In the case the target is an app, these are the options for the `html` file that will include\nthe bundle `<script />`; and if your target is a library, this can be used to test your library."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "runOnDevelopment",
        "description": "This will tell the build engine that when you build the target for a development environment,\nit should bring up an `http` server to _\"run\"_ your target."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetBabelSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "babel",
        "description": "These options are used by the build engine to configure [Babel](https://babeljs.io):"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "flow",
        "description": "Whether or not your target uses [flow](https://flow.org/). This will update the Babel\nconfiguration in order to add support for it."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "CSSModules",
        "description": "Whether or not your application uses CSS Modules."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "library",
        "description": "This will tell the build engine that it needs to be builded as a library to be `require`d."
      },
      {
        "nullable": null,
        "types": [
          "TargetLibraryOptions"
        ],
        "spread": false,
        "optional": false,
        "name": "libraryOptions",
        "description": "In case `library` is `true`, these options are going to be used by the build engine to configure\nyour library."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "cleanBeforeBuild",
        "description": "Whether or not to remove all code from previous builds from the distribution directory when\nmaking a new build."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetDevServerSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "devServer",
        "description": "These are the options for the `http` server woopack will use when running the target on a\ndevelopment environment."
      },
      {
        "nullable": null,
        "types": [
          "BrowserTargetConfigurationSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "configuration",
        "description": "These are the settings for the feature that allows a browser target to have a dynamic\nconfiguration file."
      },
      {
        "nullable": null,
        "types": [
          "TargetTypeCheck"
        ],
        "spread": false,
        "optional": false,
        "name": "is",
        "description": "To check whether the target type is `node` or `browser`"
      },
      {
        "nullable": null,
        "types": [
          "TargetPaths"
        ],
        "spread": false,
        "optional": false,
        "name": "paths",
        "description": "The target absolute paths to both the source directory folder and the distribution directory\nfolder."
      },
      {
        "nullable": null,
        "types": [
          "TargetFolders"
        ],
        "spread": false,
        "optional": false,
        "name": "folders",
        "description": "The target relative paths to both the source directory folder and the distribution directory\nfolder."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BrowserTarget"
    }
  },
  {
    "__docId__": 431,
    "kind": "typedef",
    "name": "Target",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Target",
    "access": "public",
    "description": "",
    "type": {
      "types": [
        "BrowserTarget",
        "NodeTarget"
      ],
      "optional": false,
      "name": "Target"
    }
  },
  {
    "__docId__": 432,
    "kind": "typedef",
    "name": "TargetConfigurationCreator",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~TargetConfigurationCreator",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "overwritePath",
        "description": "The path to the file that can create the configuration."
      },
      {
        "nullable": null,
        "types": [
          "ConfigurationFile"
        ],
        "spread": false,
        "optional": false,
        "name": "baseConfiguration",
        "description": "The configuration service that will be extended."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "ConfigurationFile"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "TargetConfigurationCreator"
    }
  },
  {
    "__docId__": 433,
    "kind": "typedef",
    "name": "ProjectConfigurationTargetTemplates",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationTargetTemplates",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationNodeTargetTemplate"
        ],
        "spread": false,
        "optional": true,
        "name": "node",
        "description": "The template settings for all targets with the type `node`."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationBrowserTargetTemplate"
        ],
        "spread": false,
        "optional": true,
        "name": "browser",
        "description": "The template settings for all targets with the type `browser`."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationTargetTemplates"
    }
  },
  {
    "__docId__": 434,
    "kind": "typedef",
    "name": "ProjectConfigurationFeatureTriggerSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationFeatureTriggerSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "enabled",
        "description": "Whether or not the feature should be triggered when a target is being build."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "onlyOnProduction",
        "description": "This tells woopack if the feature should be triggered only when building for production, or if\nit should do it for development too."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "targets",
        "description": "This can be used to specify the targets that will trigger the feature when builded. If no target\nis specified, the feature will be triggered by all the targets."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationFeatureTriggerSettings"
    }
  },
  {
    "__docId__": 435,
    "kind": "typedef",
    "name": "ProjectConfigurationCopyFeatureSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationCopyFeatureSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "enabled",
        "description": "Whether or not the feature is enabled."
      },
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "[]",
        "defaultRaw": [],
        "name": "items",
        "description": "A list of files and/or directories that will be copied. All with paths relative to the project\ndirectory."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationFeatureTriggerSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "copyOnBuild",
        "description": "Since the feature is also available through the woopack CLI, you can configure how the feature\nbehaves when building."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationCopyFeatureSettings"
    }
  },
  {
    "__docId__": 436,
    "kind": "typedef",
    "name": "ProjectConfigurationVersionRevisionSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationVersionRevisionSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "enabled",
        "description": "Whether or not the revision file feature is enabled."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "copy",
        "description": "Whether or not to copy the revision file when the project files are being copied to the\ndistribution directory."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'revision'",
        "defaultRaw": "'revision'",
        "name": "filename",
        "description": "The name of the revision file."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationFeatureTriggerSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "createRevisionOnBuild",
        "description": "Since the feature is also available through the woopack CLI, you can configure how the feature\nbehaves when building."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationVersionRevisionSettings"
    }
  },
  {
    "__docId__": 437,
    "kind": "typedef",
    "name": "ProjectConfigurationVersionSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationVersionSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'process.env.VERSION'",
        "defaultRaw": "'process.env.VERSION'",
        "name": "defineOn",
        "description": "The name of the variable where the version is going to be replaced on your code when bundled."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'VERSION'",
        "defaultRaw": "'VERSION'",
        "name": "environmentVariable",
        "description": "The name of the environment variable woopack should check to get the project version."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationVersionRevisionSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "revision",
        "description": "This is like a sub-feature. A revision file is a file that contains the version of your project.\nThis is useful when deploying the project to an environment where you have no access to the\nenvironment variable.\n\nThe way the revision file works is by first checking if the environment variable is available\nand, if not, it will check if the project is on a `GIT` repository and try to get the hash of\nthe last commit."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationVersionSettings"
    }
  },
  {
    "__docId__": 438,
    "kind": "typedef",
    "name": "ProjectConfigurationWatchSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationWatchSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "true",
        "defaultRaw": true,
        "name": "poll",
        "description": "Whether or not to use polling to get the changes on the file system, and if so, it can also be\nused to specify the ms interval."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationWatchSettings"
    }
  },
  {
    "__docId__": 439,
    "kind": "typedef",
    "name": "ProjectConfigurationOtherSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationOtherSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationWatchSettings"
        ],
        "spread": false,
        "optional": false,
        "name": "This",
        "description": "is used by woopack to configure `watchpack`, which is used to watch Node files that need to\nbe transpiled."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationOtherSettings"
    }
  },
  {
    "__docId__": 440,
    "kind": "typedef",
    "name": "ProjectConfigurationSettings",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProjectConfigurationSettings",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationPathSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "paths",
        "description": "This setting is all about where your code is located and where it will be bundled"
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationTargetTemplates"
        ],
        "spread": false,
        "optional": true,
        "name": "targetsTemplates",
        "description": "There was no way to have _\"smart defaults\"_ for targets and at the same time allow woopack\nan unlimited amount of targets, and that's why the this setting exists.\nThe targets will extend the template which name is the same as their `type` property."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "targets",
        "description": "This will be a dictionary with the {@link Target} definitions."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationCopyFeatureSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "copy",
        "description": "These settings are for the feature that enables woopack to copy files when building targets."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationVersionSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "version",
        "description": "These settings are for the feature that manages your project version."
      },
      {
        "nullable": null,
        "types": [
          "ProjectConfigurationOtherSettings"
        ],
        "spread": false,
        "optional": true,
        "name": "others",
        "description": "Miscellaneous options."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "ProjectConfigurationSettings"
    }
  },
  {
    "__docId__": 441,
    "kind": "typedef",
    "name": "BuildEngineGetCommand",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BuildEngineGetCommand",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Target"
        ],
        "spread": false,
        "optional": false,
        "name": "target",
        "description": "The target information."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "buildType",
        "description": "The intended build type: `development` or `production`."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "forceRun",
        "description": "Force the target to run even if the `runOnDevelopment` setting is `false`."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": "The command the shell script will use to build the target."
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "BuildEngineGetCommand"
    }
  },
  {
    "__docId__": 442,
    "kind": "typedef",
    "name": "BuildEngine",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~BuildEngine",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "BuildEngineGetCommand"
        ],
        "spread": false,
        "optional": false,
        "name": "getBuildCommand",
        "description": "The method used by woopack in order to get the shell comands to build and/or run a target."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "BuildEngine"
    }
  },
  {
    "__docId__": 443,
    "kind": "typedef",
    "name": "ProviderRegisterMethod",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~ProviderRegisterMethod",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "Woopack"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "A reference to the woopack dependency injection container."
      }
    ],
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ProviderRegisterMethod"
    }
  },
  {
    "__docId__": 444,
    "kind": "typedef",
    "name": "Provider",
    "memberof": "src/typedef.js",
    "static": true,
    "longname": "src/typedef.js~Provider",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ProviderRegisterMethod"
        ],
        "spread": false,
        "optional": false,
        "name": "register",
        "description": "The method that gets called by Woopack when registering the provider."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Provider"
    }
  },
  {
    "kind": "index",
    "content": "# woopack\n\nBundle and run your javascript project without configuring an specific module bundler.\n\n## Introduction\n\n### What?\n\nLet's start with this:\n\n- **woopack is not** an alternative to [webpack](https://webpack.js.org/).\n- **woopack is not** a module bundler.\n\nNow, this is a tool that allows you to configure a project bundling options on an _\"almost-human\"_ readable format so you don't have to deal with very complex rules and structures.\n\nThe idea is to divide your project bundling on a 4 layers architecture:\n\n| Layer                 |                                                                   |\n|-----------------------|-------------------------------------------------------------------|\n| Project configuration | Managed by woopack                                                |\n| Bundler engine        | A woopack plugin for Webpack/Rollup/Parcel/etc.                   |\n| Framework             | A woopack plugin with the framework settings of the used bundler. |\n| Others...             | Other plugins like a runner tool or bundler analyzer.             |\n\n#### Quick example\n\nYou want to create an [AngularJS](https://angularjs.org/) app and you want to bundle it with webpack. You first need the following dependencies:\n\n- [`woopack`](https://yarnpkg.com/en/package/woopack)\n- [`woopack-plugin-webpack`](https://yarnpkg.com/en/package/woopack-plugin-webpack)\n- [`woopack-plugin-webpack-angularjs`](https://yarnpkg.com/en/package/woopack-plugin-webpack-angularjs)\n\nThen, on your project configuration you would write this:\n\n```js\nmodule.exports = {\n  targets: {\n    browser: {\n      type: 'browser',\n      engine: 'webpack',\n      framework: 'angularjs',\n    },\n  },\n};\n```\n\n> There are a lot of _\"smart defaults\"_ on the project configuration, but since this we just want a quick example, we are going to modify just what we need.\n\nThat's all you need to do in terms of configuration, after that you can start coding your app.\n\n### Why?\n\nModule bundlers have been around for quite some time now and they are amazing tools, they allow us to do so much, from just putting the files together to transpiling, tree shaking, splitting for lazy load, etc.\n\nI've been bundling projects since [require.js](http://requirejs.org/) was popular, and since mid 2016 I've been using [webpack](https://webpack.js.org/) for almost everything. You can configure every detail, [Babel](https://babeljs.io/) integration, optimizing files, [Express](https://expressjs.com) middlewares, etc; But after year and half, and more than 20 projects built with it... I'm sick and tire of writing the configuration.\n\nI even [wrote a plugin](https://github.com/homer0/webpack-node-utils/) to manage the configurations, but at the end of the day, I always ended up with huge configurations files, tons of rules and a lot of plugins/dependencies that needed to be up to date and comply with each other versions.\n\n> I'm well aware of the new features webpack 4 will bring to the table, including all the _\"smart defaults\"_, and it looks really promising. But I still believe **this tool is for a different purpose than just bundling**.\n\nAt some point I started considering start using [Rollup](https://rollupjs.org/), at least for the non web apps projects. Rollup was getting a lot of traction and since Facebook started adopting it, it got **really** popular.\n\nI tried it for a npm package project and the results were pretty impressive: It doesn't require a lot of configuration and there's not a lot of boiler plate code on the builds.\n\nI considered migrating a few older projects, but I didn't want to have to go over their configurations, so I just kept it for new projects.\n\nThen, a few months ago, [Parcel](https://parceljs.org/) showed up, and the community was all over it (I know, we are a very hype-driven community :P). And, of course, I wanted to use it, but at that point it was too much. That's when I finally understood the _\"Javascript Fatigue\"_.\n\nAnd at that point was when I had the first idea for this project: Preparing boiler plates for different bundlers for different scenarios: library, web page, web app, etc. Yes, it wasn't very original, but it was the start.\n\nAs you may have suspected, there were a few issues:\n\n- Hard to maintain: Different projects for the same tool that needed to be up-to-date.\n- What about the framework? Yes, frameworks are another big cause of the _\"Javascript Fatigue\"_, and they all have their unique configuration for specific bundlers.\n- I had to align every project to whatever the boiler plate needed in order to work.\n\nBut thanks to those problems was that I was able to come with a plan for this project:\n\n- Make a tool that would understand your project configuration on an _\"almost-human\"_ readable format, meaning, try to move almost every configuration to `boolean` or `string` value and no configuration functions.\n- Add another layer, on a form of plugin, that would take the project configuration and apply it to a bundler configuration.\n- And another layer/plugin that would be the framework implementation for that bundler.\n\nAnd then I built it. Right now it's only webpack as an bundler engine and AngularJS for webpack as framework, but I'm already building the Rollup engine, adding the [React](https://reactjs.org/) to webpack and planning on then making ports of both AngularJS and React.\n\nMy plan is to ask the community for help putting these plugins/recipes together.\n\n### Who?\n\nOf course there's no way this will be helpful for everyone: a tool that works as an abstraction of other tool could never cover all the possible scenarios.\n\nThis tool is aimed to those who use bundlers everyday to build web sites, libraries and apps without the need to go to the last optimal detail. If you need to do that, then use the bundler directly, it's the best choice.\n\n## Information\n\n| -            | -                                                                             |\n|--------------|-------------------------------------------------------------------------------|\n| Package      | woopack                                                                       |\n| Description  | Bundle your Javascript projects without having to learn how to use a bundler. |\n| Node Version | >= v6.10.0                                                                    |\n\n## Usage\n\n### Project configuration and Targets\n\nThe first thing you need to do is to create a **`config/project.config.js`** file, that's where all your project configuration goes.\n\nThen you need to define your targets, the things you are going to bundle. You can have from one to all the targets you want, for example:\n\n```js\nmodule.exports = {\n  targets: {\n    backend: {\n      type: 'node',\n    },\n    frontend: {\n      type: 'browser',\n      engine: 'webpack',\n    },\n  },\n};\n```\n\n> That's actually the configuration of a real project.\n\nAs you can see, the there's only one thing you need to define on your target: The `type`. If it's a Node app, you would use `node`; but if the target is going to run on a browser, go with `browser`.\n\nBy default, woopack doesn't bundle Node apps (yes, it's ironic): For development, it runs them from the source directory, unless they need transpilation, then it moves them to the distribution directory and transpile them. For production, they are moved to the distribution directory whether they need transpilation or not (as a way to creating a deployable directory).\n\nNow, it doesn't do it by default, but if you add a setting `bundle: true` in there, woopack will bundle it.\n\nRegarding browser targets, they are always bundled, and as on any target with bundling, it needs a bundling engine. On the configuration above we defined `webpack`, which is also its default value, and in order to use webpack, we need to install the plugin for it: [`woopack-plugin-webpack`](https://yarnpkg.com/en/package/woopack-plugin-webpack).\n\nAnd that's all there is for a basic configuration, but I encourage you to [read more about the project configuration](manual/projectConfiguration.html).\n\n### Writing your app code\n\nwoopack relays a lot on the project configuration _\"smart defaults\"_, which are the default values of the settings that I consider to have pre set as there's not a lot of chances that you'd want to change them.\n\nBased on those defaults, the configuration from the previous step assumes the following things:\n\n- For your `backend` target:\n - It's code is located on `src/backend/...`.\n - The main file on development is `start.development.js`.\n - The main file on production is `start.production.js`.\n- For your `frontend` target:\n - It's code is located on `src/frontend/...`.\n - The main file for both development and production is `index.js`.\n\n> Those assumptions are really easy to change from the [project configuration](manual/projectConfiguration.html).\n\nHaving that in mind, you can go ahead and create those files with some code on them to try.\n\n### Bundling the code\n\nAnd we got to the final part, you have your configuration and your targets code, time to bundle them, and the way you do it is by using the `build` command from the `woopack` CLI:\n\n> You can use scripts from the `package.json`, `$(npm bin)/` or `npx` too, but for these examples I'll be using `yarn`\n\n```bash\nyarn woopack build backend\n# or\nyarn woopack build frontend\n```\n\nReally simple right? For the `frontend` target, it will take all the source, bundle it and move it to the distribution directory (`dist/` by default, but again, configurable).\n\nFor the `backend` target it will give you a warning (not cool, I know), because the default build type is for a development environment and we didn't specify that the target needed to be bundled nor that it needed transpilation, so woopack doesn't see the need to move it.\n\nNow, time to build for production:\n\n```bash\nyarn woopack build backend --type production\n# or\nyarn woopack build frontend --type production\n```\n\nDone, the `--type` argument set to `production` tells woopack that you are preparing a build production, so it will move everything to the distribution directory.\n\n[Read more about woopack CLI](manual/cli.html)\n\n## Other features\n\n### Running the targets\n\nIt's not all about putting all the files together. You can also use woopack to run your targets while you code.\n\nFor `node` targets, it has a custom implementation of [`nodemon`](https://yarnpkg.com/en/package/nodemon) that will take care of watching and, if needed, transpiling your files while you code.\n\nFor `browser` targets it uses the bundle engine to run it so it can update your bundle on any change.\n\n### You can extend most of the things and overwrite EVERYTHING\n\nThe whole tool is built using [Jimple](https://yarnpkg.com/en/package/jimple), a port of [Pimple Dependency Injection container](https://github.com/silexphp/Pimple/) for Node, and EVERYTHING is registered on the container. You can simple set your own version of a service with the same name in order to overwrite it.\n\n> If you haven't tried [Jimple](https://github.com/fjorgemota/jimple), give it a try, it's excellent for organizing your app dependencies and services.\n\n[Read more about overwriting woopack](manual/overwrite.html).\n\n### Building plugins is really easy\n\nBy default, woopack checks your package.json for dependencies which names start with `woopack-plugin-`, `require` them, they need to export a function that will receive the app container as parameter, thus allowing them to listen for events or even overwrite existing services.\n\nFor example, you want to create a plugin for [browserify](https://yarnpkg.com/en/package/browserify) (If someone is interested, please go ahead :)):\n\nYou would call your plugin `woopack-plugin-browserify` to assure that woopack will pick it and `require` it, and then the code would look something like this:\n\n```js\nmodule.exports = (woopack) => {\n\twoopack.set('browserifyBuildEngine', ...);\n};\n```\n\n- [Read more about writing plugins](manual/plugins.html).\n- [Read more about build engines](manual/engines.html).\n\n### Browser targets configuration\n\nFor `node` targets, having multiple configuration files is simple, as they can `require` files on runtime, but in the case of `browser` targets, you would probably want to select the configuration you want to use when you bundle the code and be able to include it inside.\n\nThat's why, if enabled, woopack creates an instance of [wootil's `AppConfiguration`](https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html) that `browser` targets can use on the bundling process.\n\nTo enable it, you have to edit your target settings:\n\n```js\nmodule.exports = {\n  targets: {\n    frontend: {\n      type: 'browser',\n      engine: 'webpack',\n      configuration: {\n        enabled: false,\n      },\n    },\n  },\n};\n```\n\nThat's all you need to enable the feature, the rest is dictated by the setting _\"smart defaults\"_:\n\n- You target configurations will be on `config/browser/...`.\n- The default configuration will be loaded from `config/browser/browser.config.js`.\n- Whenever you write `process.env.CONFIG` on your code, when bundled, it will replaced by the configuration contents.\n- If you add `CONFIG=xyz` before the `woopack build` command, the service will look for a file `browser.xyz.config.js` and the configuration will be created by extending the default one.\n\n[Read more about browser targets configuration](manual/browserTargetConfiguration.html)\n\n## Development\n\nBefore doing anything, install the repository hooks:\n\n```bash\n# You can either use npm or yarn, it doesn't matter\nnpm run install-hooks\n```\n\n### NPM/Yarn Tasks\n\n| Task                    | Description                         |\n|-------------------------|-------------------------------------|\n| `npm run install-hooks` | Install the GIT repository hooks.   |\n| `npm test`              | Run the project unit tests.         |\n| `npm run lint`          | Lint the modified files.            |\n| `npm run lint:full`     | Lint the project code.              |\n| `npm run docs`          | Generate the project documentation. |\n| `npm run todo`          | List all the pending to-do's.       |\n\n### Testing\n\nI use [Jest](https://facebook.github.io/jest/) with [Jest-Ex](https://yarnpkg.com/en/package/jest-ex) to test the project. The configuration file is on `./.jestrc`, the tests and mocks are on `./tests` and the script that runs it is on `./utils/scripts/test`.\n\n### Linting\n\nI use [ESlint](http://eslint.org) to validate all our JS code. The configuration file for the project code is on `./.eslintrc` and for the tests on `./tests/.eslintrc` (which inherits from the one on the root), there's also an `./.eslintignore` to ignore some files on the process, and the script that runs it is on `./utils/scripts/lint`.\n\n### Documentation\n\nI use [ESDoc](http://esdoc.org) to generate HTML documentation for the project. The configuration file is on `./.esdocrc` and the script that runs it is on `./utils/scripts/docs`.\n\n### To-Dos\n\nI use `@todo` comments to write all the pending improvements and fixes, and [Leasot](https://yarnpkg.com/en/package/leasot) to generate a report. The script that runs it is on `./utils/scripts/todo`.",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/README-esdoc.md",
    "name": "./README-esdoc.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n    \"name\": \"woopack\",\n    \"description\": \"Bundle and run your javascript project without configuring an specific module bundler.\",\n    \"homepage\": \"https://homer0.github.io/woopack/\",\n    \"version\": \"1.0.0\",\n    \"repository\": \"homer0/woopack\",\n    \"author\": \"Leonardo Apiwan (@homer0) <me@homer0.com>\",\n    \"license\": \"MIT\",\n    \"dependencies\": {\n      \"wootils\": \"^1.0.5\",\n      \"jimple\": \"homer0/jimple\",\n      \"fs-extra\": \"5.0.0\",\n      \"extend\": \"3.0.1\",\n      \"del\": \"3.0.0\",\n      \"shelljs\": \"0.8.1\",\n      \"glob\": \"7.1.2\",\n      \"commander\": \"2.13.0\",\n      \"babel-core\": \"6.26.0\",\n      \"babel-cli\": \"6.26.0\",\n      \"babel-plugin-transform-class-properties\": \"6.24.1\",\n      \"babel-plugin-transform-decorators-legacy\": \"1.3.4\",\n      \"babel-plugin-transform-runtime\": \"6.23.0\",\n      \"babel-polyfill\": \"6.26.0\",\n      \"babel-preset-flow\": \"6.23.0\",\n      \"babel-preset-env\": \"1.6.1\",\n      \"babel-runtime\": \"6.26.0\",\n      \"watchpack\": \"1.4.0\",\n      \"nodemon\": \"1.14.11\"\n    },\n    \"devDependencies\": {\n      \"eslint\": \"4.16.0\",\n      \"eslint-config-airbnb-base\": \"12.1.0\",\n      \"eslint-plugin-import\": \"2.8.0\",\n      \"eslint-plugin-node\": \"5.2.1\",\n      \"jest-ex\": \"4.0.0\",\n      \"jest-cli\": \"22.1.4\",\n      \"jasmine-expect\": \"3.8.3\",\n      \"esdoc\": \"1.0.4\",\n      \"esdoc-standard-plugin\": \"1.0.0\",\n      \"esdoc-node\": \"1.0.3\",\n      \"leasot\": \"4.13.0\",\n      \"coveralls\": \"3.0.0\"\n    },\n    \"engine-strict\": true,\n    \"engines\": {\n      \"node\": \">=6.0.0\",\n      \"npm\": \">=3.0.0\"\n    },\n    \"main\": \"src/index.js\",\n    \"bin\": {\n      \"woopack\": \"./src/bin/woopack\",\n      \"woopack-cli\": \"./src/bin/woopack-cli\"\n    },\n    \"scripts\": {\n      \"install-hooks\": \"./utils/hooks/install\",\n      \"test\": \"./utils/scripts/test\",\n      \"lint\": \"./utils/scripts/lint\",\n      \"lint:full\": \"./utils/scripts/lint-full\",\n      \"predocs\": \"./utils/scripts/docs-index\",\n      \"docs\": \"./utils/scripts/docs\",\n      \"todo\": \"./utils/scripts/todo\"\n    }\n}\n",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manualIndex",
    "globalIndex": false,
    "content": null,
    "longname": "",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/projectConfiguration.md",
    "name": "./documents/projectConfiguration.md",
    "content": "# Project Configuration\n\nThese are the settings that will determine how woopack wil handle your project.\n\n**The file must be created on `[YOUR-PROJECT-PATH]/config/project.config.js`**\n\nThere's no _\"top level\"_ setting, everything is separated in different scopes relevant to one specific thing:\n\n```js\n{\n  // Everything related to where your code is and where it will be bundled.\n  paths: ...,\n\n  // The default templates for your target settings.\n  targetsTemplates: ...,\n\n  // Your targets information - This must be overwritten.\n  targets: ...,\n\n  // The settings of the feature that copies files when bundling.\n  copy: ...,\n\n  // The settings of the feature the manages your project version.\n  version: ...,\n\n  // Miscellaneous settings.\n  others: ...,\n}\n```\n\n## `paths`\n\nThis setting is all about where your code is located and where it will be bundled:\n\n```js\n{\n  paths: {\n    source: 'src',\n    build: 'dist',\n    privateModules: 'private',\n    output: {\n      js: 'statics/js',\n      fonts: 'statics/fonts',\n      css: 'statics/css',\n      images: 'statics/img',\n    },\n  }\n}\n```\n\n### `source`\n\nThe directory, relative to your project path, where your targets code is located. On the documentation is often referred as the _\"source directory\"_.\n\n### `build`\n\nThe directory, relative to your project path, where your targets bundled code will be located. On the documentation is often referred as the _\"distribution directory\"_.\n\n### `privateModules`\n\nThis is for the feature that copies when bundling. In case you are using the feature to copy an npm module that, let's say, is not published, woopack will save that module (without its dependencies) on that folder.\n\n### `output`\n\nThese are paths for static assets that may be generated when bundling a target.\n\n## `targetsTemplates`\n\nThere was no way to have _\"smart defaults\"_ for targets and at the same time allow woopack an unlimited amount of targets, and that's why the this setting exists.\n\nThe targets will extend the template which name is the same as their `type` property:\n\n```js\n{\n  node: ...,\n  browser: ...,\n}\n```\n\nSince there are a lot of settings for the templates, will divide them by type and see each one on detail.\n\n### `node`\n\n```js\n{\n  node: {\n    type: 'node',\n    bundle: false,\n    transpile: false,\n    engine: 'webpack',\n    hasFolder: true,\n    createFolder: false,\n    folder: '',\n    entry: {\n      development: 'start.development.js',\n      production: 'start.production.js',\n    },\n    runOnDevelopment: false,\n    babel: {\n      features: [],\n      nodeVersion: 'current',\n      overwrites: {},\n    },\n    flow: false,\n    library: false,\n    libraryOptions: {\n      libraryTarget: 'commonjs2',\n    },\n    cleanBeforeBuild: true,\n  }\n}\n```\n\n#### `bundle`\n\nWhether or not the target needs to be bundled. Yes, it's kind of ironic that a tool that aims to simplify bundling would have an option like this, but there are a few scenarios where this may be useful:\n\n- You are bundling a frontend while you have your backend running on Node, you can bundle your frontend and just copy your backend.\n- You have no frontend target and you are using woopack just to organize, run and prepare the distributable files.\n\nIf the value is `false`, when running on a development environment, and if the target doesn't need transpilation, the code won't be moved to the distribution directory.\n\n#### `transpile`\n\nThis option is kind of tied to the previous one: You may not want to bundle your Node target, but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet supported by the runtime.\n\n#### `engine`\n\nIn case `bundle` is `true`, this will tell woopack which build engine you are going to bundle the target code with.\n\n> If you don't intend to change its default value, you need to have the package [`woopack-plugin-webpack`](https://yarnpkg.com/en/package/woopack-plugin-webpack) installed.\n\n#### `hasFolder`\n\nWhether your target code is on a sub folder of the source directory (`src/[target-name]/`) or the contents of the source directory are your target code (useful when working with a single target).\n\n#### `createFolder`\n\nWhether or not to create a folder for your targets code on the distribution directory when the target is bundled/copied.\n\n#### `folder`\n\nIf either `hasFolder` or `createFolder` is `true`, this can be used to specify a different folder name than the target's name.\n\n#### `entry`\n\nThis object with the keys `development` and `production` tells woopack which is the main file (executable) of your target for each environment.\n\n#### `runOnDevelopment`\n\nThis tells woopack that when the target is builded (bundled/copied) on a development environment, it should execute it.\n\nWhen the target needs to be bundled, it will relay on the build engined to do it, otherwise, woopack will use its custom implementation of [`nodemon`](https://yarnpkg.com/en/package/nodemon) for watching and, if needed, transpile your target code.\n\n#### `babel`\n\nThese options are used in the case the target needs to be bundled or transpile to configure [Babel](https://babeljs.io):\n\n**`babel.features`**\n\nwoopack includes by default two Babel plugins: [`transform-class-properties`](https://yarnpkg.com/en/package/babel-plugin-transform-class-properties) and [`transform-decorators-legacy`](https://yarnpkg.com/en/package/babel-plugin-transform-decorators-legacy). On this list you can use the values `properties` or `decorators` to include them.\n\nIf you need other plugins, they can be included on the `overwrites` option.\n\n**`babel.nodeVersion`**\n\nWhen building the Babel configuration, woopack uses the [`babel-preset-env`](https://yarnpkg.com/en/package/babel-preset-env) to just include the necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n\n**`babel.overwrites`**\n\nIf you know how to use Babel and need stuff that is not covered by woopack, you can use this setting to overwrite/add any value you may need.\n\n#### `flow`\n\nWhether or not your target uses [flow](https://flow.org/). This will update the Babel configuration in order to add support and, in case it was disabled, it will enable transpilation.\n\n#### `library`\n\nIf the project is bundled, this will tell the build engine that it needs to be builded as a library to be `require`d.\n\n#### `libraryOptions`\n\nIn case `library` is `true`, these options are going to be used by the build engine to configure your library:\n\n**`libraryOptions.libraryTarget`**\n\nHow the library will be exposed: `commonjs2`, `umd` and `window`.\n\n> Since this was built based on the webpack API, if you are using it as a build engine, you can set any `libraryTarget` that webpack supports. The ones mentioned above will be the ones woopack will support for all the other build engines with different APIs.\n\n#### `cleanBeforeBuild`\n\nWhether or not to remove all code from previous builds from the distribution directory when making a new build.\n\n### `browser`\n\n```js\nbrowser: {\n  type: 'browser',\n  engine: 'webpack',\n  hasFolder: true,\n  createFolder: true,\n  folder: '',\n  entry: {\n    development: 'index.js',\n    production: 'index.js',\n  },\n  sourceMap: {\n    development: false,\n    production: true,\n  },\n  html: {\n    template: 'index.html',\n    filename: 'index.html',\n  },\n  runOnDevelopment: false,\n  babel: {\n    features: [],\n    browserVersions: 2,\n    mobileSupport: true,\n    polyfill: true,\n    overwrites: {},\n  },\n  flow: false,\n  CSSModules: false,\n  library: false,\n  libraryOptions: {},\n  cleanBeforeBuild: true,\n  devServer: {\n    port: 2509,\n    reload: true,\n  },\n  configuration: {\n    enabled: false,\n    default: null,\n    path: 'config/',\n    hasFolder: true,\n    defineOn: 'process.env.CONFIG',\n    environmentVariable: 'CONFIG',\n    loadFromEnvironment: true,\n    filenameFormat: '[target-name].[configuration-name].config.js',\n  },\n}\n```\n\n#### `engine`\n\nThis will tell woopack which build engine you are going to bundle the target code with.\n\n> If you don't intend to change its default value, you need to have the package [`woopack-plugin-webpack`](https://yarnpkg.com/en/package/woopack-plugin-webpack) installed.\n\n#### `hasFolder`\n\nWhether your target code is on a sub folder of the source directory (`src/[target-name]/`) or the contents of the source directory are your target code (useful when working with a single target).\n\n#### `createFolder`\n\nWhether or not to create a folder for your targets code on the distribution directory when the target is bundled/copied.\n\n#### `folder`\n\nIf either `hasFolder` or `createFolder` is `true`, this can be used to specify a different folder name than the target's name.\n\n#### `entry`\n\nThis object with the keys `development` and `production` tells woopack which is the main file (executable) of your target for each environment.\n\n#### `sourceMap`\n\nWhether or not to disable source map generation for each environment.\n\n#### `html`\n\nIn the case the target is an app, these are the options for the `html` file that will include the bundle `<script />`; and if your target is a library, this can be used to test your library.\n\n**`html.template`**\n\nThe file inside your target source that will be used to generate the `html`.\n\n**`html.filename`**\n\nThe file that will be generated when your target is bundled. It will automatically include the `<script />` tag to the generated bundle.\n\n#### `runOnDevelopment`\n\nThis will tell the build engine that when you build the target for a development environment, it should bring up an `http` server to _\"run\"_ your target.\n\n#### `babel`\n\nThese options are used by the build engine to configure [Babel](https://babeljs.io):\n\n**`babel.features`**\n\nwoopack includes by default two Babel plugins: [`transform-class-properties`](https://yarnpkg.com/en/package/babel-plugin-transform-class-properties) and [`transform-decorators-legacy`](https://yarnpkg.com/en/package/babel-plugin-transform-decorators-legacy). On this list you can use the values `properties` or `decorators` to include them.\n\nIf you need other plugins, they can be included on the `overwrites` option.\n\n**`babel.browserVersions`**\n\nWhen building the Babel configuration, woopack uses the [`babel-preset-env`](https://yarnpkg.com/en/package/babel-preset-env) to just include the necessary stuff. This setting tells how many old versions of the major browsers the target needs transpilation for.\n\n> Major browsers: Firefox, Chrome, Safari and Edge.\n\n**`babel.mobileSupport`**\n\nIf `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n\n**`babel.polyfill`**\n\nWhether or not the configuration should include the [`babel-polyfill`](https://yarnpkg.com/en/package/babel-polyfill) package.\n\n**`babel.overwrites`**\n\nIf you know how to use Babel and need stuff that is not covered by woopack, you can use this setting to overwrite/add any value you may need.\n\n#### `flow`\n\nWhether or not your target uses [flow](https://flow.org/). This will update the Babel configuration in order to add support for it.\n\n#### `CSSModules`\n\nWhether or not your application uses CSS Modules.\n\n#### `library`\n\nThis will tell the build engine that it needs to be builded as a library to be `require`d.\n\n#### `libraryOptions`\n\nIn case `library` is `true`, these options are going to be used by the build engine to configure your library:\n\n**`libraryOptions.libraryTarget`**\n\nHow the library will be exposed: `commonjs`, `umd` and `window`.\n\n> Since this was built based on the webpack API, if you are using it as a build engine, you can set any `libraryTarget` that webpack supports. The ones mentioned above will be the ones woopack will support for all the other build engines with different APIs.\n\n#### `cleanBeforeBuild`\n\nWhether or not to remove all code from previous builds from the distribution directory when making a new build.\n\n#### `devServer`\n\nThese are the options for the `http` server woopack will use when running the target on a development environment.\n\n**`devServer.port`**\n\nThe server port.\n\n**`devServer.reload`**\n\nWhether or not to reload the server when the code changes.\n\n#### `configuration`\n\nThese are the settings for the feature that allows a browser target to have a dynamic configuration file.\n\n> For more precise information, check the document about Browser configuration\n\n**`configuration.enabled`**\n\nWhether or not the feature is enabled.\n\n**`configuration.default`**\n\nThe default configuration. If none is specified, when the target is builded, it will try to use `[target-name].config.js`, located on the configuration folder.\n\n**`configuration.path`**\n\nThe path where the configuration files are located.\n\n**`configuration.hasFolder`**\n\nWhether or not there's a folder with the target name on the configuration path.\n\n**`configuration.defineOn`**\n\nThe name of the variable where the configuration is going to be replaced on your code when bundled.\n\n**`configuration.environmentVariable`**\n\nThe name of the environment variable woopack will check when building the target in order to load a dynamic configuration.\n\n**`configuration.loadFromEnvironment`**\n\nWhether or not woopack should check for the environment variable value.\n\n**`configuration.filenameFormat`**\n\nThe name format of the configuration files.\n\n## `targets`\n\nThis setting is an empty object because this is the only required setting. This is where you'll add your target(s) information, for example:\n\n```js\n{\n  targets: {\n    backend: {\n      type: 'node',\n    },\n    frontend: {\n      type: 'browser',\n    },\n  }\n}\n```\n\n## `copy`\n\nThese settings are for the feature that enables woopack to copy files when building targets:\n\n```js\n{\n  copy: {\n    enabled: false,\n    items: [],\n    copyOnBuild: {\n      enabled: true,\n      onlyOnProduction: true,\n      targets: [],\n    },\n  }\n}\n```\n\n### `enabled`\n\nWhether or not the feature is enabled.\n\n### `items`\n\nA list of files and/or directories that will be copied. All with paths relative to the project directory.\n\n### `copyOnBuild`\n\nSince the feature is also available through the woopack CLI, you can configure how the feature behaves when building:\n\n#### `enabled`\n\nWhether or not to copy the files when building. If disabled, you can use the CLI to copy the files.\n\n#### `onlyOnProduction`\n\nThis tells woopack if the files should be copied only when building for production, or if it should do it for development too.\n\n#### `targets`\n\nThis can be used to specify the targets that will trigger the feature when builded. If no target is specified, the feature will be triggered by all the targets.\n\n## `version`\n\nThese settings are for the feature that manages your project version:\n\n```js\n{\n  version: {\n    defineOne: 'APP_VERSION',\n    environmentVariable: 'VERSION',\n    revision: {\n      enabled: false,\n      copy: true,\n      filename: 'revision',\n      createRevisionOnBuild: {\n        enabled: true,\n        onlyOnProduction: true,\n        targets: [],\n      },\n    },\n  }\n}\n```\n\n### `defineOne`\n\nThe name of the variable where the version is going to be replaced on your code when bundled.\n\n### `environmentVariable`\n\nThe name of the environment variable woopack should check to get the project version.\n\n### `revision`\n\nThis is like a sub-feature. A revision file is a file that contains the version of your project. This is useful when deploying the project to an environment where you have no access to the environment variable.\n\nThe way the revision file works is by first checking if the environment variable is available and, if not, it will check if the project is on a `GIT` repository and try to get the hash of the last commit.\n\n#### `revision.enabled`\n\nWhether or not the revision file feature is enabled.\n\n#### `revision.copy`\n\nWhether or not to copy the revision file when the project files are being copied to the distribution directory.\n\n#### `revision.filename`\n\nThe name of the revision file.\n\n#### `revision.createRevisionOnBuild`\n\nSince the feature is also available through the woopack CLI, you can configure how the feature behaves when building:\n\n**`revision.createRevisionOnBuild.enabled`**\n\nWhether or not to create the file when building. If disabled, you can use the CLI to copy the files.\n\n**`revision.createRevisionOnBuild.onlyOnProduction`**\n\nThis tells woopack if the file should be created only when building for production, or if it should do it for development too.\n\n**`revision.createRevisionOnBuild.targets`**\n\nThis can be used to specify the targets that will trigger the feature when builded. If no target is specified, the feature will be triggered by all the targets.\n\n## `others`\n\nMiscellaneous options.\n\n### `watch`\n\nThis is used by woopack to configure [`watchpack`](https://yarnpkg.com/en/package/watchpack), which is used to watch Node files that need to be transpiled.\n\nThe reason is outside the `targetsTemplate.node` is because this can be used for any other plugin that watches the file system.\n\n#### `watch.poll`\n\nWhether or not to use polling to get the changes on the file system, and if so, it can also be used to specify the ms interval.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/cli.md",
    "name": "./documents/cli.md",
    "content": "# woopack CLI\n\nThe woopack Command-Line Interface allows you to tell woopack which tasks you want to execute and for which targets.\n\nYou can run this commands with either [yarn](https://yarnpkg.com), [npx](https://www.npmjs.com/package/npx) or by using a `package.json` script.\n\n## Available commands\n\n### Build targets\n\nIt builds a target and moves it bundle to the distribution directory.\n\n```bash\nwoopack build [target] [--type [type]] [--run]\n```\n\n- **target:** The name of the target you intend to build.\n- **type:** Which build type: `development` (default) or `production`.\n- **run:** Run the target after the build is completed. It only works when the build type is `development`.\n\n### Running a target\n\nIf the target is a Node app, it will execute it, otherwise, it will bring up an `http` server to _\"run\"_ your target.\n\n```bash\nwoopack run [target]\n```\n- **target:** The name of the target you intend to build and run.\n\n> This is basically an alias of `woopack build` that uses the `--run` flag by default.\n\n### Cleaning previous builds\n\nRemoves the files from previous builds from the distribution directory.\n\n```bash\nwoopack clean [target]\n```\n\n> This gets automatically called when building if the target `cleanBeforeBuild` setting is `true`.\n\n### Copy the project files\n\nIf the feature is enabled (check the project configuration document), this will copy the files and/or directories specified on the feature settings to the distribution directory.\n\n```bash\nwoopack copy-project-files\n```\n\n> This gets automatically called when building if the feature is configured to run when building.\n\n### Create the revision file\n\nIf the feature is enabled (check the project configuration document), this will create the revision file with the project version.\n\n```bash\nwoopack create-revision\n```",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/overwrite.md",
    "name": "./documents/overwrite.md",
    "content": "# Overwriting woopack\n\nwoopack was built on the idea that everything could be overwritten, so if the default functionalities don't cover all your project scenarios, you could easily overwrite a service and make it work the way you like (and hopefully publish it as a plugin later).\n\nAll the project structure was built using [Jimple](https://yarnpkg.com/en/package/jimple), a port of [Pimple Dependency Injection container](https://github.com/silexphp/Pimple/) for Node, and EVERYTHING is registered on the container. You can simple set your own version of a service with the same name in order to overwrite it.\n\nThe way you get access to the container is by creating a file called `woopack.config.js` on your project root directory, there you'll create your own instance of woopack, register your custom/overwrite services and export it:\n\n```js\n// woopack.config.js\n\n// Get the main class\nconst { Woopack } = require('woopack');\n\n// Create a new instance\nconst myWoopack = new Woopack();\n\n// Overwrite a service\nmyWoopack.set('cleaner', () => myCustomCleaner);\n\n// Export your custom version\nmodule.exports = woopack;\n```\n\nAll woopack commands will first check if you have the file and then fallback to the default app.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/plugins.md",
    "name": "./documents/plugins.md",
    "content": "# woopack plugins\n\nCreating plugins for woopack is really simple as the tool takes care of finding them on your `package.json`, loading them, allowing them to register services and providing the necessary events so they can interact with the targets.\n\n## Naming convention\n\nAll woopack plugins names should start with `woopack-plugin-`, this allows woopack to find them on your project dependencies. Once a plugin is found, woopack will be `require` it and call its exported function with a reference to the dependency container.\n\n## Adding services to the container\n\nAll the project structure was built using [Jimple](https://yarnpkg.com/en/package/jimple), a port of [Pimple Dependency Injection container](https://github.com/silexphp/Pimple/) for Node, so in oder to register a new service, you should `set` it on the container.\n\nLet's say the following code is the `main` file of a plugin:\n\n```js\n// Get the service you want to register\nconst MyService = require('...');\n\n// Export the function that will be called when the plugin is register\nmodule.exports = (woopack) => {\n  // Set the service on the container\n  woopack.set('myServiceName', () => new MyService());\n}\n```\n\n## Events\n\nwoopack has an `events` service that is an implementation of [wootil's `EventsHub`](https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html) and that it uses to emit information events and reduce variables when needed.\n\n```js\n...\nmodule.exports = (woopack) => {\n\t...\n\tconst events = woopack.get('events');\n\n\t// Add a new listener for a regular event\n\tevents.on('some-event', () => {\n\t  console.log('some-event was fired!');\n\t});\n\n\t// Add a reducer event\n\tevents.on('some-reducer-events', (someConfiguration) => Object.assign({}, someConfiguration, {\n\t  name: 'charito',\n\t}));\n});\n```\n\n### Regular events\n\n#### Revision file creation\n\n- Name: `revision-file-created`.\n- Parameters:\n - `version`: The version written on the file.\n\nThis is emitted if the revision file feature is enabled (check the project configuration document) and the command that creates it was called.\n\n### Reducer events\n\n#### List of the project files and/or folders to copy\n\n- Name: `project-files-to-copy`.\n- Reduces: The list of files and/or folders to copy.\n\nThis event is used if the feature to copy project files is enabled (check the project configuration document) and the command that does the copying is called.\n\n#### Target information\n\n- Name: `target-load`.\n- Reduces: A target information.\n\nThis is called when woopack loads a new target, after defining its paths and applying its type template.\n\n#### The list of commands to build a target\n\n- Name: `build-target-commands-list`.\n- Reduces: The list of CLI commands woopack uses to build a target.\n- Parameters:\n - `target`: The target information.\n - `type`: The build type, `development` or `production`.\n - `run`: Whether or not the target will be executed after building.\n\nIn order to build targets, woopack generates a list of CLI commands that a shell script executes, and this event is called in order to reduce that list.\n\n#### A target Babel configuration\n\n- Name: `babel-configuration`.\n- Reduces: The Babel configuration for an specific target.\n- Parameters:\n - `target`: The target information.\n\nWhen building a target, woopack will create a Babel configuration based on this settings, then this event is used to reduce that configuration.\n",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/engines.md",
    "name": "./documents/engines.md",
    "content": "# woopack build engines\n\nA build engine is what takes care of bundling your target code, woopack is just the intermediary.\n\n## Implementing a build engine\n\nA build engine is a plugin that you need to install on your project, so the first requirement is to install it as a dependency, after that you should change your target(s) `engine` setting to the name of the build engine you installed.\n\n> On an ideal world, that would be enough, but never forget to read the plugin `README`.\n\n## Creating a build engine\n\nYou should probably start with the Plugins document to get an idea of how plugins work.\n\nOnce you are ready, you need to register a service with the name `[your-build-engine-name]BuildEngine` and it should implement one required method:\n\n**`getBuildCommand(target, buildType, forceRun = false)`**\n\n- `target`: The target information.\n- `buildType`: `development` or `production`.\n- `forceRun`: Whether or not the user intends to run the target after building it, even if the target `runOnDevelopment` setting is `false.\n\nThis should return a string with the command(s) the woopack shell script should run in order to generate the bundle.\n\n### Let's create a plugin for browserify\n\nThe first thing is to create the plugin with the naming convention: `woopack-plugin-browserify`.\nNow, we'll create a build engine service for it:\n\n> This example is just to show how to create the engine, it will only build the target and nothing else. Not even include it on an HTML file.\n\n```js\n// src/browserify.js\n\nclass BrowserifyBuildEngine {\n  getBuildCommand(target, buildType) {\n    const entryFile = path.join(target.paths.source, target.entry[buildType]);\n    const output = path.join(target.paths.build, target.name);\n    return `browserify ${entryFile} -o ${output}.js`;\n  }\n}\n\nmodule.exports = BrowserifyBuildEngine;\n```\n\nReally simple, right? Now, assuming the `package.json` `main` entry points to `src/index.js`:\n\n```js\n// src/index.js\nconst BrowserifyBuildEngine = require('./browserify.js');\n\nmodule.exports = (woopack) => {\n  woopack.set('browserifyBuildEngine', () => new BrowserifyBuildEngine());\n};\n```\n\nDone, the only thing to do now is to change a target `engine` setting to `browserify` and when building, it will create a bundle using Browserify.",
    "static": true,
    "access": "public"
  },
  {
    "kind": "manual",
    "longname": "/Users/homer0/CODE/Node/woopack/woopack/documents/browserTargetConfiguration.md",
    "name": "./documents/browserTargetConfiguration.md",
    "content": "# woopack browser target configuration\n\nThis feature allows you to have dynamic configurations on your browser targets.\n\nFor `node` targets, having multiple configuration files is simple, as they can `require` files on runtime, but in the case of `browser` targets, you would probably want to select the configuration you want to use when you bundle the code and be able to include it inside.\n\nThat's why, if enabled, woopack creates an instance of [wootil's `AppConfiguration`](https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html) that `browser` targets can use on the bundling process.\n\n## Settings\n\nThe settings for this feature are on the target own settings, under the `configuration` key:\n\n```js\n{\n  type: 'browser',\n  configuration: {\n    enabled: false,\n    default: null,\n    path: 'config/',\n    hasFolder: true,\n    defineOn: 'process.env.CONFIG',\n    environmentVariable: 'CONFIG',\n    loadFromEnvironment: true,\n    filenameFormat: '[target-name].[configuration-name].config.js',\n  },\n}\n```\n\n### `enabled`\n\nWhether or not the feature is enabled.\n\n### `default`\n\nThe default configuration. It will be the base all the other, _\"dynamic\"_, configuration will extend.\n\nIf not specified, woopack will try to load a configuration file called `[target-name].config.js`, inside the configuration path.\n\n### `path`\n\nThe path relative to the root directory where the configurations are located.\n\n### `hasFolder`\n\nIf `true`, woopack will append a folder with the name of the target on the configurations path.\n\n### `defineOn`\n\nThe name of a variable that, when the target is builded, will be replaced with the configuration object.\n\n### `environmentVariable`\n\nThe name of an environment variable where woopack will check for a configuration name.\n\n### `loadFromEvironment`\n\nWhether or not woopack should check the environment variable. This is for cases in which loading the default configuration is enough for your project.\n\n### `filenameFormat`\n\nThe name format of the configuration files. `[configuration-name]` will be replaced with the value of the environment variable.\n\n## Using a configuration\n\nFirst, let's assume the following things:\n\n- You set `enabled` to `true`.\n- You left all the other default values.\n- You target is named `myapp`\n\nNow, you should be able to use it by sending the environment variable before the woopack command:\n\n```bash\nCONFIG=debug [woopack-command-to-build-a-target]\n```\n\nThis will load `config/myapp/myapp.config.js` and then `config/myapp/myapp.debug.js`.\n\n",
    "static": true,
    "access": "public"
  }
]