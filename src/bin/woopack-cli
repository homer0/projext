#!/usr/bin/env node
/* eslint-disable no-console */

const commander = require('commander');
const packageInfo = require('../../package.json');
const builder = require('../..');

commander
.version(packageInfo.version);

commander
.command('build [target]', 'Build a project target')
.option('-t, --type [type]', 'Which build type: development (default) or production');

commander
.command('sh-get-build [target]')
.description('Get the engine build command for a project target')
.option('-t, --type [type]', 'Which build type: development (default) or production')
.action((target, options) => {
  const type = options.type || (options.parent && options.parent.type) || 'development';
  const commands = [
    `woopack sh-copy-target ${target} -t ${type}`,
    `woopack sh-transpile-target ${target} -t ${type}`,
  ];

  const buildCommand = builder.getTargetBuildCommand(target, type);
  if (buildCommand) {
    commands.unshift(buildCommand);
  }

  console.log(commands.join(';'));
});

commander
.command('sh-copy-target [target]')
.description(
  'Copy a target files, only if the target requires transpilation or the' +
  '`type` argument is production'
)
.option('-t, --type [type]', 'Which build type: development (default) or production')
.action((target, options) => {
  const type = options.type || (options.parent && options.parent.type) || 'development';
  builder.copyTarget(target, type);
});

commander
.command('sh-transpile-target [target]')
.description('Transpile a target code if needed')
.option('-t, --type [type]', 'Which build type: development (default) or production')
.action((target, options) => {
  const type = options.type || (options.parent && options.parent.type) || 'development';
  builder.transpileTarget(target, type);
});

commander.parse(process.argv);
