{
  "type": "File",
  "start": 0,
  "end": 51081,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 1059,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 51081,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 1059,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
        "start": 0,
        "end": 220,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
        "start": 222,
        "end": 292,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
        "start": 294,
        "end": 390,
        "loc": {
          "start": {
            "line": 12,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
        "start": 392,
        "end": 468,
        "loc": {
          "start": {
            "line": 17,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
        "start": 470,
        "end": 546,
        "loc": {
          "start": {
            "line": 22,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {WatchpackOptions}\n * https://github.com/webpack/watchpack#api\n ",
        "start": 548,
        "end": 631,
        "loc": {
          "start": {
            "line": 27,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
        "start": 633,
        "end": 769,
        "loc": {
          "start": {
            "line": 32,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
        "start": 771,
        "end": 886,
        "loc": {
          "start": {
            "line": 37,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
        "start": 888,
        "end": 994,
        "loc": {
          "start": {
            "line": 42,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
        "start": 996,
        "end": 1132,
        "loc": {
          "start": {
            "line": 47,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
        "start": 1134,
        "end": 1251,
        "loc": {
          "start": {
            "line": 52,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
        "start": 1253,
        "end": 1377,
        "loc": {
          "start": {
            "line": 57,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
        "start": 1379,
        "end": 1497,
        "loc": {
          "start": {
            "line": 62,
            "column": 0
          },
          "end": {
            "line": 65,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
        "start": 1499,
        "end": 1566,
        "loc": {
          "start": {
            "line": 67,
            "column": 0
          },
          "end": {
            "line": 70,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {ndb}\n * https://github.com/GoogleChromeLabs/ndb\n ",
        "start": 1568,
        "end": 1637,
        "loc": {
          "start": {
            "line": 72,
            "column": 0
          },
          "end": {
            "line": 75,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
        "start": 1639,
        "end": 1907,
        "loc": {
          "start": {
            "line": 77,
            "column": 0
          },
          "end": {
            "line": 81,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
        "start": 1909,
        "end": 2105,
        "loc": {
          "start": {
            "line": 83,
            "column": 0
          },
          "end": {
            "line": 89,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
        "start": 2107,
        "end": 2372,
        "loc": {
          "start": {
            "line": 91,
            "column": 0
          },
          "end": {
            "line": 98,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
        "start": 2374,
        "end": 2641,
        "loc": {
          "start": {
            "line": 100,
            "column": 0
          },
          "end": {
            "line": 107,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
        "start": 2643,
        "end": 2921,
        "loc": {
          "start": {
            "line": 109,
            "column": 0
          },
          "end": {
            "line": 113,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
        "start": 2923,
        "end": 3427,
        "loc": {
          "start": {
            "line": 115,
            "column": 0
          },
          "end": {
            "line": 125,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutputPaths\n * @property {string} [js]\n * The path to generated Javascript files on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is:\n * - For `node` targets, on all build types: `[target-name].js`.\n * - For `browser` targets:\n *   - `development`: `'statics/js/[target-name].js'`.\n *   - `production`: `'statics/js/[target-name].[hash].js'`.\n * @property {string} [css]\n * The path to generated stylesheets on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/styles/[target-name].css'`.\n * - `production`: `'statics/styles/[target-name].[hash].css'`.\n * @property {string} [fonts]\n * The path to font files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/fonts/[name]/[name][ext]'`.\n * - `production`: `'statics/fonts/[name]/[name].[hash].[ext]'`.\n * @property {string} [fonts]\n * The path to image files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/images/[name][ext]'`.\n * - `production`: `'statics/images/[name].[hash].[ext]'`.\n ",
        "start": 3429,
        "end": 5442,
        "loc": {
          "start": {
            "line": 127,
            "column": 0
          },
          "end": {
            "line": 175,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutput\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [production]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
        "start": 5444,
        "end": 6063,
        "loc": {
          "start": {
            "line": 177,
            "column": 0
          },
          "end": {
            "line": 187,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateCopyItem\n * @property {string}  from The path to the file, relative to the target source directory.\n * @property {?string} to   The path where the file will be copied, relative to the target\n *                          distribution directory. If not specified, the file will be copied to\n *                          the root of the target distribution directory.\n ",
        "start": 6065,
        "end": 6490,
        "loc": {
          "start": {
            "line": 189,
            "column": 0
          },
          "end": {
            "line": 195,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetWatchOptions\n * @property {boolean} [development=false] Whether or not to watch the target files when it gets\n *                                         build for development. If the target type is Node and it\n *                                         doesn't require bundling nor transpiling, it won't do\n *                                         anything.\n * @property {boolean} [production=false]  Whether or not to watch the target files when it gets\n *                                         build for production.\n ",
        "start": 6492,
        "end": 7068,
        "loc": {
          "start": {
            "line": 197,
            "column": 0
          },
          "end": {
            "line": 205,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateBabelFeatures\n * @property {boolean} [classProperties=false]\n * This enables `@babel/plugin-proposal-class-properties` so the targets can use classes with\n * properties.\n * @property {boolean} [decorators=false]\n * This enables `@babel/plugin-proposal-decorators` so the targets can use decorators (based on\n * the current TC39 proposal).\n * @property {boolean} [dynamicImports=true]\n * This enables `@babel/plugin-syntax-dynamic-import` so the targets can do dynamic imports and\n * code splitting.\n * @property {boolean} [objectRestSpread=true]\n * This enables `@babel/plugin-proposal-object-rest-spread` so the targets can use rest and spread\n * with objects.\n ",
        "start": 7070,
        "end": 7794,
        "loc": {
          "start": {
            "line": 207,
            "column": 0
          },
          "end": {
            "line": 221,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
        "start": 7796,
        "end": 8093,
        "loc": {
          "start": {
            "line": 223,
            "column": 0
          },
          "end": {
            "line": 229,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typdef {Object} ProjectConfigurationTargetTemplateDotEnvSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature is enabled.\n * @property {Array} [files]\n * The list of files projext will try to find in order to load the variables. Based on the value\n * of `extend`, the way projext will process them may change.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[build-type]`: The type of bundle/build projext is creating (`development` or `production`).\n *\n * The default value is, for both `node` and `browser` targets:\n *\n * ```\n * [\n *   '.env.[target-name].[build-type]',\n *   '.env.[target-name]',\n *   '.env.[build-type]',\n *   '.env',\n * ]\n * ```\n * @property {boolean} [extend=true]\n * Whether or not projext should merge all the variables from all the files it can find.\n ",
        "start": 8095,
        "end": 8948,
        "loc": {
          "start": {
            "line": 231,
            "column": 0
          },
          "end": {
            "line": 255,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
        "start": 8950,
        "end": 9226,
        "loc": {
          "start": {
            "line": 257,
            "column": 0
          },
          "end": {
            "line": 261,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
        "start": 9228,
        "end": 9966,
        "loc": {
          "start": {
            "line": 263,
            "column": 0
          },
          "end": {
            "line": 274,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2` or `umd`.\n ",
        "start": 9968,
        "end": 10157,
        "loc": {
          "start": {
            "line": 276,
            "column": 0
          },
          "end": {
            "line": 280,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n ",
        "start": 10159,
        "end": 10411,
        "loc": {
          "start": {
            "line": 282,
            "column": 0
          },
          "end": {
            "line": 287,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetInspectSettings\n * @property {boolean} [enabled=false]     Whether or not to enable the Node inspector when running\n *                                         the app for development.\n * @property {string}  [host='0.0.0.0']    The host where the Node inspector will run.\n * @property {number}  [port=9229]         The port the Node inspector will use.\n * @property {string}  [command='inspect'] The Node inspector flag command (`inspect` or\n *                                         `inspect-brk`).\n * @property {boolean} [ndb=false]         Whether or not to use Google's {@link ndb} instead of\n *                                         the native inspector. The way it will be used will be\n *                                         by calling the executable without path, so it's up to\n *                                         the project to install it (global or local).\n ",
        "start": 10413,
        "end": 11350,
        "loc": {
          "start": {
            "line": 289,
            "column": 0
          },
          "end": {
            "line": 301,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
        "start": 11352,
        "end": 11631,
        "loc": {
          "start": {
            "line": 303,
            "column": 0
          },
          "end": {
            "line": 307,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
        "start": 11633,
        "end": 12422,
        "loc": {
          "start": {
            "line": 309,
            "column": 0
          },
          "end": {
            "line": 322,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n * @property {boolean} [inject=false]\n * If this setting is set to `true`, instead of generating a CSS file with your styles, they'll be\n * dynamically injected on HTML when the bundle gets executed.\n ",
        "start": 12424,
        "end": 12879,
        "loc": {
          "start": {
            "line": 324,
            "column": 0
          },
          "end": {
            "line": 332,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
        "start": 12881,
        "end": 13955,
        "loc": {
          "start": {
            "line": 334,
            "column": 0
          },
          "end": {
            "line": 351,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings\n * @property {string} [key=null]\n * The path to the SSL key (`.key`).\n * @property {string} [cert=null]\n * The path to the SSL certificate (`.crt`).\n * @property {string} [ca=null]\n * The path to the SSL public file (`.pem`).\n ",
        "start": 13957,
        "end": 14273,
        "loc": {
          "start": {
            "line": 353,
            "column": 0
          },
          "end": {
            "line": 361,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings\n * @property {boolean} [enabled=false]\n * Whether or not the dev server is being proxied.\n * @property {?string} [host=null]\n * The host used to proxy the dev server. If `null`, it will use the host defined on the dev server\n * main settings.\n * @property {?boolean} [https=null]\n * Whether or not the proxied host uses `https`. If `null` and you have provided SSL certificates\n * for the server, it will become `true`, otherwise it will be `false`.\n ",
        "start": 14275,
        "end": 14819,
        "loc": {
          "start": {
            "line": 363,
            "column": 0
          },
          "end": {
            "line": 373,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the browser when the code changes.\n * @property {boolean} [open=true]\n * Whether or not to open the browser when server is ready.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings} [ssl]\n * The paths to the files to enable SSL on the dev server.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings} [proxied]\n * When the dev server is being proxied (using `nginx` for example), there are certain\n * functionalities, like hot module replacement and live reload that need to be aware of this.\n ",
        "start": 14821,
        "end": 15641,
        "loc": {
          "start": {
            "line": 375,
            "column": 0
          },
          "end": {
            "line": 390,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
        "start": 15643,
        "end": 16840,
        "loc": {
          "start": {
            "line": 392,
            "column": 0
          },
          "end": {
            "line": 413,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='umd']\n * How the library will be exposed: `commonjs2`, `umd` or `window`.\n * @property {boolean} [compress=false]\n * Whether or not to use gzip compression on the generated library file.\n ",
        "start": 16842,
        "end": 17151,
        "loc": {
          "start": {
            "line": 415,
            "column": 0
          },
          "end": {
            "line": 421,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
        "start": 17153,
        "end": 17423,
        "loc": {
          "start": {
            "line": 423,
            "column": 0
          },
          "end": {
            "line": 427,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} [inspect]\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * @property {Array} [excludeModules=[]]\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
        "start": 17425,
        "end": 22062,
        "loc": {
          "start": {
            "line": 429,
            "column": 0
          },
          "end": {
            "line": 501,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} inspect\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} excludeModules\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
        "start": 22064,
        "end": 27259,
        "loc": {
          "start": {
            "line": 503,
            "column": 0
          },
          "end": {
            "line": 587,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
        "start": 27261,
        "end": 27534,
        "loc": {
          "start": {
            "line": 589,
            "column": 0
          },
          "end": {
            "line": 593,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [uglifyOnProduction=true]\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
        "start": 27536,
        "end": 32101,
        "loc": {
          "start": {
            "line": 595,
            "column": 0
          },
          "end": {
            "line": 664,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} uglifyOnProduction\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
        "start": 32103,
        "end": 37069,
        "loc": {
          "start": {
            "line": 666,
            "column": 0
          },
          "end": {
            "line": 745,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
        "start": 37071,
        "end": 37320,
        "loc": {
          "start": {
            "line": 747,
            "column": 0
          },
          "end": {
            "line": 751,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
        "start": 37322,
        "end": 38061,
        "loc": {
          "start": {
            "line": 753,
            "column": 0
          },
          "end": {
            "line": 765,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
        "start": 38063,
        "end": 38384,
        "loc": {
          "start": {
            "line": 767,
            "column": 0
          },
          "end": {
            "line": 773,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
        "start": 38386,
        "end": 38961,
        "loc": {
          "start": {
            "line": 775,
            "column": 0
          },
          "end": {
            "line": 785,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
        "start": 38963,
        "end": 39452,
        "loc": {
          "start": {
            "line": 787,
            "column": 0
          },
          "end": {
            "line": 797,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
        "start": 39454,
        "end": 40058,
        "loc": {
          "start": {
            "line": 799,
            "column": 0
          },
          "end": {
            "line": 811,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
        "start": 40060,
        "end": 40926,
        "loc": {
          "start": {
            "line": 813,
            "column": 0
          },
          "end": {
            "line": 827,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetFinderSettings\n * @property {boolean} [enabled=true]\n * Whether or not to automatically search for targets on the project folders.\n ",
        "start": 40928,
        "end": 41113,
        "loc": {
          "start": {
            "line": 829,
            "column": 0
          },
          "end": {
            "line": 833,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
        "start": 41115,
        "end": 41346,
        "loc": {
          "start": {
            "line": 835,
            "column": 0
          },
          "end": {
            "line": 840,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodemonSettings\n * @property {boolean} [legacyWatch=true]\n * Whether or not to enable `nodemon` legacy watch mode.\n ",
        "start": 41348,
        "end": 41511,
        "loc": {
          "start": {
            "line": 842,
            "column": 0
          },
          "end": {
            "line": 846,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationTargetFinderSettings}\n * These are the settings for projext _\"targets finder\"_, the feature that reads the project in\n * order to identify targets and their settings.\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n * @property {ProjectConfigurationNodemonSettings}\n * This is used by projext to configure `nodemon`, which is used to execute and watch Node targets.\n ",
        "start": 41513,
        "end": 42094,
        "loc": {
          "start": {
            "line": 848,
            "column": 0
          },
          "end": {
            "line": 858,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
        "start": 42096,
        "end": 43094,
        "loc": {
          "start": {
            "line": 860,
            "column": 0
          },
          "end": {
            "line": 876,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
        "start": 43096,
        "end": 43345,
        "loc": {
          "start": {
            "line": 878,
            "column": 0
          },
          "end": {
            "line": 882,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
        "start": 43347,
        "end": 43400,
        "loc": {
          "start": {
            "line": 884,
            "column": 0
          },
          "end": {
            "line": 886,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
        "start": 43402,
        "end": 43682,
        "loc": {
          "start": {
            "line": 888,
            "column": 0
          },
          "end": {
            "line": 895,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetDefaultHTMLSettings\n * @property {string} title The value of the `<title />` tag.\n * @property {string} bodyAttributes Extra attributes for the `<body />` tag.\n * @property {string} bodyContents The content of the `<body />` tag.\n ",
        "start": 43684,
        "end": 43948,
        "loc": {
          "start": {
            "line": 897,
            "column": 0
          },
          "end": {
            "line": 902,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFileRulePathSettings\n * @property {Array} include The list of expressions that match the allowed paths for a rule.\n * @property {Array} exclude The list of expressions that match the paths that should be excluded\n *                           from a rule.\n ",
        "start": 43950,
        "end": 44239,
        "loc": {
          "start": {
            "line": 904,
            "column": 0
          },
          "end": {
            "line": 909,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFileRuleGlobFilesSettings\n * @property {Array} include The list of glob patterns that match the allowed files for a rule.\n * @property {Array} exclude The list of glob patterns that match the files that should be excluded\n *                           from a rule.\n ",
        "start": 44241,
        "end": 44539,
        "loc": {
          "start": {
            "line": 911,
            "column": 0
          },
          "end": {
            "line": 916,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFileRuleFilesSettings\n * @property {Array}                           include The list of expressions that match the\n *                                                     allowed files for a rule.\n * @property {Array}                           exclude The list of expressions that match the\n *                                                     files that should be excluded from a rule.\n * @property {TargetFileRuleGlobFilesSettings} glob    The settings for files but on glob pattern\n *                                                     version. For plugins and libraries that\n *                                                     don't support, or maybe prefer glob over,\n *                                                     expressions.\n ",
        "start": 44541,
        "end": 45322,
        "loc": {
          "start": {
            "line": 918,
            "column": 0
          },
          "end": {
            "line": 928,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFileRuleSettings\n * @property {RegExp}                      extension A expression that validates the extension(s)\n *                                                   the rule is for.\n * @property {string}                      glob      A glob pattern that validates the extension(s)\n *                                                   the rule is for.\n * @property {TargetFileRulePathSettings}  paths     A set of allowed and excluded expressions to\n *                                                   validate the paths where the files can be\n *                                                   found.\n * @property {TargetFileRuleFilesSettings} files     A set of allowed and excluded expressions and\n *                                                   glob patterns for files that would match with\n *                                                   the rule.\n ",
        "start": 45324,
        "end": 46227,
        "loc": {
          "start": {
            "line": 930,
            "column": 0
          },
          "end": {
            "line": 942,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} TargetFileRuleHandler\n * @param {Target}                 target      The target information.\n * @param {boolean}                hasTarget   Whether or not the rule already has a target, or if\n *                                             this is the first one being added.\n * @param {TargetFileRuleSettings} currentRule The current settings of the rule.\n ",
        "start": 46229,
        "end": 46614,
        "loc": {
          "start": {
            "line": 944,
            "column": 0
          },
          "end": {
            "line": 950,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFontsFileRules\n * @property {TargetFileRule} common The rule for all font files that aren't SVG.\n * @property {TargetFileRule} svg    The rule for SVG fonts.\n ",
        "start": 46616,
        "end": 46808,
        "loc": {
          "start": {
            "line": 952,
            "column": 0
          },
          "end": {
            "line": 956,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFilesRules\n * @property {TargetFileRule}       js      The rule for JS files.\n * @property {TargetFileRule}       scss    The rule for SCSS files.\n * @property {TargetFileRule}       css     The rule for CSS files.\n * @property {TargetFontsFileRules} fonts   The rules for font files.\n * @property {TargetFileRule}       images  The rule for image files.\n * @property {TargetFileRule}       favicon The rule for favicon files.\n ",
        "start": 46810,
        "end": 47271,
        "loc": {
          "start": {
            "line": 958,
            "column": 0
          },
          "end": {
            "line": 966,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} TargetExtraFileTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
        "start": 47273,
        "end": 47448,
        "loc": {
          "start": {
            "line": 968,
            "column": 0
          },
          "end": {
            "line": 972,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetExtraFile\n * @property {string}                    from      The file origin path.\n * @property {string}                    to        The file destination path.\n * @property {?TargetExtraFileTransform} transform A custom function to modify the contents of\n *                                                 the file to copy.\n ",
        "start": 47450,
        "end": 47809,
        "loc": {
          "start": {
            "line": 974,
            "column": 0
          },
          "end": {
            "line": 980,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} NodeInspectorSettings\n * @property {boolean} enabled Whether or not to enable the Node inspector.\n * @property {string}  host    The host where the Node inspector will run.\n * @property {number}  port    The port where the Node inspector will run.\n * @property {string}  command The Node inspector flag command (`inspect` or `inspect-brk`).\n * @property {boolean} ndb     Whether or not to use Google's {@link ndb} instead of the native\n *                             inspector. The way it will be used will be by calling the\n *                             executable without path, so it's up to the project to install it\n *                             (global or local).\n ",
        "start": 47811,
        "end": 48511,
        "loc": {
          "start": {
            "line": 982,
            "column": 0
          },
          "end": {
            "line": 992,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
        "start": 48513,
        "end": 48736,
        "loc": {
          "start": {
            "line": 994,
            "column": 0
          },
          "end": {
            "line": 998,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @param {boolean} [forceWatch=false]\n * Force the build engine to watch the target files even if the `watch` setting for the required\n * build type is set to `false`.\n * @param {boolean} [forceInspect=false]\n * Force the build engine to use the Node inspector even if the target setting is disabled. This\n * only applies for Node targets.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
        "start": 48738,
        "end": 49469,
        "loc": {
          "start": {
            "line": 1000,
            "column": 0
          },
          "end": {
            "line": 1016,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
        "start": 49471,
        "end": 49658,
        "loc": {
          "start": {
            "line": 1018,
            "column": 0
          },
          "end": {
            "line": 1022,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Building\n * ================================================================================================\n ",
        "start": 49660,
        "end": 49879,
        "loc": {
          "start": {
            "line": 1024,
            "column": 0
          },
          "end": {
            "line": 1028,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} CLIBuildCommandParams\n * @property {Target}  target  The target information.\n * @property {string}  type    The intended build type: `development` or `production`.\n * @property {boolean} run     Whether or not the target needs to be executed.\n * @property {boolean} build   Whether or not a build will be created. This is always `true` for\n *                             browser targets but it may be false for Node targets if bundling and\n *                             transpiling is disabled.\n * @property {boolean} watch   Whether or not the target files will be watched.\n * @property {boolean} inspect Whether or not to enable the Node inspector.\n ",
        "start": 49881,
        "end": 50561,
        "loc": {
          "start": {
            "line": 1030,
            "column": 0
          },
          "end": {
            "line": 1040,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
        "start": 50563,
        "end": 50780,
        "loc": {
          "start": {
            "line": 1042,
            "column": 0
          },
          "end": {
            "line": 1046,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
        "start": 50782,
        "end": 50921,
        "loc": {
          "start": {
            "line": 1048,
            "column": 0
          },
          "end": {
            "line": 1052,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
        "start": 50923,
        "end": 51080,
        "loc": {
          "start": {
            "line": 1054,
            "column": 0
          },
          "end": {
            "line": 1058,
            "column": 3
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
      "start": 294,
      "end": 390,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
      "start": 392,
      "end": 468,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
      "start": 470,
      "end": 546,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {WatchpackOptions}\n * https://github.com/webpack/watchpack#api\n ",
      "start": 548,
      "end": 631,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
      "start": 633,
      "end": 769,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 771,
      "end": 886,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 888,
      "end": 994,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 996,
      "end": 1132,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
      "start": 1134,
      "end": 1251,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
      "start": 1253,
      "end": 1377,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
      "start": 1379,
      "end": 1497,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
      "start": 1499,
      "end": 1566,
      "loc": {
        "start": {
          "line": 67,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ndb}\n * https://github.com/GoogleChromeLabs/ndb\n ",
      "start": 1568,
      "end": 1637,
      "loc": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
      "start": 1639,
      "end": 1907,
      "loc": {
        "start": {
          "line": 77,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
      "start": 1909,
      "end": 2105,
      "loc": {
        "start": {
          "line": 83,
          "column": 0
        },
        "end": {
          "line": 89,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2107,
      "end": 2372,
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2374,
      "end": 2641,
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
      "start": 2643,
      "end": 2921,
      "loc": {
        "start": {
          "line": 109,
          "column": 0
        },
        "end": {
          "line": 113,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
      "start": 2923,
      "end": 3427,
      "loc": {
        "start": {
          "line": 115,
          "column": 0
        },
        "end": {
          "line": 125,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutputPaths\n * @property {string} [js]\n * The path to generated Javascript files on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is:\n * - For `node` targets, on all build types: `[target-name].js`.\n * - For `browser` targets:\n *   - `development`: `'statics/js/[target-name].js'`.\n *   - `production`: `'statics/js/[target-name].[hash].js'`.\n * @property {string} [css]\n * The path to generated stylesheets on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/styles/[target-name].css'`.\n * - `production`: `'statics/styles/[target-name].[hash].css'`.\n * @property {string} [fonts]\n * The path to font files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/fonts/[name]/[name][ext]'`.\n * - `production`: `'statics/fonts/[name]/[name].[hash].[ext]'`.\n * @property {string} [fonts]\n * The path to image files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/images/[name][ext]'`.\n * - `production`: `'statics/images/[name].[hash].[ext]'`.\n ",
      "start": 3429,
      "end": 5442,
      "loc": {
        "start": {
          "line": 127,
          "column": 0
        },
        "end": {
          "line": 175,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutput\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [production]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
      "start": 5444,
      "end": 6063,
      "loc": {
        "start": {
          "line": 177,
          "column": 0
        },
        "end": {
          "line": 187,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateCopyItem\n * @property {string}  from The path to the file, relative to the target source directory.\n * @property {?string} to   The path where the file will be copied, relative to the target\n *                          distribution directory. If not specified, the file will be copied to\n *                          the root of the target distribution directory.\n ",
      "start": 6065,
      "end": 6490,
      "loc": {
        "start": {
          "line": 189,
          "column": 0
        },
        "end": {
          "line": 195,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetWatchOptions\n * @property {boolean} [development=false] Whether or not to watch the target files when it gets\n *                                         build for development. If the target type is Node and it\n *                                         doesn't require bundling nor transpiling, it won't do\n *                                         anything.\n * @property {boolean} [production=false]  Whether or not to watch the target files when it gets\n *                                         build for production.\n ",
      "start": 6492,
      "end": 7068,
      "loc": {
        "start": {
          "line": 197,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateBabelFeatures\n * @property {boolean} [classProperties=false]\n * This enables `@babel/plugin-proposal-class-properties` so the targets can use classes with\n * properties.\n * @property {boolean} [decorators=false]\n * This enables `@babel/plugin-proposal-decorators` so the targets can use decorators (based on\n * the current TC39 proposal).\n * @property {boolean} [dynamicImports=true]\n * This enables `@babel/plugin-syntax-dynamic-import` so the targets can do dynamic imports and\n * code splitting.\n * @property {boolean} [objectRestSpread=true]\n * This enables `@babel/plugin-proposal-object-rest-spread` so the targets can use rest and spread\n * with objects.\n ",
      "start": 7070,
      "end": 7794,
      "loc": {
        "start": {
          "line": 207,
          "column": 0
        },
        "end": {
          "line": 221,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
      "start": 7796,
      "end": 8093,
      "loc": {
        "start": {
          "line": 223,
          "column": 0
        },
        "end": {
          "line": 229,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typdef {Object} ProjectConfigurationTargetTemplateDotEnvSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature is enabled.\n * @property {Array} [files]\n * The list of files projext will try to find in order to load the variables. Based on the value\n * of `extend`, the way projext will process them may change.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[build-type]`: The type of bundle/build projext is creating (`development` or `production`).\n *\n * The default value is, for both `node` and `browser` targets:\n *\n * ```\n * [\n *   '.env.[target-name].[build-type]',\n *   '.env.[target-name]',\n *   '.env.[build-type]',\n *   '.env',\n * ]\n * ```\n * @property {boolean} [extend=true]\n * Whether or not projext should merge all the variables from all the files it can find.\n ",
      "start": 8095,
      "end": 8948,
      "loc": {
        "start": {
          "line": 231,
          "column": 0
        },
        "end": {
          "line": 255,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
      "start": 8950,
      "end": 9226,
      "loc": {
        "start": {
          "line": 257,
          "column": 0
        },
        "end": {
          "line": 261,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 9228,
      "end": 9966,
      "loc": {
        "start": {
          "line": 263,
          "column": 0
        },
        "end": {
          "line": 274,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2` or `umd`.\n ",
      "start": 9968,
      "end": 10157,
      "loc": {
        "start": {
          "line": 276,
          "column": 0
        },
        "end": {
          "line": 280,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n ",
      "start": 10159,
      "end": 10411,
      "loc": {
        "start": {
          "line": 282,
          "column": 0
        },
        "end": {
          "line": 287,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetInspectSettings\n * @property {boolean} [enabled=false]     Whether or not to enable the Node inspector when running\n *                                         the app for development.\n * @property {string}  [host='0.0.0.0']    The host where the Node inspector will run.\n * @property {number}  [port=9229]         The port the Node inspector will use.\n * @property {string}  [command='inspect'] The Node inspector flag command (`inspect` or\n *                                         `inspect-brk`).\n * @property {boolean} [ndb=false]         Whether or not to use Google's {@link ndb} instead of\n *                                         the native inspector. The way it will be used will be\n *                                         by calling the executable without path, so it's up to\n *                                         the project to install it (global or local).\n ",
      "start": 10413,
      "end": 11350,
      "loc": {
        "start": {
          "line": 289,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
      "start": 11352,
      "end": 11631,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 307,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
      "start": 11633,
      "end": 12422,
      "loc": {
        "start": {
          "line": 309,
          "column": 0
        },
        "end": {
          "line": 322,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n * @property {boolean} [inject=false]\n * If this setting is set to `true`, instead of generating a CSS file with your styles, they'll be\n * dynamically injected on HTML when the bundle gets executed.\n ",
      "start": 12424,
      "end": 12879,
      "loc": {
        "start": {
          "line": 324,
          "column": 0
        },
        "end": {
          "line": 332,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 12881,
      "end": 13955,
      "loc": {
        "start": {
          "line": 334,
          "column": 0
        },
        "end": {
          "line": 351,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings\n * @property {string} [key=null]\n * The path to the SSL key (`.key`).\n * @property {string} [cert=null]\n * The path to the SSL certificate (`.crt`).\n * @property {string} [ca=null]\n * The path to the SSL public file (`.pem`).\n ",
      "start": 13957,
      "end": 14273,
      "loc": {
        "start": {
          "line": 353,
          "column": 0
        },
        "end": {
          "line": 361,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings\n * @property {boolean} [enabled=false]\n * Whether or not the dev server is being proxied.\n * @property {?string} [host=null]\n * The host used to proxy the dev server. If `null`, it will use the host defined on the dev server\n * main settings.\n * @property {?boolean} [https=null]\n * Whether or not the proxied host uses `https`. If `null` and you have provided SSL certificates\n * for the server, it will become `true`, otherwise it will be `false`.\n ",
      "start": 14275,
      "end": 14819,
      "loc": {
        "start": {
          "line": 363,
          "column": 0
        },
        "end": {
          "line": 373,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the browser when the code changes.\n * @property {boolean} [open=true]\n * Whether or not to open the browser when server is ready.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings} [ssl]\n * The paths to the files to enable SSL on the dev server.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings} [proxied]\n * When the dev server is being proxied (using `nginx` for example), there are certain\n * functionalities, like hot module replacement and live reload that need to be aware of this.\n ",
      "start": 14821,
      "end": 15641,
      "loc": {
        "start": {
          "line": 375,
          "column": 0
        },
        "end": {
          "line": 390,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
      "start": 15643,
      "end": 16840,
      "loc": {
        "start": {
          "line": 392,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='umd']\n * How the library will be exposed: `commonjs2`, `umd` or `window`.\n * @property {boolean} [compress=false]\n * Whether or not to use gzip compression on the generated library file.\n ",
      "start": 16842,
      "end": 17151,
      "loc": {
        "start": {
          "line": 415,
          "column": 0
        },
        "end": {
          "line": 421,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
      "start": 17153,
      "end": 17423,
      "loc": {
        "start": {
          "line": 423,
          "column": 0
        },
        "end": {
          "line": 427,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} [inspect]\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * @property {Array} [excludeModules=[]]\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
      "start": 17425,
      "end": 22062,
      "loc": {
        "start": {
          "line": 429,
          "column": 0
        },
        "end": {
          "line": 501,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} inspect\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} excludeModules\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
      "start": 22064,
      "end": 27259,
      "loc": {
        "start": {
          "line": 503,
          "column": 0
        },
        "end": {
          "line": 587,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
      "start": 27261,
      "end": 27534,
      "loc": {
        "start": {
          "line": 589,
          "column": 0
        },
        "end": {
          "line": 593,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [uglifyOnProduction=true]\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
      "start": 27536,
      "end": 32101,
      "loc": {
        "start": {
          "line": 595,
          "column": 0
        },
        "end": {
          "line": 664,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} uglifyOnProduction\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 32103,
      "end": 37069,
      "loc": {
        "start": {
          "line": 666,
          "column": 0
        },
        "end": {
          "line": 745,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
      "start": 37071,
      "end": 37320,
      "loc": {
        "start": {
          "line": 747,
          "column": 0
        },
        "end": {
          "line": 751,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
      "start": 37322,
      "end": 38061,
      "loc": {
        "start": {
          "line": 753,
          "column": 0
        },
        "end": {
          "line": 765,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
      "start": 38063,
      "end": 38384,
      "loc": {
        "start": {
          "line": 767,
          "column": 0
        },
        "end": {
          "line": 773,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
      "start": 38386,
      "end": 38961,
      "loc": {
        "start": {
          "line": 775,
          "column": 0
        },
        "end": {
          "line": 785,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 38963,
      "end": 39452,
      "loc": {
        "start": {
          "line": 787,
          "column": 0
        },
        "end": {
          "line": 797,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 39454,
      "end": 40058,
      "loc": {
        "start": {
          "line": 799,
          "column": 0
        },
        "end": {
          "line": 811,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
      "start": 40060,
      "end": 40926,
      "loc": {
        "start": {
          "line": 813,
          "column": 0
        },
        "end": {
          "line": 827,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetFinderSettings\n * @property {boolean} [enabled=true]\n * Whether or not to automatically search for targets on the project folders.\n ",
      "start": 40928,
      "end": 41113,
      "loc": {
        "start": {
          "line": 829,
          "column": 0
        },
        "end": {
          "line": 833,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
      "start": 41115,
      "end": 41346,
      "loc": {
        "start": {
          "line": 835,
          "column": 0
        },
        "end": {
          "line": 840,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodemonSettings\n * @property {boolean} [legacyWatch=true]\n * Whether or not to enable `nodemon` legacy watch mode.\n ",
      "start": 41348,
      "end": 41511,
      "loc": {
        "start": {
          "line": 842,
          "column": 0
        },
        "end": {
          "line": 846,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationTargetFinderSettings}\n * These are the settings for projext _\"targets finder\"_, the feature that reads the project in\n * order to identify targets and their settings.\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n * @property {ProjectConfigurationNodemonSettings}\n * This is used by projext to configure `nodemon`, which is used to execute and watch Node targets.\n ",
      "start": 41513,
      "end": 42094,
      "loc": {
        "start": {
          "line": 848,
          "column": 0
        },
        "end": {
          "line": 858,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
      "start": 42096,
      "end": 43094,
      "loc": {
        "start": {
          "line": 860,
          "column": 0
        },
        "end": {
          "line": 876,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
      "start": 43096,
      "end": 43345,
      "loc": {
        "start": {
          "line": 878,
          "column": 0
        },
        "end": {
          "line": 882,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
      "start": 43347,
      "end": 43400,
      "loc": {
        "start": {
          "line": 884,
          "column": 0
        },
        "end": {
          "line": 886,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
      "start": 43402,
      "end": 43682,
      "loc": {
        "start": {
          "line": 888,
          "column": 0
        },
        "end": {
          "line": 895,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetDefaultHTMLSettings\n * @property {string} title The value of the `<title />` tag.\n * @property {string} bodyAttributes Extra attributes for the `<body />` tag.\n * @property {string} bodyContents The content of the `<body />` tag.\n ",
      "start": 43684,
      "end": 43948,
      "loc": {
        "start": {
          "line": 897,
          "column": 0
        },
        "end": {
          "line": 902,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRulePathSettings\n * @property {Array} include The list of expressions that match the allowed paths for a rule.\n * @property {Array} exclude The list of expressions that match the paths that should be excluded\n *                           from a rule.\n ",
      "start": 43950,
      "end": 44239,
      "loc": {
        "start": {
          "line": 904,
          "column": 0
        },
        "end": {
          "line": 909,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleGlobFilesSettings\n * @property {Array} include The list of glob patterns that match the allowed files for a rule.\n * @property {Array} exclude The list of glob patterns that match the files that should be excluded\n *                           from a rule.\n ",
      "start": 44241,
      "end": 44539,
      "loc": {
        "start": {
          "line": 911,
          "column": 0
        },
        "end": {
          "line": 916,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleFilesSettings\n * @property {Array}                           include The list of expressions that match the\n *                                                     allowed files for a rule.\n * @property {Array}                           exclude The list of expressions that match the\n *                                                     files that should be excluded from a rule.\n * @property {TargetFileRuleGlobFilesSettings} glob    The settings for files but on glob pattern\n *                                                     version. For plugins and libraries that\n *                                                     don't support, or maybe prefer glob over,\n *                                                     expressions.\n ",
      "start": 44541,
      "end": 45322,
      "loc": {
        "start": {
          "line": 918,
          "column": 0
        },
        "end": {
          "line": 928,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleSettings\n * @property {RegExp}                      extension A expression that validates the extension(s)\n *                                                   the rule is for.\n * @property {string}                      glob      A glob pattern that validates the extension(s)\n *                                                   the rule is for.\n * @property {TargetFileRulePathSettings}  paths     A set of allowed and excluded expressions to\n *                                                   validate the paths where the files can be\n *                                                   found.\n * @property {TargetFileRuleFilesSettings} files     A set of allowed and excluded expressions and\n *                                                   glob patterns for files that would match with\n *                                                   the rule.\n ",
      "start": 45324,
      "end": 46227,
      "loc": {
        "start": {
          "line": 930,
          "column": 0
        },
        "end": {
          "line": 942,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetFileRuleHandler\n * @param {Target}                 target      The target information.\n * @param {boolean}                hasTarget   Whether or not the rule already has a target, or if\n *                                             this is the first one being added.\n * @param {TargetFileRuleSettings} currentRule The current settings of the rule.\n ",
      "start": 46229,
      "end": 46614,
      "loc": {
        "start": {
          "line": 944,
          "column": 0
        },
        "end": {
          "line": 950,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFontsFileRules\n * @property {TargetFileRule} common The rule for all font files that aren't SVG.\n * @property {TargetFileRule} svg    The rule for SVG fonts.\n ",
      "start": 46616,
      "end": 46808,
      "loc": {
        "start": {
          "line": 952,
          "column": 0
        },
        "end": {
          "line": 956,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFilesRules\n * @property {TargetFileRule}       js      The rule for JS files.\n * @property {TargetFileRule}       scss    The rule for SCSS files.\n * @property {TargetFileRule}       css     The rule for CSS files.\n * @property {TargetFontsFileRules} fonts   The rules for font files.\n * @property {TargetFileRule}       images  The rule for image files.\n * @property {TargetFileRule}       favicon The rule for favicon files.\n ",
      "start": 46810,
      "end": 47271,
      "loc": {
        "start": {
          "line": 958,
          "column": 0
        },
        "end": {
          "line": 966,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetExtraFileTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
      "start": 47273,
      "end": 47448,
      "loc": {
        "start": {
          "line": 968,
          "column": 0
        },
        "end": {
          "line": 972,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetExtraFile\n * @property {string}                    from      The file origin path.\n * @property {string}                    to        The file destination path.\n * @property {?TargetExtraFileTransform} transform A custom function to modify the contents of\n *                                                 the file to copy.\n ",
      "start": 47450,
      "end": 47809,
      "loc": {
        "start": {
          "line": 974,
          "column": 0
        },
        "end": {
          "line": 980,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeInspectorSettings\n * @property {boolean} enabled Whether or not to enable the Node inspector.\n * @property {string}  host    The host where the Node inspector will run.\n * @property {number}  port    The port where the Node inspector will run.\n * @property {string}  command The Node inspector flag command (`inspect` or `inspect-brk`).\n * @property {boolean} ndb     Whether or not to use Google's {@link ndb} instead of the native\n *                             inspector. The way it will be used will be by calling the\n *                             executable without path, so it's up to the project to install it\n *                             (global or local).\n ",
      "start": 47811,
      "end": 48511,
      "loc": {
        "start": {
          "line": 982,
          "column": 0
        },
        "end": {
          "line": 992,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
      "start": 48513,
      "end": 48736,
      "loc": {
        "start": {
          "line": 994,
          "column": 0
        },
        "end": {
          "line": 998,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @param {boolean} [forceWatch=false]\n * Force the build engine to watch the target files even if the `watch` setting for the required\n * build type is set to `false`.\n * @param {boolean} [forceInspect=false]\n * Force the build engine to use the Node inspector even if the target setting is disabled. This\n * only applies for Node targets.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
      "start": 48738,
      "end": 49469,
      "loc": {
        "start": {
          "line": 1000,
          "column": 0
        },
        "end": {
          "line": 1016,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
      "start": 49471,
      "end": 49658,
      "loc": {
        "start": {
          "line": 1018,
          "column": 0
        },
        "end": {
          "line": 1022,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Building\n * ================================================================================================\n ",
      "start": 49660,
      "end": 49879,
      "loc": {
        "start": {
          "line": 1024,
          "column": 0
        },
        "end": {
          "line": 1028,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} CLIBuildCommandParams\n * @property {Target}  target  The target information.\n * @property {string}  type    The intended build type: `development` or `production`.\n * @property {boolean} run     Whether or not the target needs to be executed.\n * @property {boolean} build   Whether or not a build will be created. This is always `true` for\n *                             browser targets but it may be false for Node targets if bundling and\n *                             transpiling is disabled.\n * @property {boolean} watch   Whether or not the target files will be watched.\n * @property {boolean} inspect Whether or not to enable the Node inspector.\n ",
      "start": 49881,
      "end": 50561,
      "loc": {
        "start": {
          "line": 1030,
          "column": 0
        },
        "end": {
          "line": 1040,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 50563,
      "end": 50780,
      "loc": {
        "start": {
          "line": 1042,
          "column": 0
        },
        "end": {
          "line": 1046,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
      "start": 50782,
      "end": 50921,
      "loc": {
        "start": {
          "line": 1048,
          "column": 0
        },
        "end": {
          "line": 1052,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
      "start": 50923,
      "end": 51080,
      "loc": {
        "start": {
          "line": 1054,
          "column": 0
        },
        "end": {
          "line": 1058,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
      "start": 294,
      "end": 390,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
      "start": 392,
      "end": 468,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
      "start": 470,
      "end": 546,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {WatchpackOptions}\n * https://github.com/webpack/watchpack#api\n ",
      "start": 548,
      "end": 631,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
      "start": 633,
      "end": 769,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 771,
      "end": 886,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 888,
      "end": 994,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 996,
      "end": 1132,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
      "start": 1134,
      "end": 1251,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
      "start": 1253,
      "end": 1377,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
      "start": 1379,
      "end": 1497,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 65,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Buffer}\n * https://nodejs.org/api/buffer.html\n ",
      "start": 1499,
      "end": 1566,
      "loc": {
        "start": {
          "line": 67,
          "column": 0
        },
        "end": {
          "line": 70,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ndb}\n * https://github.com/GoogleChromeLabs/ndb\n ",
      "start": 1568,
      "end": 1637,
      "loc": {
        "start": {
          "line": 72,
          "column": 0
        },
        "end": {
          "line": 75,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
      "start": 1639,
      "end": 1907,
      "loc": {
        "start": {
          "line": 77,
          "column": 0
        },
        "end": {
          "line": 81,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
      "start": 1909,
      "end": 2105,
      "loc": {
        "start": {
          "line": 83,
          "column": 0
        },
        "end": {
          "line": 89,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2107,
      "end": 2372,
      "loc": {
        "start": {
          "line": 91,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2374,
      "end": 2641,
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
      "start": 2643,
      "end": 2921,
      "loc": {
        "start": {
          "line": 109,
          "column": 0
        },
        "end": {
          "line": 113,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
      "start": 2923,
      "end": 3427,
      "loc": {
        "start": {
          "line": 115,
          "column": 0
        },
        "end": {
          "line": 125,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutputPaths\n * @property {string} [js]\n * The path to generated Javascript files on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is:\n * - For `node` targets, on all build types: `[target-name].js`.\n * - For `browser` targets:\n *   - `development`: `'statics/js/[target-name].js'`.\n *   - `production`: `'statics/js/[target-name].[hash].js'`.\n * @property {string} [css]\n * The path to generated stylesheets on the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/styles/[target-name].css'`.\n * - `production`: `'statics/styles/[target-name].[hash].css'`.\n * @property {string} [fonts]\n * The path to font files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/fonts/[name]/[name][ext]'`.\n * - `production`: `'statics/fonts/[name]/[name].[hash].[ext]'`.\n * @property {string} [fonts]\n * The path to image files once they are copied to the distribution directory.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n *\n * The default value is, for both `node` and `browser` targets:\n * - `development`: `'statics/images/[name][ext]'`.\n * - `production`: `'statics/images/[name].[hash].[ext]'`.\n ",
      "start": 3429,
      "end": 5442,
      "loc": {
        "start": {
          "line": 127,
          "column": 0
        },
        "end": {
          "line": 175,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateOutput\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationTargetTemplateOutputPaths} [production]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
      "start": 5444,
      "end": 6063,
      "loc": {
        "start": {
          "line": 177,
          "column": 0
        },
        "end": {
          "line": 187,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateCopyItem\n * @property {string}  from The path to the file, relative to the target source directory.\n * @property {?string} to   The path where the file will be copied, relative to the target\n *                          distribution directory. If not specified, the file will be copied to\n *                          the root of the target distribution directory.\n ",
      "start": 6065,
      "end": 6490,
      "loc": {
        "start": {
          "line": 189,
          "column": 0
        },
        "end": {
          "line": 195,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetWatchOptions\n * @property {boolean} [development=false] Whether or not to watch the target files when it gets\n *                                         build for development. If the target type is Node and it\n *                                         doesn't require bundling nor transpiling, it won't do\n *                                         anything.\n * @property {boolean} [production=false]  Whether or not to watch the target files when it gets\n *                                         build for production.\n ",
      "start": 6492,
      "end": 7068,
      "loc": {
        "start": {
          "line": 197,
          "column": 0
        },
        "end": {
          "line": 205,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateBabelFeatures\n * @property {boolean} [classProperties=false]\n * This enables `@babel/plugin-proposal-class-properties` so the targets can use classes with\n * properties.\n * @property {boolean} [decorators=false]\n * This enables `@babel/plugin-proposal-decorators` so the targets can use decorators (based on\n * the current TC39 proposal).\n * @property {boolean} [dynamicImports=true]\n * This enables `@babel/plugin-syntax-dynamic-import` so the targets can do dynamic imports and\n * code splitting.\n * @property {boolean} [objectRestSpread=true]\n * This enables `@babel/plugin-proposal-object-rest-spread` so the targets can use rest and spread\n * with objects.\n ",
      "start": 7070,
      "end": 7794,
      "loc": {
        "start": {
          "line": 207,
          "column": 0
        },
        "end": {
          "line": 221,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
      "start": 7796,
      "end": 8093,
      "loc": {
        "start": {
          "line": 223,
          "column": 0
        },
        "end": {
          "line": 229,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typdef {Object} ProjectConfigurationTargetTemplateDotEnvSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature is enabled.\n * @property {Array} [files]\n * The list of files projext will try to find in order to load the variables. Based on the value\n * of `extend`, the way projext will process them may change.\n *\n * The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[build-type]`: The type of bundle/build projext is creating (`development` or `production`).\n *\n * The default value is, for both `node` and `browser` targets:\n *\n * ```\n * [\n *   '.env.[target-name].[build-type]',\n *   '.env.[target-name]',\n *   '.env.[build-type]',\n *   '.env',\n * ]\n * ```\n * @property {boolean} [extend=true]\n * Whether or not projext should merge all the variables from all the files it can find.\n ",
      "start": 8095,
      "end": 8948,
      "loc": {
        "start": {
          "line": 231,
          "column": 0
        },
        "end": {
          "line": 255,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
      "start": 8950,
      "end": 9226,
      "loc": {
        "start": {
          "line": 257,
          "column": 0
        },
        "end": {
          "line": 261,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 9228,
      "end": 9966,
      "loc": {
        "start": {
          "line": 263,
          "column": 0
        },
        "end": {
          "line": 274,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2` or `umd`.\n ",
      "start": 9968,
      "end": 10157,
      "loc": {
        "start": {
          "line": 276,
          "column": 0
        },
        "end": {
          "line": 280,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n ",
      "start": 10159,
      "end": 10411,
      "loc": {
        "start": {
          "line": 282,
          "column": 0
        },
        "end": {
          "line": 287,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetInspectSettings\n * @property {boolean} [enabled=false]     Whether or not to enable the Node inspector when running\n *                                         the app for development.\n * @property {string}  [host='0.0.0.0']    The host where the Node inspector will run.\n * @property {number}  [port=9229]         The port the Node inspector will use.\n * @property {string}  [command='inspect'] The Node inspector flag command (`inspect` or\n *                                         `inspect-brk`).\n * @property {boolean} [ndb=false]         Whether or not to use Google's {@link ndb} instead of\n *                                         the native inspector. The way it will be used will be\n *                                         by calling the executable without path, so it's up to\n *                                         the project to install it (global or local).\n ",
      "start": 10413,
      "end": 11350,
      "loc": {
        "start": {
          "line": 289,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
      "start": 11352,
      "end": 11631,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 307,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
      "start": 11633,
      "end": 12422,
      "loc": {
        "start": {
          "line": 309,
          "column": 0
        },
        "end": {
          "line": 322,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateCSSSettings\n * @property {boolean} [modules=false]\n * Whether or not your application uses CSS Modules. If this is enabled, all your styles will be\n * prefixed with a unique identifier.\n * @property {boolean} [inject=false]\n * If this setting is set to `true`, instead of generating a CSS file with your styles, they'll be\n * dynamically injected on HTML when the bundle gets executed.\n ",
      "start": 12424,
      "end": 12879,
      "loc": {
        "start": {
          "line": 324,
          "column": 0
        },
        "end": {
          "line": 332,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {ProjectConfigurationTargetTemplateBabelFeatures} [features]\n * This object can be used to enable/disable the Babel plugins projext includes.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 12881,
      "end": 13955,
      "loc": {
        "start": {
          "line": 334,
          "column": 0
        },
        "end": {
          "line": 351,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings\n * @property {string} [key=null]\n * The path to the SSL key (`.key`).\n * @property {string} [cert=null]\n * The path to the SSL certificate (`.crt`).\n * @property {string} [ca=null]\n * The path to the SSL public file (`.pem`).\n ",
      "start": 13957,
      "end": 14273,
      "loc": {
        "start": {
          "line": 353,
          "column": 0
        },
        "end": {
          "line": 361,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings\n * @property {boolean} [enabled=false]\n * Whether or not the dev server is being proxied.\n * @property {?string} [host=null]\n * The host used to proxy the dev server. If `null`, it will use the host defined on the dev server\n * main settings.\n * @property {?boolean} [https=null]\n * Whether or not the proxied host uses `https`. If `null` and you have provided SSL certificates\n * for the server, it will become `true`, otherwise it will be `false`.\n ",
      "start": 14275,
      "end": 14819,
      "loc": {
        "start": {
          "line": 363,
          "column": 0
        },
        "end": {
          "line": 373,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the browser when the code changes.\n * @property {boolean} [open=true]\n * Whether or not to open the browser when server is ready.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSSLSettings} [ssl]\n * The paths to the files to enable SSL on the dev server.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerProxiedSettings} [proxied]\n * When the dev server is being proxied (using `nginx` for example), there are certain\n * functionalities, like hot module replacement and live reload that need to be aware of this.\n ",
      "start": 14821,
      "end": 15641,
      "loc": {
        "start": {
          "line": 375,
          "column": 0
        },
        "end": {
          "line": 390,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
      "start": 15643,
      "end": 16840,
      "loc": {
        "start": {
          "line": 392,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='umd']\n * How the library will be exposed: `commonjs2`, `umd` or `window`.\n * @property {boolean} [compress=false]\n * Whether or not to use gzip compression on the generated library file.\n ",
      "start": 16842,
      "end": 17151,
      "loc": {
        "start": {
          "line": 415,
          "column": 0
        },
        "end": {
          "line": 421,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
      "start": 17153,
      "end": 17423,
      "loc": {
        "start": {
          "line": 423,
          "column": 0
        },
        "end": {
          "line": 427,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} [inspect]\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * @property {Array} [excludeModules=[]]\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
      "start": 17425,
      "end": 22062,
      "loc": {
        "start": {
          "line": 429,
          "column": 0
        },
        "end": {
          "line": 501,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationNodeTargetInspectSettings} inspect\n * The target settings for the Node inspector.\n * @property {ProjectConfigurationNodeTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} excludeModules\n * This setting can be used to specify a list of modules that should never be bundled. By default,\n * projext will exclude all the dependencies from the `package.json`, but if you import modules\n * using a sub path (like `colors/safe` instead of `colors`), you need to specify it on this list\n * so the build engine won't try to put it inside the bundle it.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationNodeTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n ",
      "start": 22064,
      "end": 27259,
      "loc": {
        "start": {
          "line": 503,
          "column": 0
        },
        "end": {
          "line": 587,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
      "start": 27261,
      "end": 27534,
      "loc": {
        "start": {
          "line": 589,
          "column": 0
        },
        "end": {
          "line": 593,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} [css]\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} [includeModules=[]]\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} [includeTargets=[]]\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} [uglifyOnProduction=true]\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} [watch]\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [typeScript=false]\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} [copy=[]]\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} [dotEnv]\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
      "start": 27536,
      "end": 32101,
      "loc": {
        "start": {
          "line": 595,
          "column": 0
        },
        "end": {
          "line": 664,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationTargetTemplateOutput} originalOutput\n * The target output settings for each specific build type, without the placeholders replaced.\n * @property {ProjectConfigurationTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {ProjectConfigurationBrowserTargetTemplateCSSSettings} css\n * These options help you customize the way the bundling process handles your CSS code.\n * @property {Array} includeModules\n * This setting can be used to specify a list of node modules you want to process on your bundle.\n * This means that JS files from modules on this list will be transpiled.\n * @property {Array} includeTargets\n * This setting can be used to specify a list of other targets you want to process on your bundle.\n * This means that JS and SCSS files from these targets will be transpiled/processed.\n * @property {boolean} uglifyOnProduction\n * When a bundle is created, this setting will tell the build engine whether to uglify the code\n * for production or not.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationTargetWatchOptions} watch\n * The settings for the projext watch mode, which watches the target files for changes and updates\n * the build without executing it.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} typeScript\n * Whether or not your target uses [TypeScript](https://www.typescriptlang.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationBrowserTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {Array} copy\n * A list of files to copy during the bundling process. It can be a list of file paths relative to\n * the target source directory, in which case they'll be copied to the target distribution\n * directory root; or a list of {@link ProjectConfigurationTargetTemplateCopyItem}.\n * @property {ProjectConfigurationTargetTemplateDotEnvSettings} dotEnv\n * These options are used by both projext and the build engine in order to load \"environment\n * files\".\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 32103,
      "end": 37069,
      "loc": {
        "start": {
          "line": 666,
          "column": 0
        },
        "end": {
          "line": 745,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
      "start": 37071,
      "end": 37320,
      "loc": {
        "start": {
          "line": 747,
          "column": 0
        },
        "end": {
          "line": 751,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
      "start": 37322,
      "end": 38061,
      "loc": {
        "start": {
          "line": 753,
          "column": 0
        },
        "end": {
          "line": 765,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
      "start": 38063,
      "end": 38384,
      "loc": {
        "start": {
          "line": 767,
          "column": 0
        },
        "end": {
          "line": 773,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
      "start": 38386,
      "end": 38961,
      "loc": {
        "start": {
          "line": 775,
          "column": 0
        },
        "end": {
          "line": 785,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 38963,
      "end": 39452,
      "loc": {
        "start": {
          "line": 787,
          "column": 0
        },
        "end": {
          "line": 797,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 39454,
      "end": 40058,
      "loc": {
        "start": {
          "line": 799,
          "column": 0
        },
        "end": {
          "line": 811,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
      "start": 40060,
      "end": 40926,
      "loc": {
        "start": {
          "line": 813,
          "column": 0
        },
        "end": {
          "line": 827,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetFinderSettings\n * @property {boolean} [enabled=true]\n * Whether or not to automatically search for targets on the project folders.\n ",
      "start": 40928,
      "end": 41113,
      "loc": {
        "start": {
          "line": 829,
          "column": 0
        },
        "end": {
          "line": 833,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
      "start": 41115,
      "end": 41346,
      "loc": {
        "start": {
          "line": 835,
          "column": 0
        },
        "end": {
          "line": 840,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodemonSettings\n * @property {boolean} [legacyWatch=true]\n * Whether or not to enable `nodemon` legacy watch mode.\n ",
      "start": 41348,
      "end": 41511,
      "loc": {
        "start": {
          "line": 842,
          "column": 0
        },
        "end": {
          "line": 846,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationTargetFinderSettings}\n * These are the settings for projext _\"targets finder\"_, the feature that reads the project in\n * order to identify targets and their settings.\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n * @property {ProjectConfigurationNodemonSettings}\n * This is used by projext to configure `nodemon`, which is used to execute and watch Node targets.\n ",
      "start": 41513,
      "end": 42094,
      "loc": {
        "start": {
          "line": 848,
          "column": 0
        },
        "end": {
          "line": 858,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
      "start": 42096,
      "end": 43094,
      "loc": {
        "start": {
          "line": 860,
          "column": 0
        },
        "end": {
          "line": 876,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
      "start": 43096,
      "end": 43345,
      "loc": {
        "start": {
          "line": 878,
          "column": 0
        },
        "end": {
          "line": 882,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
      "start": 43347,
      "end": 43400,
      "loc": {
        "start": {
          "line": 884,
          "column": 0
        },
        "end": {
          "line": 886,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
      "start": 43402,
      "end": 43682,
      "loc": {
        "start": {
          "line": 888,
          "column": 0
        },
        "end": {
          "line": 895,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetDefaultHTMLSettings\n * @property {string} title The value of the `<title />` tag.\n * @property {string} bodyAttributes Extra attributes for the `<body />` tag.\n * @property {string} bodyContents The content of the `<body />` tag.\n ",
      "start": 43684,
      "end": 43948,
      "loc": {
        "start": {
          "line": 897,
          "column": 0
        },
        "end": {
          "line": 902,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRulePathSettings\n * @property {Array} include The list of expressions that match the allowed paths for a rule.\n * @property {Array} exclude The list of expressions that match the paths that should be excluded\n *                           from a rule.\n ",
      "start": 43950,
      "end": 44239,
      "loc": {
        "start": {
          "line": 904,
          "column": 0
        },
        "end": {
          "line": 909,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleGlobFilesSettings\n * @property {Array} include The list of glob patterns that match the allowed files for a rule.\n * @property {Array} exclude The list of glob patterns that match the files that should be excluded\n *                           from a rule.\n ",
      "start": 44241,
      "end": 44539,
      "loc": {
        "start": {
          "line": 911,
          "column": 0
        },
        "end": {
          "line": 916,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleFilesSettings\n * @property {Array}                           include The list of expressions that match the\n *                                                     allowed files for a rule.\n * @property {Array}                           exclude The list of expressions that match the\n *                                                     files that should be excluded from a rule.\n * @property {TargetFileRuleGlobFilesSettings} glob    The settings for files but on glob pattern\n *                                                     version. For plugins and libraries that\n *                                                     don't support, or maybe prefer glob over,\n *                                                     expressions.\n ",
      "start": 44541,
      "end": 45322,
      "loc": {
        "start": {
          "line": 918,
          "column": 0
        },
        "end": {
          "line": 928,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFileRuleSettings\n * @property {RegExp}                      extension A expression that validates the extension(s)\n *                                                   the rule is for.\n * @property {string}                      glob      A glob pattern that validates the extension(s)\n *                                                   the rule is for.\n * @property {TargetFileRulePathSettings}  paths     A set of allowed and excluded expressions to\n *                                                   validate the paths where the files can be\n *                                                   found.\n * @property {TargetFileRuleFilesSettings} files     A set of allowed and excluded expressions and\n *                                                   glob patterns for files that would match with\n *                                                   the rule.\n ",
      "start": 45324,
      "end": 46227,
      "loc": {
        "start": {
          "line": 930,
          "column": 0
        },
        "end": {
          "line": 942,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetFileRuleHandler\n * @param {Target}                 target      The target information.\n * @param {boolean}                hasTarget   Whether or not the rule already has a target, or if\n *                                             this is the first one being added.\n * @param {TargetFileRuleSettings} currentRule The current settings of the rule.\n ",
      "start": 46229,
      "end": 46614,
      "loc": {
        "start": {
          "line": 944,
          "column": 0
        },
        "end": {
          "line": 950,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFontsFileRules\n * @property {TargetFileRule} common The rule for all font files that aren't SVG.\n * @property {TargetFileRule} svg    The rule for SVG fonts.\n ",
      "start": 46616,
      "end": 46808,
      "loc": {
        "start": {
          "line": 952,
          "column": 0
        },
        "end": {
          "line": 956,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFilesRules\n * @property {TargetFileRule}       js      The rule for JS files.\n * @property {TargetFileRule}       scss    The rule for SCSS files.\n * @property {TargetFileRule}       css     The rule for CSS files.\n * @property {TargetFontsFileRules} fonts   The rules for font files.\n * @property {TargetFileRule}       images  The rule for image files.\n * @property {TargetFileRule}       favicon The rule for favicon files.\n ",
      "start": 46810,
      "end": 47271,
      "loc": {
        "start": {
          "line": 958,
          "column": 0
        },
        "end": {
          "line": 966,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetExtraFileTransform\n * @param {Buffer} contents The original contents of the file.\n * @return {Promise<string,Error>} The updated contents.\n ",
      "start": 47273,
      "end": 47448,
      "loc": {
        "start": {
          "line": 968,
          "column": 0
        },
        "end": {
          "line": 972,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetExtraFile\n * @property {string}                    from      The file origin path.\n * @property {string}                    to        The file destination path.\n * @property {?TargetExtraFileTransform} transform A custom function to modify the contents of\n *                                                 the file to copy.\n ",
      "start": 47450,
      "end": 47809,
      "loc": {
        "start": {
          "line": 974,
          "column": 0
        },
        "end": {
          "line": 980,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeInspectorSettings\n * @property {boolean} enabled Whether or not to enable the Node inspector.\n * @property {string}  host    The host where the Node inspector will run.\n * @property {number}  port    The port where the Node inspector will run.\n * @property {string}  command The Node inspector flag command (`inspect` or `inspect-brk`).\n * @property {boolean} ndb     Whether or not to use Google's {@link ndb} instead of the native\n *                             inspector. The way it will be used will be by calling the\n *                             executable without path, so it's up to the project to install it\n *                             (global or local).\n ",
      "start": 47811,
      "end": 48511,
      "loc": {
        "start": {
          "line": 982,
          "column": 0
        },
        "end": {
          "line": 992,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
      "start": 48513,
      "end": 48736,
      "loc": {
        "start": {
          "line": 994,
          "column": 0
        },
        "end": {
          "line": 998,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @param {boolean} [forceWatch=false]\n * Force the build engine to watch the target files even if the `watch` setting for the required\n * build type is set to `false`.\n * @param {boolean} [forceInspect=false]\n * Force the build engine to use the Node inspector even if the target setting is disabled. This\n * only applies for Node targets.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
      "start": 48738,
      "end": 49469,
      "loc": {
        "start": {
          "line": 1000,
          "column": 0
        },
        "end": {
          "line": 1016,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
      "start": 49471,
      "end": 49658,
      "loc": {
        "start": {
          "line": 1018,
          "column": 0
        },
        "end": {
          "line": 1022,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Building\n * ================================================================================================\n ",
      "start": 49660,
      "end": 49879,
      "loc": {
        "start": {
          "line": 1024,
          "column": 0
        },
        "end": {
          "line": 1028,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} CLIBuildCommandParams\n * @property {Target}  target  The target information.\n * @property {string}  type    The intended build type: `development` or `production`.\n * @property {boolean} run     Whether or not the target needs to be executed.\n * @property {boolean} build   Whether or not a build will be created. This is always `true` for\n *                             browser targets but it may be false for Node targets if bundling and\n *                             transpiling is disabled.\n * @property {boolean} watch   Whether or not the target files will be watched.\n * @property {boolean} inspect Whether or not to enable the Node inspector.\n ",
      "start": 49881,
      "end": 50561,
      "loc": {
        "start": {
          "line": 1030,
          "column": 0
        },
        "end": {
          "line": 1040,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 50563,
      "end": 50780,
      "loc": {
        "start": {
          "line": 1042,
          "column": 0
        },
        "end": {
          "line": 1046,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
      "start": 50782,
      "end": 50921,
      "loc": {
        "start": {
          "line": 1048,
          "column": 0
        },
        "end": {
          "line": 1052,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
      "start": 50923,
      "end": 51080,
      "loc": {
        "start": {
          "line": 1054,
          "column": 0
        },
        "end": {
          "line": 1058,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 51081,
      "end": 51081,
      "loc": {
        "start": {
          "line": 1059,
          "column": 0
        },
        "end": {
          "line": 1059,
          "column": 0
        }
      }
    }
  ]
}