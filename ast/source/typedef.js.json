{
  "type": "File",
  "start": 0,
  "end": 32287,
  "loc": {
    "start": {
      "line": 1,
      "column": 0
    },
    "end": {
      "line": 695,
      "column": 0
    }
  },
  "program": {
    "type": "Program",
    "start": 0,
    "end": 32287,
    "loc": {
      "start": {
        "line": 1,
        "column": 0
      },
      "end": {
        "line": 695,
        "column": 0
      }
    },
    "sourceType": "module",
    "body": [],
    "directives": [],
    "leadingComments": null,
    "innerComments": [
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
        "start": 0,
        "end": 220,
        "loc": {
          "start": {
            "line": 1,
            "column": 0
          },
          "end": {
            "line": 5,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
        "start": 222,
        "end": 292,
        "loc": {
          "start": {
            "line": 7,
            "column": 0
          },
          "end": {
            "line": 10,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
        "start": 294,
        "end": 390,
        "loc": {
          "start": {
            "line": 12,
            "column": 0
          },
          "end": {
            "line": 15,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
        "start": 392,
        "end": 468,
        "loc": {
          "start": {
            "line": 17,
            "column": 0
          },
          "end": {
            "line": 20,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
        "start": 470,
        "end": 546,
        "loc": {
          "start": {
            "line": 22,
            "column": 0
          },
          "end": {
            "line": 25,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
        "start": 548,
        "end": 684,
        "loc": {
          "start": {
            "line": 27,
            "column": 0
          },
          "end": {
            "line": 30,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
        "start": 686,
        "end": 801,
        "loc": {
          "start": {
            "line": 32,
            "column": 0
          },
          "end": {
            "line": 35,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
        "start": 803,
        "end": 909,
        "loc": {
          "start": {
            "line": 37,
            "column": 0
          },
          "end": {
            "line": 40,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
        "start": 911,
        "end": 1047,
        "loc": {
          "start": {
            "line": 42,
            "column": 0
          },
          "end": {
            "line": 45,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
        "start": 1049,
        "end": 1166,
        "loc": {
          "start": {
            "line": 47,
            "column": 0
          },
          "end": {
            "line": 50,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
        "start": 1168,
        "end": 1292,
        "loc": {
          "start": {
            "line": 52,
            "column": 0
          },
          "end": {
            "line": 55,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
        "start": 1294,
        "end": 1412,
        "loc": {
          "start": {
            "line": 57,
            "column": 0
          },
          "end": {
            "line": 60,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
        "start": 1414,
        "end": 1682,
        "loc": {
          "start": {
            "line": 62,
            "column": 0
          },
          "end": {
            "line": 66,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
        "start": 1684,
        "end": 1880,
        "loc": {
          "start": {
            "line": 68,
            "column": 0
          },
          "end": {
            "line": 74,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
        "start": 1882,
        "end": 2147,
        "loc": {
          "start": {
            "line": 76,
            "column": 0
          },
          "end": {
            "line": 83,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
        "start": 2149,
        "end": 2416,
        "loc": {
          "start": {
            "line": 85,
            "column": 0
          },
          "end": {
            "line": 92,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
        "start": 2418,
        "end": 2696,
        "loc": {
          "start": {
            "line": 94,
            "column": 0
          },
          "end": {
            "line": 98,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
        "start": 2698,
        "end": 3202,
        "loc": {
          "start": {
            "line": 100,
            "column": 0
          },
          "end": {
            "line": 110,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2`, `umd` and `window`\n ",
        "start": 3204,
        "end": 3399,
        "loc": {
          "start": {
            "line": 112,
            "column": 0
          },
          "end": {
            "line": 116,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
        "start": 3401,
        "end": 3677,
        "loc": {
          "start": {
            "line": 118,
            "column": 0
          },
          "end": {
            "line": 122,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateOutput\n * @property {string} [default='[target-name].js']\n * The target output file path for all types of build that are not specified. The only available\n * placeholder is `[target-name]`.\n * @property {string} [development=null]\n * The target output file path on a development build. If `null`, it will fallback to the\n * `default`. The only available placeholder is `[target-name]`.\n * @property {string} [production=null]\n * The target output file path on a production build. If `null`, it will fallback to the `default`.\n * The only available placeholder is `[target-name]`.\n ",
        "start": 3679,
        "end": 4325,
        "loc": {
          "start": {
            "line": 124,
            "column": 0
          },
          "end": {
            "line": 135,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
        "start": 4327,
        "end": 5147,
        "loc": {
          "start": {
            "line": 137,
            "column": 0
          },
          "end": {
            "line": 150,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
        "start": 5149,
        "end": 5428,
        "loc": {
          "start": {
            "line": 152,
            "column": 0
          },
          "end": {
            "line": 156,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths\n * @property {string} [js='statics/js/[target-name].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[name].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
        "start": 5430,
        "end": 6769,
        "loc": {
          "start": {
            "line": 158,
            "column": 0
          },
          "end": {
            "line": 183,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateProductionOutputPaths\n * @property {string} [js='statics/js/[target-name].[hash].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[hash].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[target-name].[hash].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[hash].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
        "start": 6771,
        "end": 8144,
        "loc": {
          "start": {
            "line": 185,
            "column": 0
          },
          "end": {
            "line": 210,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateOutput\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [production=null]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
        "start": 8146,
        "end": 8829,
        "loc": {
          "start": {
            "line": 212,
            "column": 0
          },
          "end": {
            "line": 222,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
        "start": 8831,
        "end": 9135,
        "loc": {
          "start": {
            "line": 224,
            "column": 0
          },
          "end": {
            "line": 230,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
        "start": 9137,
        "end": 9926,
        "loc": {
          "start": {
            "line": 232,
            "column": 0
          },
          "end": {
            "line": 245,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
        "start": 9928,
        "end": 11084,
        "loc": {
          "start": {
            "line": 247,
            "column": 0
          },
          "end": {
            "line": 266,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the server when the code changes.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {boolean} [https=false]\n * Whether or not the dev server host protocol should be `https`.\n ",
        "start": 11086,
        "end": 11498,
        "loc": {
          "start": {
            "line": 268,
            "column": 0
          },
          "end": {
            "line": 278,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
        "start": 11500,
        "end": 12697,
        "loc": {
          "start": {
            "line": 280,
            "column": 0
          },
          "end": {
            "line": 301,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
        "start": 12699,
        "end": 12969,
        "loc": {
          "start": {
            "line": 303,
            "column": 0
          },
          "end": {
            "line": 307,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} [output]\n * The target file paths for each specific build type.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n ",
        "start": 12971,
        "end": 15591,
        "loc": {
          "start": {
            "line": 309,
            "column": 0
          },
          "end": {
            "line": 353,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} output\n * The target file paths for each specific build type.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
        "start": 15593,
        "end": 18476,
        "loc": {
          "start": {
            "line": 355,
            "column": 0
          },
          "end": {
            "line": 407,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
        "start": 18478,
        "end": 18751,
        "loc": {
          "start": {
            "line": 409,
            "column": 0
          },
          "end": {
            "line": 413,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [CSSModules=false]\n * Whether or not your application uses CSS Modules.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
        "start": 18753,
        "end": 21770,
        "loc": {
          "start": {
            "line": 415,
            "column": 0
          },
          "end": {
            "line": 462,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} CSSModules\n * Whether or not your application uses CSS Modules.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
        "start": 21772,
        "end": 25052,
        "loc": {
          "start": {
            "line": 464,
            "column": 0
          },
          "end": {
            "line": 519,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
        "start": 25054,
        "end": 25303,
        "loc": {
          "start": {
            "line": 521,
            "column": 0
          },
          "end": {
            "line": 525,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
        "start": 25305,
        "end": 26044,
        "loc": {
          "start": {
            "line": 527,
            "column": 0
          },
          "end": {
            "line": 539,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
        "start": 26046,
        "end": 26367,
        "loc": {
          "start": {
            "line": 541,
            "column": 0
          },
          "end": {
            "line": 547,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
        "start": 26369,
        "end": 26944,
        "loc": {
          "start": {
            "line": 549,
            "column": 0
          },
          "end": {
            "line": 559,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
        "start": 26946,
        "end": 27435,
        "loc": {
          "start": {
            "line": 561,
            "column": 0
          },
          "end": {
            "line": 571,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
        "start": 27437,
        "end": 28041,
        "loc": {
          "start": {
            "line": 573,
            "column": 0
          },
          "end": {
            "line": 585,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
        "start": 28043,
        "end": 28909,
        "loc": {
          "start": {
            "line": 587,
            "column": 0
          },
          "end": {
            "line": 601,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
        "start": 28911,
        "end": 29142,
        "loc": {
          "start": {
            "line": 603,
            "column": 0
          },
          "end": {
            "line": 608,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n ",
        "start": 29144,
        "end": 29373,
        "loc": {
          "start": {
            "line": 610,
            "column": 0
          },
          "end": {
            "line": 615,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
        "start": 29375,
        "end": 30373,
        "loc": {
          "start": {
            "line": 617,
            "column": 0
          },
          "end": {
            "line": 633,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
        "start": 30375,
        "end": 30624,
        "loc": {
          "start": {
            "line": 635,
            "column": 0
          },
          "end": {
            "line": 639,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
        "start": 30626,
        "end": 30679,
        "loc": {
          "start": {
            "line": 641,
            "column": 0
          },
          "end": {
            "line": 643,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
        "start": 30681,
        "end": 30961,
        "loc": {
          "start": {
            "line": 645,
            "column": 0
          },
          "end": {
            "line": 652,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
        "start": 30963,
        "end": 31353,
        "loc": {
          "start": {
            "line": 654,
            "column": 0
          },
          "end": {
            "line": 664,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
        "start": 31355,
        "end": 31578,
        "loc": {
          "start": {
            "line": 666,
            "column": 0
          },
          "end": {
            "line": 670,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
        "start": 31580,
        "end": 31767,
        "loc": {
          "start": {
            "line": 672,
            "column": 0
          },
          "end": {
            "line": 676,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
        "start": 31769,
        "end": 31986,
        "loc": {
          "start": {
            "line": 678,
            "column": 0
          },
          "end": {
            "line": 682,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
        "start": 31988,
        "end": 32127,
        "loc": {
          "start": {
            "line": 684,
            "column": 0
          },
          "end": {
            "line": 688,
            "column": 3
          }
        }
      },
      {
        "type": "CommentBlock",
        "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
        "start": 32129,
        "end": 32286,
        "loc": {
          "start": {
            "line": 690,
            "column": 0
          },
          "end": {
            "line": 694,
            "column": 3
          }
        }
      }
    ]
  },
  "comments": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
      "start": 294,
      "end": 390,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
      "start": 392,
      "end": 468,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
      "start": 470,
      "end": 546,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
      "start": 548,
      "end": 684,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 686,
      "end": 801,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 803,
      "end": 909,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 911,
      "end": 1047,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
      "start": 1049,
      "end": 1166,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
      "start": 1168,
      "end": 1292,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
      "start": 1294,
      "end": 1412,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
      "start": 1414,
      "end": 1682,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 66,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
      "start": 1684,
      "end": 1880,
      "loc": {
        "start": {
          "line": 68,
          "column": 0
        },
        "end": {
          "line": 74,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 1882,
      "end": 2147,
      "loc": {
        "start": {
          "line": 76,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2149,
      "end": 2416,
      "loc": {
        "start": {
          "line": 85,
          "column": 0
        },
        "end": {
          "line": 92,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
      "start": 2418,
      "end": 2696,
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
      "start": 2698,
      "end": 3202,
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 110,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2`, `umd` and `window`\n ",
      "start": 3204,
      "end": 3399,
      "loc": {
        "start": {
          "line": 112,
          "column": 0
        },
        "end": {
          "line": 116,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
      "start": 3401,
      "end": 3677,
      "loc": {
        "start": {
          "line": 118,
          "column": 0
        },
        "end": {
          "line": 122,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateOutput\n * @property {string} [default='[target-name].js']\n * The target output file path for all types of build that are not specified. The only available\n * placeholder is `[target-name]`.\n * @property {string} [development=null]\n * The target output file path on a development build. If `null`, it will fallback to the\n * `default`. The only available placeholder is `[target-name]`.\n * @property {string} [production=null]\n * The target output file path on a production build. If `null`, it will fallback to the `default`.\n * The only available placeholder is `[target-name]`.\n ",
      "start": 3679,
      "end": 4325,
      "loc": {
        "start": {
          "line": 124,
          "column": 0
        },
        "end": {
          "line": 135,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 4327,
      "end": 5147,
      "loc": {
        "start": {
          "line": 137,
          "column": 0
        },
        "end": {
          "line": 150,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
      "start": 5149,
      "end": 5428,
      "loc": {
        "start": {
          "line": 152,
          "column": 0
        },
        "end": {
          "line": 156,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths\n * @property {string} [js='statics/js/[target-name].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[name].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
      "start": 5430,
      "end": 6769,
      "loc": {
        "start": {
          "line": 158,
          "column": 0
        },
        "end": {
          "line": 183,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateProductionOutputPaths\n * @property {string} [js='statics/js/[target-name].[hash].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[hash].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[target-name].[hash].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[hash].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
      "start": 6771,
      "end": 8144,
      "loc": {
        "start": {
          "line": 185,
          "column": 0
        },
        "end": {
          "line": 210,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateOutput\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [production=null]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
      "start": 8146,
      "end": 8829,
      "loc": {
        "start": {
          "line": 212,
          "column": 0
        },
        "end": {
          "line": 222,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
      "start": 8831,
      "end": 9135,
      "loc": {
        "start": {
          "line": 224,
          "column": 0
        },
        "end": {
          "line": 230,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
      "start": 9137,
      "end": 9926,
      "loc": {
        "start": {
          "line": 232,
          "column": 0
        },
        "end": {
          "line": 245,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 9928,
      "end": 11084,
      "loc": {
        "start": {
          "line": 247,
          "column": 0
        },
        "end": {
          "line": 266,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the server when the code changes.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {boolean} [https=false]\n * Whether or not the dev server host protocol should be `https`.\n ",
      "start": 11086,
      "end": 11498,
      "loc": {
        "start": {
          "line": 268,
          "column": 0
        },
        "end": {
          "line": 278,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
      "start": 11500,
      "end": 12697,
      "loc": {
        "start": {
          "line": 280,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
      "start": 12699,
      "end": 12969,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 307,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} [output]\n * The target file paths for each specific build type.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n ",
      "start": 12971,
      "end": 15591,
      "loc": {
        "start": {
          "line": 309,
          "column": 0
        },
        "end": {
          "line": 353,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} output\n * The target file paths for each specific build type.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 15593,
      "end": 18476,
      "loc": {
        "start": {
          "line": 355,
          "column": 0
        },
        "end": {
          "line": 407,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
      "start": 18478,
      "end": 18751,
      "loc": {
        "start": {
          "line": 409,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [CSSModules=false]\n * Whether or not your application uses CSS Modules.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
      "start": 18753,
      "end": 21770,
      "loc": {
        "start": {
          "line": 415,
          "column": 0
        },
        "end": {
          "line": 462,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} CSSModules\n * Whether or not your application uses CSS Modules.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 21772,
      "end": 25052,
      "loc": {
        "start": {
          "line": 464,
          "column": 0
        },
        "end": {
          "line": 519,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
      "start": 25054,
      "end": 25303,
      "loc": {
        "start": {
          "line": 521,
          "column": 0
        },
        "end": {
          "line": 525,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
      "start": 25305,
      "end": 26044,
      "loc": {
        "start": {
          "line": 527,
          "column": 0
        },
        "end": {
          "line": 539,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
      "start": 26046,
      "end": 26367,
      "loc": {
        "start": {
          "line": 541,
          "column": 0
        },
        "end": {
          "line": 547,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
      "start": 26369,
      "end": 26944,
      "loc": {
        "start": {
          "line": 549,
          "column": 0
        },
        "end": {
          "line": 559,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 26946,
      "end": 27435,
      "loc": {
        "start": {
          "line": 561,
          "column": 0
        },
        "end": {
          "line": 571,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 27437,
      "end": 28041,
      "loc": {
        "start": {
          "line": 573,
          "column": 0
        },
        "end": {
          "line": 585,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
      "start": 28043,
      "end": 28909,
      "loc": {
        "start": {
          "line": 587,
          "column": 0
        },
        "end": {
          "line": 601,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
      "start": 28911,
      "end": 29142,
      "loc": {
        "start": {
          "line": 603,
          "column": 0
        },
        "end": {
          "line": 608,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n ",
      "start": 29144,
      "end": 29373,
      "loc": {
        "start": {
          "line": 610,
          "column": 0
        },
        "end": {
          "line": 615,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
      "start": 29375,
      "end": 30373,
      "loc": {
        "start": {
          "line": 617,
          "column": 0
        },
        "end": {
          "line": 633,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
      "start": 30375,
      "end": 30624,
      "loc": {
        "start": {
          "line": 635,
          "column": 0
        },
        "end": {
          "line": 639,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
      "start": 30626,
      "end": 30679,
      "loc": {
        "start": {
          "line": 641,
          "column": 0
        },
        "end": {
          "line": 643,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
      "start": 30681,
      "end": 30961,
      "loc": {
        "start": {
          "line": 645,
          "column": 0
        },
        "end": {
          "line": 652,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
      "start": 30963,
      "end": 31353,
      "loc": {
        "start": {
          "line": 654,
          "column": 0
        },
        "end": {
          "line": 664,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
      "start": 31355,
      "end": 31578,
      "loc": {
        "start": {
          "line": 666,
          "column": 0
        },
        "end": {
          "line": 670,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
      "start": 31580,
      "end": 31767,
      "loc": {
        "start": {
          "line": 672,
          "column": 0
        },
        "end": {
          "line": 676,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 31769,
      "end": 31986,
      "loc": {
        "start": {
          "line": 678,
          "column": 0
        },
        "end": {
          "line": 682,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
      "start": 31988,
      "end": 32127,
      "loc": {
        "start": {
          "line": 684,
          "column": 0
        },
        "end": {
          "line": 688,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
      "start": 32129,
      "end": 32286,
      "loc": {
        "start": {
          "line": 690,
          "column": 0
        },
        "end": {
          "line": 694,
          "column": 3
        }
      }
    }
  ],
  "tokens": [
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Externals\n * ================================================================================================\n ",
      "start": 0,
      "end": 220,
      "loc": {
        "start": {
          "line": 1,
          "column": 0
        },
        "end": {
          "line": 5,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Jimple}\n * https://yarnpkg.com/en/package/jimple\n ",
      "start": 222,
      "end": 292,
      "loc": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 10,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Nodemon}\n * https://github.com/remy/nodemon/blob/master/doc/requireable.md\n ",
      "start": 294,
      "end": 390,
      "loc": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 15,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Command}\n * https://tj.github.io/commander.js/#Command\n ",
      "start": 392,
      "end": 468,
      "loc": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 20,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Watchpack}\n * https://yarnpkg.com/en/package/watchpack\n ",
      "start": 470,
      "end": 546,
      "loc": {
        "start": {
          "line": 22,
          "column": 0
        },
        "end": {
          "line": 25,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {AppConfiguration}\n * https://homer0.github.io/wootils/class/wootils/node/appConfiguration.js~AppConfiguration.html\n ",
      "start": 548,
      "end": 684,
      "loc": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 30,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {PathUtils}\n * https://homer0.github.io/wootils/class/wootils/node/pathUtils.js~PathUtils.html\n ",
      "start": 686,
      "end": 801,
      "loc": {
        "start": {
          "line": 32,
          "column": 0
        },
        "end": {
          "line": 35,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {Logger}\n * https://homer0.github.io/wootils/class/wootils/node/logger.js~Logger.html\n ",
      "start": 803,
      "end": 909,
      "loc": {
        "start": {
          "line": 37,
          "column": 0
        },
        "end": {
          "line": 40,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EnvironmentUtils}\n * https://homer0.github.io/wootils/class/wootils/node/environmentUtils.js~EnvironmentUtils.html\n ",
      "start": 911,
      "end": 1047,
      "loc": {
        "start": {
          "line": 42,
          "column": 0
        },
        "end": {
          "line": 45,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {EventsHub}\n * https://homer0.github.io/wootils/class/wootils/shared/eventsHub.js~EventsHub.html\n ",
      "start": 1049,
      "end": 1166,
      "loc": {
        "start": {
          "line": 47,
          "column": 0
        },
        "end": {
          "line": 50,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {ErrorHandler}\n * https://homer0.github.io/wootils/class/wootils/node/errorHandler.js~ErrorHandler.html\n ",
      "start": 1168,
      "end": 1292,
      "loc": {
        "start": {
          "line": 52,
          "column": 0
        },
        "end": {
          "line": 55,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @external {RootRequire}\n * https://homer0.github.io/wootils/function/index.html#static-function-rootRequire\n ",
      "start": 1294,
      "end": 1412,
      "loc": {
        "start": {
          "line": 57,
          "column": 0
        },
        "end": {
          "line": 60,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets > sub properties > Shared\n * ================================================================================================\n ",
      "start": 1414,
      "end": 1682,
      "loc": {
        "start": {
          "line": 62,
          "column": 0
        },
        "end": {
          "line": 66,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetTypeCheck\n * @property {boolean} node\n * Whether the target type is `node` or not.\n * @property {boolean} browser\n * Whether the target type is `browser` or not.\n ",
      "start": 1684,
      "end": 1880,
      "loc": {
        "start": {
          "line": 68,
          "column": 0
        },
        "end": {
          "line": 74,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetPaths\n * @property {string} source\n * The absolute path to the target source directory.\n * @property {string} build\n * The absolute path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 1882,
      "end": 2147,
      "loc": {
        "start": {
          "line": 76,
          "column": 0
        },
        "end": {
          "line": 83,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} TargetFolders\n * @property {string} source\n * The relative path to the target source directory.\n * @property {string} build\n * The relative path to the folder, inside the distribution directory, where the target will be\n * bundled/copied.\n ",
      "start": 2149,
      "end": 2416,
      "loc": {
        "start": {
          "line": 85,
          "column": 0
        },
        "end": {
          "line": 92,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Shared\n * ================================================================================================\n ",
      "start": 2418,
      "end": 2696,
      "loc": {
        "start": {
          "line": 94,
          "column": 0
        },
        "end": {
          "line": 98,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateEntry\n * @property {string} [default='index.js']\n * The target entry file for all types of build that don't have a specified entry.\n * @property {string} [development=null]\n * The target entry file on a development build. If `null`, it will fallback to the one specified\n * on `default`.\n * @property {string} [production=null]\n * The target entry file on a production build. If `null`, it will fallback to the one specified\n * on `default`.\n ",
      "start": 2698,
      "end": 3202,
      "loc": {
        "start": {
          "line": 100,
          "column": 0
        },
        "end": {
          "line": 110,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplateLibraryOptions\n * @property {string} [libraryTarget='commonjs2']\n * How the library will be exposed: `commonjs2`, `umd` and `window`\n ",
      "start": 3204,
      "end": 3399,
      "loc": {
        "start": {
          "line": 112,
          "column": 0
        },
        "end": {
          "line": 116,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Node\n * ================================================================================================\n ",
      "start": 3401,
      "end": 3677,
      "loc": {
        "start": {
          "line": 118,
          "column": 0
        },
        "end": {
          "line": 122,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateOutput\n * @property {string} [default='[target-name].js']\n * The target output file path for all types of build that are not specified. The only available\n * placeholder is `[target-name]`.\n * @property {string} [development=null]\n * The target output file path on a development build. If `null`, it will fallback to the\n * `default`. The only available placeholder is `[target-name]`.\n * @property {string} [production=null]\n * The target output file path on a production build. If `null`, it will fallback to the `default`.\n * The only available placeholder is `[target-name]`.\n ",
      "start": 3679,
      "end": 4325,
      "loc": {
        "start": {
          "line": 124,
          "column": 0
        },
        "end": {
          "line": 135,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {string} [nodeVersion='current']\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells the preset the version of Node it should _\"complete\"_.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 4327,
      "end": 5147,
      "loc": {
        "start": {
          "line": 137,
          "column": 0
        },
        "end": {
          "line": 150,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets templates > Sub properties > Browser\n * ================================================================================================\n ",
      "start": 5149,
      "end": 5428,
      "loc": {
        "start": {
          "line": 152,
          "column": 0
        },
        "end": {
          "line": 156,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths\n * @property {string} [js='statics/js/[target-name].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[name].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
      "start": 5430,
      "end": 6769,
      "loc": {
        "start": {
          "line": 158,
          "column": 0
        },
        "end": {
          "line": 183,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateProductionOutputPaths\n * @property {string} [js='statics/js/[target-name].[hash].js']\n * The path to generated Javascript files on the distribution directory. The available placeholders\n * are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/fonts/[name].[hash].[ext]']\n * The path to font files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [css='statics/styles/[target-name].[hash].css']\n * The path to generated stylesheets on the distribution directory. The available placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[hash]`: A random hash generated for cache busting.\n * @property {string} [fonts='statics/images/[name].[hash].[ext]']\n * The path to image files once they are copied to the distribution directory. The available\n * placeholders are:\n * - `[target-name]`: The name of the target.\n * - `[name]`: The file original name.\n * - `[ext]`: The file original extension.\n * - `[hash]`: A random hash generated for cache busting.\n ",
      "start": 6771,
      "end": 8144,
      "loc": {
        "start": {
          "line": 185,
          "column": 0
        },
        "end": {
          "line": 210,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateOutput\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [default]\n * The target output settings for all types of build that don't have specified settings.\n * @property {ProjectConfigurationBrowserTargetTemplateDevelopmentOutputPaths} [development]\n * The target output settings on a development build. If `null`, it will fallback to the ones\n * specified on `default`.\n * @property {ProjectConfigurationBrowserTargetTemplateProductionOutputPaths} [production=null]\n * The target output settings on a production build. If `null`, it will fallback to the ones\n * specified on `default`.\n ",
      "start": 8146,
      "end": 8829,
      "loc": {
        "start": {
          "line": 212,
          "column": 0
        },
        "end": {
          "line": 222,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateSourceMapSettings\n * @property {boolean} [development=false]\n * Whether or not to generate a source map on a development build.\n * @property {boolean} [production=true]\n * Whether or not to generate a source map on a production build.\n ",
      "start": 8831,
      "end": 9135,
      "loc": {
        "start": {
          "line": 224,
          "column": 0
        },
        "end": {
          "line": 230,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateHTMLSettings\n * @property {string} [default='index.html']\n * This setting can be used to set the same value of default `template` and `filename` at once. But\n * it will only overwrite settings with a `null` value, if one is specified, the value of this\n * setting will be ignored.\n * @property {string} [template=null]\n * The file inside your target source that will be used to generate the `html`. If `null`, it will\n * fallback to the value of the `default` setting.\n * @property {string} [filename=null]\n * The file that will be generated when your target is bundled. It will automatically include\n * the `<script />` tag to the generated bundle. If `null`, it will fallback to the value of the\n * `default` setting.\n ",
      "start": 9137,
      "end": 9926,
      "loc": {
        "start": {
          "line": 232,
          "column": 0
        },
        "end": {
          "line": 245,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateBabelSettings\n * @property {Array} [features=[]]\n * projext includes by default two Babel plugins: `transform-class-properties` and\n * `transform-decorators-legacy`. On this list you can use the values `properties` or `decorators`\n * to include them.\n * If you need other plugins, they can be included on the `overwrites` option.\n * @property {number} [browserVersions=2]\n * When building the Babel configuration, projext uses the `babel-preset-env` to just include the\n * necessary stuff. This setting tells how many old versions of the major browsers the target needs\n * transpilation for.\n * Major browsers: Firefox, Chrome, Safari and Edge.\n * @property {boolean} [mobileSupport=true]\n * If `true`, the configuration will add to the list of major browsers `iOS` and `Android`.\n * @property {boolean} [polyfill=true]\n * Whether or not the configuration should include the `babel-polyfill` package.\n * @property {Object} [overwrites={}]\n * If you know how to use Babel and need stuff that is not covered by projext, you can use this\n * setting to overwrite/add any value you may need.\n ",
      "start": 9928,
      "end": 11084,
      "loc": {
        "start": {
          "line": 247,
          "column": 0
        },
        "end": {
          "line": 266,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateDevServerSettings\n * @property {number} [port=2509]\n * The server port.\n * @property {boolean} [reload=true]\n * Whether or not to reload the server when the code changes.\n * @property {string} [host='localhost']\n * The dev server hostname.\n * @property {boolean} [https=false]\n * Whether or not the dev server host protocol should be `https`.\n ",
      "start": 11086,
      "end": 11498,
      "loc": {
        "start": {
          "line": 268,
          "column": 0
        },
        "end": {
          "line": 278,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplateConfigurationSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {null|Object} [default=null]\n * The default configuration. If none is specified, when the target is builded, it will try to\n * use `[target-name].config.js`, located on the configuration folder.\n * @property {string} [path='config/']\n * The path where the configuration files are located.\n * @property {boolean} [hasFolder=true]\n * Whether or not there's a folder with the target name on the configuration path.\n * @property {string} [defineOn='process.env.CONFIG']\n * The name of the variable where the configuration is going to be replaced on your code when\n * bundled.\n * @property {string} [environmentVariable='CONFIG']\n * The name of the environment variable projext will check when building the target in order to\n * load a dynamic configuration.\n * @property {boolean} [loadFromEnvironment=true]\n * Whether or not projext should check for the environment variable value.\n * @property {string} [filenameFormat='[target-name].[configuration-name].config.js']\n * The name format of the configuration files.\n ",
      "start": 11500,
      "end": 12697,
      "loc": {
        "start": {
          "line": 280,
          "column": 0
        },
        "end": {
          "line": 301,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Node\n * ================================================================================================\n ",
      "start": 12699,
      "end": 12969,
      "loc": {
        "start": {
          "line": 303,
          "column": 0
        },
        "end": {
          "line": 307,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationNodeTargetTemplate\n * @property {boolean} [bundle=false]\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} [transpile=false]\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} [engine='webpack']\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} [output]\n * The target file paths for each specific build type.\n * @property {boolean} [runOnDevelopment=false]\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} [babel]\n * The target transpilation options.\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} [library=false]\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n ",
      "start": 12971,
      "end": 15591,
      "loc": {
        "start": {
          "line": 309,
          "column": 0
        },
        "end": {
          "line": 353,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} NodeTarget\n * @property {boolean} bundle\n * Whether or not the target needs to be bundled.\n * If the value is `false`, when running on a development environment, and if the target doesn't\n * need transpilation, the code won't be moved to the distribution directory.\n * @property {boolean} transpile\n * This option is kind of tied to the previous one: You may not want to bundle your Node target,\n * but you can transpile it with [Babel](https://babeljs.io) if you want to use a feature not yet\n * supported by the runtime.\n * @property {string} engine\n * In case `bundle` is `true`, this will tell projext which build engine you are going to bundle\n * the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationNodeTargetTemplateOutput} output\n * The target file paths for each specific build type.\n * @property {boolean} runOnDevelopment\n * This tells projext that when the target is builded (bundled/copied) on a development\n * environment, it should execute it.\n * @property {ProjectConfigurationNodeTargetTemplateBabelSettings} babel\n * The target transpilation options.\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support and, in case it was disabled, it will enable transpilation.\n * @property {boolean} library\n * If the project is bundled, this will tell the build engine that it needs to be builded as a\n * library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 15593,
      "end": 18476,
      "loc": {
        "start": {
          "line": 355,
          "column": 0
        },
        "end": {
          "line": 407,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration > Targets and target templates > Browser\n * ================================================================================================\n ",
      "start": 18478,
      "end": 18751,
      "loc": {
        "start": {
          "line": 409,
          "column": 0
        },
        "end": {
          "line": 413,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationBrowserTargetTemplate\n * @property {string} [engine='webpack']\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} [hasFolder=true]\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} [createFolder=true]\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} [folder='']\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} [entry]\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} [output]\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} [sourceMap]\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} [html]\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} [runOnDevelopment=false]\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} [babel]\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} [flow=false]\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} [CSSModules=false]\n * Whether or not your application uses CSS Modules.\n * @property {boolean} [library=false]\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} [libraryOptions]\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} [cleanBeforeBuild=true]\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} [devServer]\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} [configuration]\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n ",
      "start": 18753,
      "end": 21770,
      "loc": {
        "start": {
          "line": 415,
          "column": 0
        },
        "end": {
          "line": 462,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BrowserTarget\n * @property {string} engine\n * This will tell projext which build engine you are going to bundle the target code with.\n * @property {boolean} hasFolder\n * Whether your target code is on a sub folder of the source directory (`src/[target-name]/`) or\n * the contents of the source directory are your target code (useful when working with a single\n * target).\n * @property {boolean} createFolder\n * Whether or not to create a folder for your targets code on the distribution directory when the\n * target is bundled/copied.\n * @property {string} folder\n * If either `hasFolder` or `createFolder` is `true`, this can be used to specify a different\n * folder name than the target's name.\n * @property {ProjectConfigurationTargetTemplateEntry} entry\n * The target entry files for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateOutput} output\n * The target output settings for each specific build type.\n * @property {ProjectConfigurationBrowserTargetTemplateSourceMapSettings} sourceMap\n * The target source map settings for each specific environment build.\n * @property {ProjectConfigurationBrowserTargetTemplateHTMLSettings} html\n * In the case the target is an app, these are the options for the `html` file that will include\n * the bundle `<script />`; and if your target is a library, this can be used to test your library.\n * @property {boolean} runOnDevelopment\n * This will tell the build engine that when you build the target for a development environment,\n * it should bring up an `http` server to _\"run\"_ your target.\n * @property {ProjectConfigurationBrowserTargetTemplateBabelSettings} babel\n * These options are used by the build engine to configure [Babel](https://babeljs.io):\n * @property {boolean} flow\n * Whether or not your target uses [flow](https://flow.org/). This will update the Babel\n * configuration in order to add support for it.\n * @property {boolean} CSSModules\n * Whether or not your application uses CSS Modules.\n * @property {boolean} library\n * This will tell the build engine that it needs to be builded as a library to be `require`d.\n * @property {ProjectConfigurationTargetTemplateLibraryOptions} libraryOptions\n * In case `library` is `true`, these options are going to be used by the build engine to configure\n * your library.\n * @property {boolean} cleanBeforeBuild\n * Whether or not to remove all code from previous builds from the distribution directory when\n * making a new build.\n * @property {ProjectConfigurationBrowserTargetTemplateDevServerSettings} devServer\n * These are the options for the `http` server projext will use when running the target on a\n * development environment.\n * @property {ProjectConfigurationBrowserTargetTemplateConfigurationSettings} configuration\n * These are the settings for the feature that allows a browser target to have a dynamic\n * configuration file.\n * @property {TargetTypeCheck} is\n * To check whether the target type is `node` or `browser`\n * @property {TargetPaths} paths\n * The target absolute paths to both the source directory folder and the distribution directory\n * folder.\n * @property {TargetFolders} folders\n * The target relative paths to both the source directory folder and the distribution directory\n * folder.\n ",
      "start": 21772,
      "end": 25052,
      "loc": {
        "start": {
          "line": 464,
          "column": 0
        },
        "end": {
          "line": 519,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Project configuration & Sub properties\n * ================================================================================================\n ",
      "start": 25054,
      "end": 25303,
      "loc": {
        "start": {
          "line": 521,
          "column": 0
        },
        "end": {
          "line": 525,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationPathSettings\n * @property {string} [source='src']\n * The directory, relative to your project path, where your targets code is located. On the\n * documentation is often referred as the _\"source directory\"_.\n * @property {string} [build='dist']\n * The directory, relative to your project path, where your targets bundled code will be located.\n * On the documentation is often referred as the _\"distribution directory\"_.\n * @property {string} [privateModules='private']\n * This is for the feature that copies when bundling. In case you are using the feature to copy an\n * npm module that, let's say, is not published, projext will save that module (without its\n * dependencies) on that folder.\n ",
      "start": 25305,
      "end": 26044,
      "loc": {
        "start": {
          "line": 527,
          "column": 0
        },
        "end": {
          "line": 539,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationTargetTemplates\n * @property {ProjectConfigurationNodeTargetTemplate} [node]\n * The template settings for all targets with the type `node`.\n * @property {ProjectConfigurationBrowserTargetTemplate} [browser]\n * The template settings for all targets with the type `browser`.\n ",
      "start": 26046,
      "end": 26367,
      "loc": {
        "start": {
          "line": 541,
          "column": 0
        },
        "end": {
          "line": 547,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationFeatureTriggerSettings\n * @property {boolean} [enabled=true]\n * Whether or not the feature should be triggered when a target is being build.\n * @property {boolean} [onlyOnProduction=true]\n * This tells projext if the feature should be triggered only when building for production, or if\n * it should do it for development too.\n * @property {Array} [targets=[]]\n * This can be used to specify the targets that will trigger the feature when builded. If no target\n * is specified, the feature will be triggered by all the targets.\n ",
      "start": 26369,
      "end": 26944,
      "loc": {
        "start": {
          "line": 549,
          "column": 0
        },
        "end": {
          "line": 559,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationCopyFeatureSettings\n * @property {boolean} [enabled=false]\n * Whether or not the feature is enabled.\n * @property {Array} [items=[]]\n * A list of files and/or directories that will be copied. All with paths relative to the project\n * directory.\n * @property {ProjectConfigurationFeatureTriggerSettings} [copyOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 26946,
      "end": 27435,
      "loc": {
        "start": {
          "line": 561,
          "column": 0
        },
        "end": {
          "line": 571,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionRevisionSettings\n * @property {boolean} [enabled=false]\n * Whether or not the revision file feature is enabled.\n * @property {boolean} [copy=true]\n * Whether or not to copy the revision file when the project files are being copied to the\n * distribution directory.\n * @property {string} [filename='revision']\n * The name of the revision file.\n * @property {ProjectConfigurationFeatureTriggerSettings} [createRevisionOnBuild]\n * Since the feature is also available through the projext CLI, you can configure how the feature\n * behaves when building.\n ",
      "start": 27437,
      "end": 28041,
      "loc": {
        "start": {
          "line": 573,
          "column": 0
        },
        "end": {
          "line": 585,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationVersionSettings\n * @property {string} [defineOn='process.env.VERSION']\n * The name of the variable where the version is going to be replaced on your code when bundled.\n * @property {string} [environmentVariable='VERSION']\n * The name of the environment variable projext should check to get the project version.\n * @property {ProjectConfigurationVersionRevisionSettings} [revision]\n * This is like a sub-feature. A revision file is a file that contains the version of your project.\n * This is useful when deploying the project to an environment where you have no access to the\n * environment variable.\n *\n * The way the revision file works is by first checking if the environment variable is available\n * and, if not, it will check if the project is on a `GIT` repository and try to get the hash of\n * the last commit.\n ",
      "start": 28043,
      "end": 28909,
      "loc": {
        "start": {
          "line": 587,
          "column": 0
        },
        "end": {
          "line": 601,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationWatchSettings\n * @property {boolean} [poll=true]\n * Whether or not to use polling to get the changes on the file system, and if so, it can also be\n * used to specify the ms interval.\n ",
      "start": 28911,
      "end": 29142,
      "loc": {
        "start": {
          "line": 603,
          "column": 0
        },
        "end": {
          "line": 608,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationOtherSettings\n * @property {ProjectConfigurationWatchSettings}\n * This is used by projext to configure `watchpack`, which is used to watch Node files that need to\n * be transpiled.\n ",
      "start": 29144,
      "end": 29373,
      "loc": {
        "start": {
          "line": 610,
          "column": 0
        },
        "end": {
          "line": 615,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} ProjectConfigurationSettings\n * @property {ProjectConfigurationPathSettings} [paths]\n * This setting is all about where your code is located and where it will be bundled\n * @property {ProjectConfigurationTargetTemplates} [targetsTemplates]\n * There was no way to have _\"smart defaults\"_ for targets and at the same time allow projext\n * an unlimited amount of targets, and that's why the this setting exists.\n * The targets will extend the template which name is the same as their `type` property.\n * @property {Object} targets\n * This will be a dictionary with the {@link Target} definitions.\n * @property {ProjectConfigurationCopyFeatureSettings} [copy]\n * These settings are for the feature that enables projext to copy files when building targets.\n * @property {ProjectConfigurationVersionSettings} [version]\n * These settings are for the feature that manages your project version.\n * @property {ProjectConfigurationOtherSettings} [others]\n * Miscellaneous options.\n ",
      "start": 29375,
      "end": 30373,
      "loc": {
        "start": {
          "line": 617,
          "column": 0
        },
        "end": {
          "line": 633,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Targets and other target related types\n * ================================================================================================\n ",
      "start": 30375,
      "end": 30624,
      "loc": {
        "start": {
          "line": 635,
          "column": 0
        },
        "end": {
          "line": 639,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {BrowserTarget|NodeTarget} Target\n ",
      "start": 30626,
      "end": 30679,
      "loc": {
        "start": {
          "line": 641,
          "column": 0
        },
        "end": {
          "line": 643,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} TargetConfigurationCreator\n * @param {string} overwritePath\n * The path to the file that can create the configuration.\n * @param {ConfigurationFile} baseConfiguration\n * The configuration service that will be extended.\n * @return {ConfigurationFile}\n ",
      "start": 30681,
      "end": 30961,
      "loc": {
        "start": {
          "line": 645,
          "column": 0
        },
        "end": {
          "line": 652,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} BuildEngineGetCommand\n * @param {Target} target\n * The target information.\n * @param {string} buildType\n * The intended build type: `development` or `production`.\n * @param {boolean} [forceRun=false]\n * Force the target to run even if the `runOnDevelopment` setting is `false`.\n * @return {string}\n * The command the shell script will use to build the target.\n ",
      "start": 30963,
      "end": 31353,
      "loc": {
        "start": {
          "line": 654,
          "column": 0
        },
        "end": {
          "line": 664,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * \"Interfaces\"\n * ================================================================================================\n ",
      "start": 31355,
      "end": 31578,
      "loc": {
        "start": {
          "line": 666,
          "column": 0
        },
        "end": {
          "line": 670,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} BuildEngine\n * @property {BuildEngineGetCommand} getBuildCommand\n * The method used by projext in order to get the shell comands to build and/or run a target.\n ",
      "start": 31580,
      "end": 31767,
      "loc": {
        "start": {
          "line": 672,
          "column": 0
        },
        "end": {
          "line": 676,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * ================================================================================================\n * Others\n * ================================================================================================\n ",
      "start": 31769,
      "end": 31986,
      "loc": {
        "start": {
          "line": 678,
          "column": 0
        },
        "end": {
          "line": 682,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {function} ProviderRegisterMethod\n * @param {Projext} app\n * A reference to the projext dependency injection container.\n ",
      "start": 31988,
      "end": 32127,
      "loc": {
        "start": {
          "line": 684,
          "column": 0
        },
        "end": {
          "line": 688,
          "column": 3
        }
      }
    },
    {
      "type": "CommentBlock",
      "value": "*\n * @typedef {Object} Provider\n * @property {ProviderRegisterMethod} register\n * The method that gets called by projext when registering the provider.\n ",
      "start": 32129,
      "end": 32286,
      "loc": {
        "start": {
          "line": 690,
          "column": 0
        },
        "end": {
          "line": 694,
          "column": 3
        }
      }
    },
    {
      "type": {
        "label": "eof",
        "beforeExpr": false,
        "startsExpr": false,
        "rightAssociative": false,
        "isLoop": false,
        "isAssign": false,
        "prefix": false,
        "postfix": false,
        "binop": null,
        "updateContext": null
      },
      "start": 32287,
      "end": 32287,
      "loc": {
        "start": {
          "line": 695,
          "column": 0
        },
        "end": {
          "line": 695,
          "column": 0
        }
      }
    }
  ]
}